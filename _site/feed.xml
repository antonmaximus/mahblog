<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>anton</title>
    <description>A small growth today makes progression happen...</description>
    <link>www.anton23.com/mahblog/</link>
    <atom:link href="www.anton23.com/mahblog/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 28 Jun 2015 13:51:43 -0700</pubDate>
    <lastBuildDate>Sun, 28 Jun 2015 13:51:43 -0700</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>How To Improve Daily Decision Making by Avoiding 4 Cognitive Biases</title>
        <description>&lt;p&gt;Study shows that there are many biases in our decision-making process. Below are the top four biases that cloud judgment.&lt;/p&gt;

&lt;h2&gt;1. Self-serving bias.&lt;/h2&gt;

&lt;p&gt;People attribute sucesses to moslty themselves and that all failures are due to others&amp;#39; shortcomings. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pros: Protects self-esteem (and lessens depression)&lt;/li&gt;
&lt;li&gt;Cons: Can&amp;#39;t learn from mistakes and improve (because one doesn&amp;#39;t take responsibility for failures)&lt;/li&gt;
&lt;li&gt;How to Overcome: Be with close friends who can call you out and keep you grounded. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;2. Cognitive Fluency.&lt;/h2&gt;

&lt;p&gt;It&amp;#39;s how easy an idea is to process and understand; the more fluent the idea, the more we unconsciously trust it.   &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pros: Can be used to influence other people.&lt;/li&gt;
&lt;li&gt;Cons: Whether something is easy has nothing to do with truth -- which lead to an &lt;strong&gt;illusion of truth&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;How to Overcome: If something sounds too good, question it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;3. Sunk-cost Fallacy.&lt;/h2&gt;

&lt;p&gt;The idea that people are more likely to endure something that already sucks if they&amp;#39;ve already invested so much into it. As opposed to cutting loses and moving on.  &lt;/p&gt;

&lt;p&gt;This fallacy stems from our intense aversion to loss.  The thought that we wasted resources motivates us to carry on, even if it&amp;#39;s clearly a loss cause.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to Overcome: Focus on future cost and benefits &lt;strong&gt;not&lt;/strong&gt; past losses. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;4. Confirmation Bias.&lt;/h2&gt;

&lt;p&gt;You only search for evidence that confirms your beliefs.  This explains why so many people stick to many unscientific beliefs.&lt;/p&gt;

&lt;p&gt;Another consequence is that the framing of question is vital.  &lt;em&gt;Are you happy with your life?&lt;/em&gt; vs. &lt;em&gt;Are you unhappy with your life?&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to Overcome: Search for &lt;strong&gt;contradictory&lt;/strong&gt; evidence.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot;  allowfullscreen=&quot;&quot; class=&quot;youtube-player&quot; src=&quot;//www.youtube.com/embed/3Ux3pm6UfCo?wmode=transparent&amp;amp;amp;autoplay=0&amp;amp;amp;rel=0&amp;amp;amp;showinfo=0&amp;amp;amp;autohide=1&amp;amp;amp;color=white&amp;amp;amp;&quot; type=&quot;text/html&quot;&gt;&lt;/iframe&gt;
  &lt;figcaption&gt;2014 September Squatz (245x3)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;hr&gt;
</description>
        <pubDate>Thu, 28 May 2015 07:00:00 -0700</pubDate>
        <link>www.anton23.com/mahblog/meditate/2015/05/28/four-cognitive-biases/</link>
        <guid isPermaLink="true">www.anton23.com/mahblog/meditate/2015/05/28/four-cognitive-biases/</guid>
        
        
        <category>meditate</category>
        
      </item>
    
      <item>
        <title>Angular</title>
        <description>&lt;h2&gt;Why Angular?&lt;/h2&gt;

&lt;p&gt;If you&amp;#39;re using JavaScript to create a dynamic website, Angular is a good choice.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Angular helps you organize your JavaScript&lt;/li&gt;
&lt;li&gt;Angular helps create responsive (as in fast) websites&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Angular plays well with jQuery&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;Angular is easy to test&lt;/li&gt;
&lt;li&gt;Angular is &amp;quot;responsive&amp;quot; -- only requests the information it needs (hence; no need to load an entire page)&lt;/li&gt;
&lt;li&gt;Modern API-Driven Application -- like the one being built in the code school course&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;What is Angular JS?&lt;/h2&gt;

&lt;p&gt;A client-side JavaScript Framework for adding interactivity to HTML.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Directives&lt;/strong&gt; is used to tell our HTML when to trigger our JavaScript.  We add behavior to our HTML through Directives.  It is how we bind the behavior. (I know, I know. You get it!)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Modules&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Where we write pieces of our Angular application, and keep our code encapsulated.&lt;/li&gt;
&lt;li&gt;Makes our code more maintainable, testable, and readable.&lt;/li&gt;
&lt;li&gt;Where we define dependencies for our app.
&lt;img src=&quot;http://i.imgur.com/m08hpjY.png&quot; alt=&quot;&quot;&gt;
&lt;img src=&quot;http://i.imgur.com/oFQopox.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Expressions&lt;/strong&gt; allow you to insert dynamic values into your HTML. ``&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Controllers&lt;/strong&gt; are where we define our app&amp;#39;s behavior by defining functions and values. The scope of the controller is inside the DOM element it&amp;#39;s attached to.
&lt;img src=&quot;http://i.imgur.com/QNLkJR8.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;!-- tsk --&gt;

&lt;!-- Defaul Backbone `parse` just returns response, so we edit it like so...

    var TodoItem = Backbone.Model.extend({
      parse: function(response){
    return response.todo; }
    });
 --&gt;

&lt;hr&gt;
</description>
        <pubDate>Mon, 11 May 2015 07:00:00 -0700</pubDate>
        <link>www.anton23.com/mahblog/career/2015/05/11/angular/</link>
        <guid isPermaLink="true">www.anton23.com/mahblog/career/2015/05/11/angular/</guid>
        
        
        <category>career</category>
        
      </item>
    
      <item>
        <title>The steaks are high</title>
        <description>&lt;p&gt;Since I&amp;#39;ve started living the &amp;quot;simple life&amp;quot; back in 2013, the majority of my diet consists of eggs, steamed fish, steamed chicken, and steamed vegetables.  As anyone could imagine, steamed anything doesn&amp;#39;t really taste too well because you lose all of the flavors -- which I was fine with because the food is clean, food cooks fast, and cleaning is a breeze.&lt;/p&gt;

&lt;p&gt;However, recently I started to feel that I need to add diversity into my diet while still keeping it clean (i.e., no processed foods).  So occasionally, I&amp;#39;d go and order some piece of steak at a restaurant.  However, this left me unsatisfied for the following reasons: 1.) The portions are too small and overpriced for their size, and 2.) I would need to spend time to drive out, order, and wait for it to be ready.   Needless to say, the ROI is not worth it. &lt;/p&gt;

&lt;p&gt;So I thought, why not learn how to cook steaks properly.  After searching through some reddit posts on how to cook steaks, I was brought to &lt;a href=&quot;http://www.seriouseats.com/2012/12/the-food-lab-complete-guide-to-pan-seared-steaks.html&quot;&gt;this site&lt;/a&gt;.  What I like about it that it&amp;#39;s simple: pan-seared steak. No oven necessary. And below is my take away...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. The tools.&lt;/strong&gt;  I plan to learn the ways of the cast-iron skillet (I got it from Amazon).  Also, I&amp;#39;ll be using a thermometer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. The Cut.&lt;/strong&gt; Ribeye, New York Strip, Tenderloin, and T-bone.  In that order.  T-bone is ought to be avoided (if possible) because it requires a more advanced technique of cooking due to the bone.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. The Grade.&lt;/strong&gt; All beef that&amp;#39;s sold in the U.S. is graded by the United States Department of Agriculture on a scale according to its tenderness and degree of marbling. The grades are: Prime, Choice, Select, and Canner.  Only about 2% of the beef sold in the US is Prime.  Choice and Select are what you find supermarkets. Canner is at school lunches and dog food.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. The Thickness.&lt;/strong&gt; Try to go for at least 1.5 inch in thickness.  &lt;em&gt;&amp;quot;Without an adequately thick steak, it&amp;#39;s very difficult to get that contrast between exterior and interior that is so desirable. Thin, thin steaks will tend to overcook before they can finish developing a nice crust.&amp;quot;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Aging.&lt;/strong&gt; This is more advanced for the basic cook (so I&amp;#39;ll leave this out for now). In fact, it is pretty much impossible to dry age properly at home.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Bone-in, Bone-out.&lt;/strong&gt;  This is pretty minor.   A bone accomplishes two things: It prevent some moisture loss by reducing the surface area of a steak, and it keeps that section of the steak from overcooking by acting as an insulator.  Sure there&amp;#39;s that extra moist, but you&amp;#39;ll have to learn the ways of basting to ensure the meat in the bone area gets cooked properly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. The Salt.&lt;/strong&gt; USE KOSHER SALT, not regular table salt.  Season it at least overnight.  A couple of days or more if possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. Cook with Oil. Add butter later.&lt;/strong&gt;  Milk proteins in butter get burn when too hot.  Butter is best added to the pan a few minutes before it&amp;#39;s done cooking.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. The Flipping.&lt;/strong&gt; It&amp;#39;s actually slightly better to flip often.  Nonetheless, this is minutiae.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. The Baste.&lt;/strong&gt; This is basically spooning hot fat over your meat.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10. Add Aromatics.&lt;/strong&gt; After the butter is melted, add a handful of herbs such as thyme or rosemary, along with some sweet alliums like shallots or garlic. They pop and sputter, releasing their aromas and rapidly infusing the fat with their flavor. When you baste, you&amp;#39;re adding that aroma with each spoonful.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;11. Let it Rest.&lt;/strong&gt; &lt;em&gt;&amp;quot;If you cut the steak open as soon as it comes off the grill, the juice has only one place to go — onto your plate. On the other hand, allow the steak to rest until its temperature has normalized, and the juices will distribute themselves more evenly throughout its interior.&amp;quot;&lt;/em&gt;&lt;/p&gt;

&lt;hr&gt;
</description>
        <pubDate>Sat, 28 Mar 2015 07:00:01 -0700</pubDate>
        <link>www.anton23.com/mahblog/food/2015/03/28/steaks-are-high/</link>
        <guid isPermaLink="true">www.anton23.com/mahblog/food/2015/03/28/steaks-are-high/</guid>
        
        
        <category>food</category>
        
      </item>
    
      <item>
        <title>December Deadz</title>
        <description>&lt;p&gt;I originally planned to write this in December... but alas, laziness and procrastination got in the way and now it&amp;#39;s March.  Nonetheless, better late than never. &lt;/p&gt;

&lt;p&gt;As of early December, I&amp;#39;m pulling 305 lbs in 6 reps (for my first set).  To keep thing simple, I&amp;#39;ll keep track of the first set only throughout my progression. Keep in mind that this usually done after a good set of squats.  In the video below, I&amp;#39;m highly certain that I did it after squats.  I&amp;#39;ll explicitly make a note for it next time.&lt;/p&gt;

&lt;p&gt;For next December (the one in 2015), I&amp;#39;d like to hit 4 plates for 1 -- this is about 405 lbs total.  Though, this might sound too ambitious, I think I might be able to come close.  I&amp;#39;m basing this judgment from the graph of my previous numbers (which have been converted to 1 rep max).  Peace.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/eAAPnBF.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;figure&gt;&lt;iframe width=&quot;360&quot; height=&quot;480&quot;  allowfullscreen=&quot;&quot; class=&quot;youtube-player&quot; src=&quot;//www.youtube.com/embed/VdZn_FRxY7k?wmode=transparent&amp;amp;amp;autoplay=0&amp;amp;amp;rel=0&amp;amp;amp;showinfo=0&amp;amp;amp;autohide=1&amp;amp;amp;color=white&amp;amp;amp;&quot; type=&quot;text/html&quot;&gt;&lt;/iframe&gt;
  &lt;figcaption&gt;2014 December Deadz (305x6)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;hr&gt;
</description>
        <pubDate>Sat, 28 Mar 2015 07:00:00 -0700</pubDate>
        <link>www.anton23.com/mahblog/exercise/2015/03/28/december-deadz/</link>
        <guid isPermaLink="true">www.anton23.com/mahblog/exercise/2015/03/28/december-deadz/</guid>
        
        
        <category>exercise</category>
        
      </item>
    
      <item>
        <title>Investing... Here we go again.</title>
        <description>&lt;h2&gt;July Note...&lt;/h2&gt;

&lt;p&gt;I&amp;#39;ve looked into investing pretty heavily about 5 years ago.  I wish I made notes of the terms that ought to be remembered and the approach I followed.  Oh well, it&amp;#39;s not too late to refresh my memory and make notes.  So here goes...&lt;/p&gt;

&lt;p&gt;It&amp;#39;s 2014.  The approach I&amp;#39;ll be using is making my portfolio.  &lt;/p&gt;

&lt;p&gt;First off, reading...&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;I Will Teach You To Be Rich -- as far as investing is concerned, you cannot beat the market and you&amp;#39;re better off investing in index funds because of the low fees.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Boglehead&amp;#39;s Guide to Investing&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A Random Walk Down Wall Street&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;November Note...&lt;/h2&gt;

&lt;p&gt;Since I&amp;#39;ve been procrastinating  reading those fun reads mentioned above, I just went straight to the meat and bones.
The first resource I went to was &lt;a href=&quot;https://www.reddit.com/r/personalfinance/wiki/commontopics&quot;&gt;reddit&amp;#39;s /r/personalfinance sub&lt;/a&gt;.
Here&amp;#39;s the plan of action:&lt;/p&gt;

&lt;h3&gt;1a. Emergency Fund&lt;/h3&gt;

&lt;p&gt;This is typically the basic Savings Account.  It&amp;#39;s a fund where you can easily take money from
 for the unexpecteds: job loss, appliance replacement,
medical procedures, unexpected travel, and more.  Since it&amp;#39;s easy to have access to
the money, its downside is that the interest you earn won&amp;#39;t be high.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What&amp;#39;s the ideal size for an emergency fund?&lt;/strong&gt; If you&amp;#39;re already an expert in your career (i.e., you&amp;#39;re
sought-after), a fund for 6-months of expenses will work.  However, if you feel you&amp;#39;re
in the early stages of your career (i.e., a lot of uncertainties), a fund for 12 months of expenses
is a good bet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What kinds of accounts should an emergency fund in be?&lt;/strong&gt;  Emergency funds should be held in safe investments
that can be liquidated in a hurry -- Savings &amp;amp; Checking account, CDs (Certificate of Deposits), and I-bonds.&lt;/p&gt;

&lt;p&gt;Another good way letting your money work for you is to have the E-Fund in tiers as seen below, 
so you can take advantage of the higher interest rates that some accounts offer. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tier 1: Checking account -- holds 2 month worth of expenses. &lt;/li&gt;
&lt;li&gt;Tier 2: Savings account -- holds 4 month worth of expenses.&lt;/li&gt;
&lt;li&gt;Tier 3: CDs and I-bonds -- holds 6-12 month worth of expenses. 

&lt;ul&gt;
&lt;li&gt;The drawback of these accounts require a relatively longer investment time (e.g., 6 months)
for it to yield interest.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;1b. Higher Education Expenses&lt;/h3&gt;

&lt;h3&gt;2. Employer-sponsored matching funds&lt;/h3&gt;

&lt;p&gt;You want to ensure you get the guaranteed free money to its full-extent.  That&amp;#39;s all there is to it.&lt;/p&gt;

&lt;h3&gt;3. Pay down high interest debts&lt;/h3&gt;

&lt;p&gt;I&amp;#39;ve heard the rule of thumb that over 6% is &lt;strong&gt;high&lt;/strong&gt;, under 4% is low, and between that you trust your gut.
In context, the average inflation rate is 3%  and the average stock market return is 7%. Hence,
by paying those high interest rates, you&amp;#39;re ensuring yourself to not lose money by that much.&lt;/p&gt;

&lt;h3&gt;4. Additional savings for retirement in an IRA&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Why contribute to an IRA? Shouldn&amp;#39;t I go back to my 401k?&lt;/strong&gt; Choose IRAs, since they are opened by individuals with a provider of your choice, are generally better than 401k plans because you have more fund choices. Low cost providers like Vanguard, Fidelity, and Schwab all offer low expense ratio index funds to invest in. However, if you have an excellent 401k plan such as the U.S. Federal government&amp;#39;s Thrift Savings Plan or work for a large company that has negotiated institutional rates for the mutual funds in their 401k plan, you may want to &amp;quot;Maximize contributions to employer-sponsored plan&amp;quot; (i.e., 401k) first and return to your IRA contribution afterwards.&lt;/p&gt;

&lt;h3&gt;5a. Maximize contributions to employer-sponsored plan&lt;/h3&gt;

&lt;p&gt;After covering all bases, now is a good time to maximize the contributions to 401k.&lt;br&gt;
&lt;a href=&quot;https://www.reddit.com/r/personalfinance/wiki/401k&quot;&gt;Here&amp;#39;s a link to tips on how-to&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;5b. Save for non-retirement goals&lt;/h3&gt;

&lt;p&gt;Well, this is a toss-up compared to 6, since both deals with paying yourself either way.
Non-retirement goals include paying down a house sooner, vacations, vehicles, babies, 
and the like.  Just keep in mind that (especially for a young person) the more time your money has to grow, the more powerful the effects of compounding will be on your retirement savings.&lt;/p&gt;

&lt;h3&gt;6. Save for retirement in a taxable account&lt;/h3&gt;

&lt;p&gt;If there&amp;#39;s still lump sump after covering all the bases, open a taxable brokerage account and invest according to your retirement asset allocation. You&amp;#39;ll want to have a decent grasp on &lt;a href=&quot;http://www.bogleheads.org/wiki/Asset_allocation_in_multiple_accounts&quot;&gt;asset allocation in multiple accounts&lt;/a&gt; and &lt;a href=&quot;http://www.bogleheads.org/wiki/Principles_of_tax-efficient_fund_placement&quot;&gt;tax-efficient fund placement.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;December Note...&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&amp;quot;Not All Income are Taxed the same.&amp;quot;&lt;/em&gt;  This is what I learned after watching &lt;a href=&quot;http://www.bogleheads.org/wiki/Video:Bogleheads%C2%AE_investment_philosophy&quot;&gt;Boglehead&amp;#39;s Investment Philosophy&lt;/a&gt; where the basic building blocks of investing is discussed.&lt;/p&gt;

&lt;hr&gt;
</description>
        <pubDate>Sun, 16 Nov 2014 06:00:00 -0800</pubDate>
        <link>www.anton23.com/mahblog/investing/2014/11/16/investing-again/</link>
        <guid isPermaLink="true">www.anton23.com/mahblog/investing/2014/11/16/investing-again/</guid>
        
        
        <category>investing</category>
        
      </item>
    
      <item>
        <title>Anatomy of Backbone B1</title>
        <description>&lt;h2&gt;1. More Models&lt;/h2&gt;

&lt;h3&gt;Parsing non-standard JSON into your Models&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;// Response from Server
{todo:{id: 1, description: &amp;#39;Pick up milk&amp;#39;, status: &amp;#39;incomplete&amp;#39; }}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- tsk --&gt;

&lt;p&gt;Defaul Backbone &lt;code&gt;parse&lt;/code&gt; just returns response, so we edit it like so...&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoItem = Backbone.Model.extend({
  parse: function(response){
return response.todo; }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- tsk --&gt;

&lt;p&gt;Instantiating Models, doesn&amp;#39;t call parse by default. So we call it with &lt;code&gt;parse: true&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var todoItem = new TodoItem({
  todo:{id: 1, description: &amp;#39;Pick up milk&amp;#39;, status: &amp;#39;incomplete&amp;#39;}
}, { parse: true });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Changing Attribute Names&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;// Response from Server
{todo:{id: 1, desc: &amp;#39;Pick up milk&amp;#39;, status: &amp;#39;incomplete&amp;#39;}}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- tsk --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoItem = Backbone.Model.extend({
  parse: function(response){
    response = response.todo;
    response.description = response.desc;
    delete response.desc;
    return response;
  }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Sending JSON back to the Server&lt;/h3&gt;

&lt;p&gt;Defaut Backbone &lt;code&gt;toJSON()&lt;/code&gt; &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoItem = Backbone.Model.extend({
  toJSON: function(){
    return _.clone(this.attributes);
  }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Overridng the &lt;code&gt;toJSON()&lt;/code&gt; function like so...&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoItem = Backbone.Model.extend({
  toJSON: function(){
    var attrs = _.clone(this.attributes);
    attrs.desc = attrs.description;
    attrs = _.pick(attrs, &amp;#39;desc&amp;#39;, &amp;#39;status&amp;#39;);  //returns an object with desc &amp;amp; status properties
    return { todo: attrs };
} });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, replace Render View attributes from &lt;code&gt;toJSON()&lt;/code&gt; to &lt;code&gt;attributes&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoView = Backbone.View.extend({
  render: function(){
    this.$el.html(this.template(this.model.attributes));  // this used to be .toJSON()
    return this;
  }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Unconventional ID Attribute&lt;/h3&gt;

&lt;p&gt;Common way:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var todoItem = new TodoItem({id: 1})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Workaround:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoItem = Backbone.Model.extend({
  idAttribute: &amp;#39;_id&amp;#39;
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;2. Customizing Collections&lt;/h2&gt;

&lt;h3&gt;Review Fetching Data from the Server&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;// URL to get JSON data from
var TodoItems = Backbone.Collection.extend({
  url: &amp;#39;/todos&amp;#39;
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- tsk --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;// Populate collection from server
todoItems.fetch();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- tsk --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;// Response from server after calling `fetch()`
[
  {description: &amp;#39;Pick up milk.&amp;#39;, status: &amp;#39;incomplete&amp;#39;, id: 1},
  {description: &amp;#39;Get a car wash.&amp;#39;, status: &amp;#39;incomplete&amp;#39;, id: 2}
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Handling non-standard Response from Server&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;todoItems.fetch()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- tsk --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;//Response from Server
{
  &amp;quot;total&amp;quot;: 25, &amp;quot;per_page&amp;quot;: 10, &amp;quot;page&amp;quot;: 2,
  &amp;quot;todos&amp;quot;: [ {&amp;quot;id&amp;quot;: 1, ... }, {&amp;quot;id&amp;quot;: 2, ... } ]
}   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Common Way to parse:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoItems = Backbone.Collection.extend({
  parse: function(response){
    return response;
  }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;New Way to accommodate non-standard format:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoItems = Backbone.Collection.extend({
  parse: function(response){
    this.perPage = response.per_page;
    this.page = response.page;
    this.total = response.total; return response.todos;
  } 
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Fetching with Extra Parameters&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;todoItems.fetch({data: { page: 6 }}); // GET /todos?page=6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- tsk --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;todoItems.fetch({data: {page: todoItems.page + 1}}); // GET /todos?page=2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Review on Collection View&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodosView = Backbone.View.extend({
  initialize: function(){
    this.collection.on(&amp;#39;reset&amp;#39;, this.render, this);
  },
  render: function(){
    this.addAll();
    return this;
  },
  addAll: function(){
    this.$el.empty();
    this.collection.forEach(this.addOne);
  },
  addOne: function(todoItem){
    var todoView = new TodoView({model: todoItem});
    this.$el.append(todoView.render().el);
  }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Render the Next Link&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodosView = Backbone.View.extend({
  template: _.template(&amp;#39;&amp;lt;a href=&amp;quot;#/todos/p&amp;lt;%= page %&amp;gt;&amp;quot;&amp;gt;next page&amp;lt;/a&amp;gt;&amp;#39;),  // !!! Add this line

  initialize: function(){
    this.collection.on(&amp;#39;reset&amp;#39;, this.render, this);
  },

  render: function(){
    this.addAll();
    this.$el.append(this.template({page: this.collection.page + 1}); // !!! Add this line too
    return this;
  },
  ... 
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Review our Router&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoApp = new (Backbone.Router.extend({
  routes: {
    &amp;quot;&amp;quot;: &amp;quot;index&amp;quot;
  },
  initialize: function(){
    this.todoItems = new TodoItems();
    this.todosView = new TodosView({collection: this.todoItems});
    this.todosView.render();
    $(&amp;#39;#app&amp;#39;).append(this.todosView.el);
  },
  index: function(){
    this.todoItems.fetch();
  }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Implementing the Base Route&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoApp = new (Backbone.Router.extend({
  routes: {
    &amp;quot;todos/p:page&amp;quot;: &amp;quot;page&amp;quot;,  // !!! Add this line
      &amp;quot;&amp;quot;: &amp;quot;index&amp;quot;
  },

  page: function(page){  // !!! Add this function too
    this.todoItems.fetch({data: {page: page}});
  },

  initialize: function(){
    this.todoItems = new TodoItems();
    this.todosView = new TodosView({collection: this.todoItems});
    this.todosView.render();
    $(&amp;#39;#app&amp;#39;).append(this.todosView.el);
  },

  index: function(){
    this.todoItems.fetch();
  }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Sorting Collections&lt;/h3&gt;

&lt;p&gt;Sort by Comparator &lt;code&gt;status&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoItems = Backbone.Collection.extend({
  comparator: &amp;#39;status&amp;#39;;
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- tsk --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;todoItems.fetch(); // When this is called, the collection gets sorted by status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sort by Function&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoItems = Backbone.Collection.extend({
  comparator: function(todo1, todo2) {
    return todo1.get(&amp;#39;status&amp;#39;) &amp;lt; todo2.get(&amp;#39;status&amp;#39;)
  }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- tsk --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;// When this is called, the collection gets sorted by status in reverse order
todoItems.fetch(); 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Aggregate Values&lt;/h3&gt;

&lt;p&gt;Display amount of completed todo items&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoItems = Backbone.Collection.extend({
  completedCount: function() {
    return this.where({status: &amp;#39;complete&amp;#39;}).length;
  }
});

todoItems.completedCount(); // This returns 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;3. Real Routes&lt;/h2&gt;

&lt;h3&gt;Optional Routes&lt;/h3&gt;

&lt;p&gt;Use parentheses for optional parts like so: &lt;code&gt;(/p:page)&lt;/code&gt;.&lt;br&gt;
Optional Trailing Slash at the end of the URI can be accommodated by adding &lt;code&gt;(/)&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoRouter = new (Backbone.Router.extend({ 
  routes: {
    &amp;#39;search/:query(/p:page)(/)&amp;#39;: &amp;#39;search&amp;#39;,
  },
  search: function(query, page) {
    page = page || 0;
    console.log(query);
    console.log(page);
  } 
}));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- tsk --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;// Calling the above would yield...
TodoRouter.navigate(&amp;#39;search/milk&amp;#39;, {trigger: true});  // ==&amp;gt; &amp;quot;milk&amp;quot;, 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- tsk --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;TodoRouter.navigate(&amp;#39;search/milk/p2&amp;#39;, {trigger: true}); // ==&amp;gt; &amp;quot;milk&amp;quot;, 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- tsk --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;// For the trailing slash
TodoRouter.navigate(&amp;#39;search/milk/p2/&amp;#39;, {trigger: true}) ; // ==&amp;gt; &amp;quot;milk&amp;quot;, 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;URI with Spaces Gotcha&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;decodeURIComponent&lt;/code&gt; like so...&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoRouter = new (Backbone.Router.extend({
  routes: {
    &amp;#39;search/:query(/p:page)(/)&amp;#39;: &amp;#39;search&amp;#39;,
  },
  search: function(query, page) {
    page = page || 0;
    query = decodeURIComponent(query);
    console.log(query);
    console.log(page);
  }
}));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- tsk --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;// Encoded input ==&amp;gt; Decoded output
TodoRouter.navigate(&amp;#39;search/Hello%20World/p2&amp;#39;, {trigger: true})  // ==&amp;gt; &amp;quot;Hello World&amp;quot;, 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Regex in Routes&lt;/h3&gt;

&lt;p&gt;To handle regex, we use &lt;code&gt;Router.route&lt;/code&gt; format...&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoRouter = new (Backbone.Router.extend({
  initialize: function(){ 
    this.route(/^todos\/(\d+)$/, &amp;#39;show&amp;#39;);
  },

  show: function(id) {
    console.log(&amp;quot;id = &amp;quot; + id);
  } 
}));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;!!! Needs more data&lt;/p&gt;

&lt;h3&gt;Catch-all Routes&lt;/h3&gt;

&lt;p&gt;Alert user when no route matches&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoRouter = Backbone.Router.extend({
  routes: {
    &amp;#39;*path&amp;#39;: &amp;#39;notFound&amp;#39;
  },
  notFound: function(path) {
    alert(&amp;#39;Sorry!  There is no content here.&amp;#39;);
} });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- tsk --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;TodoRouter.navigate(&amp;#39;nothinghere&amp;#39;, {trigger: true});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;File Path Route&lt;/h3&gt;

&lt;p&gt;Accept a file path and get its parts&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoRouter = new (Backbone.Router.extend({
  routes: {
    &amp;#39;file/*path&amp;#39;: &amp;#39;file&amp;#39;
  },
    file: function(path) {
    var parts = path.split(&amp;quot;/&amp;quot;);
    console.log(parts);
  } 
}));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- tsk --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;TodoRouter.navigate(&amp;quot;file/this/is/a/file.txt&amp;quot;, {trigger: true});
// ==&amp;gt; [&amp;quot;this&amp;quot;, &amp;quot;is&amp;quot;, &amp;quot;a&amp;quot;, &amp;quot;file.txt&amp;quot;]
￼￼
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;4. Varying Views&lt;/h2&gt;

&lt;h3&gt;View Initialization Options Review&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;//Pass in the Model
var todoView = new TodoView({
  model: todoItem
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- tsk --&gt;

&lt;p&gt;//Pass in the Collection
var todoView = new TodoView({
  collection: todoItems
});&lt;/p&gt;

&lt;h3&gt;Using Existing DOM Elements as a parameter&lt;/h3&gt;

&lt;p&gt;You can use the existing &lt;code&gt;div&lt;/code&gt;  (or any element) in the DOM instead of 
having the view instance to create a new one.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;//HTML
&amp;lt;div class=&amp;quot;todo&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- tsk --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoView = Backbone.View.extend({
  template: _.template(&amp;quot;&amp;lt;%= description %&amp;gt;&amp;quot;),
  render: function(){
    this.$el.html(this.template(this.model.attributes));
    return this;
  }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- tsk --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;// !!! Take note of the `el` option
var todoView = new TodoView({model: todoItem, el: $(&amp;#39;.todo&amp;#39;)});  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- tsk --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;todoView.render(); // ==&amp;gt; &amp;lt;div class=&amp;quot;todo&amp;quot;&amp;gt;Pickup Milk.&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Custom Initialization Options&lt;/h3&gt;

&lt;p&gt;Pass in an extra option. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var todoView = new TodoView({
  model: todoItem,
  user: currentUser
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Access extra options in initialize&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoView = Backbone.View.extend({
  initialize: function(options){
    this.user = options.user;
  }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Escaping User Content&lt;/h3&gt;

&lt;p&gt;Rendering user supplied strings can lead to XSS attack.  You can use &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoView = Backbone.View.extend({
template: _.template(&amp;#39;&amp;lt;%= model.escape(&amp;quot;description&amp;quot;) %&amp;gt;&amp;#39;),
render: function(){
this.$el.html(this.template({model: this.model}));
    return this;
  }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- tsk --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var todoView = new TodoView({model: todoItem});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- tsk --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;todoItem.set(&amp;#39;description&amp;#39;, &amp;quot;&amp;lt;script src=&amp;#39;attack.js&amp;#39; /&amp;gt;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When, &lt;code&gt;todoView.render().el&lt;/code&gt; is called, this outputs:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;todoView.render().el; // ==&amp;gt; &amp;lt;div&amp;gt;&amp;amp;lt;script src=&amp;amp;#x27;attack.js&amp;amp;#x27; /&amp;amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Passing Extra Options to Event Handlers&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;￼
var TodoView = Backbone.View.extend({
  template: _.template(&amp;#39;&amp;lt;span&amp;gt;&amp;lt;%= description %&amp;gt;&amp;lt;/span&amp;gt;&amp;#39;),
  initialize: function(){
    this.model.on(&amp;#39;change:description&amp;#39;, this.change, this);
  },
  render: function(){
    this.$el.html(this.template(this.model.attributes));
  },
  change: function(model, value, options){
      this.$(&amp;#39;span&amp;#39;).html(value);
    if (options.highlight !== false){
      this.$el.effect(&amp;quot;highlight&amp;quot;, {}, 1000);
    }
  }, 

});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To make change without firing off events, pass &lt;code&gt;silent: true&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;todoItem.set({description: &amp;quot;Pickup Kids&amp;quot;}, {silent: true});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To stop specific action (e.g., highlighting), edit the function above to accommodate
an &lt;code&gt;if&lt;/code&gt; check, then pass that option&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;todoItem.set({description: &amp;quot;Pickup Kids&amp;quot;}, {highlight: false});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;View Event Cleanup&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Old Approach:&lt;/strong&gt; Using model to notify the view.  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoView = Backbone.View.extend({
  initialize: function() {
    this.model.on(&amp;#39;change&amp;#39;, this.render, this);
  }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When the view instance is removed using &lt;code&gt;todoView.remove()&lt;/code&gt;, this breaks
because Model still holds reference to the view.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;New Approach:&lt;/strong&gt; Use view to &amp;quot;listen to&amp;quot; model.  Added in Backbone 0.9.9&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoView = Backbone.View.extend({
  initialize: function() {
    this.listenTo(this.model, &amp;#39;change&amp;#39;, this.render);
  }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- tsk --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;todoView.stopListening(); // Stops all listeners for this view instance
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- tsk --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;todoView.remove(); //Automatically calls stopListening()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;5. Working with Forms&lt;/h2&gt;

&lt;h3&gt;The Plain (no Backbone) Way&lt;/h3&gt;

&lt;p&gt;Create an Ajax form for creating new Todos&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;form action=&amp;quot;/todos&amp;quot; method=&amp;quot;POST&amp;quot;&amp;gt;
    &amp;lt;input name=description value=&amp;quot;What do you need to do?&amp;quot; /&amp;gt; 
    &amp;lt;button&amp;gt;Save&amp;lt;/button&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- tsk --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;// Plain jQuery
$(&amp;#39;button&amp;#39;).click(function(e){
  e.preventDefault();
  var uri = $(&amp;#39;form&amp;#39;).attr(&amp;#39;action&amp;#39;);
  var description = $(&amp;#39;input[name=description]&amp;#39;).val();
  $.post(uri, {description: description});
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;The Backbone Way&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoItem = Backbone.Model.extend({
  urlRoot: &amp;quot;/todos&amp;quot;
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- tsk --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var todoItem = new TodoItem({description: &amp;quot;What do you need to do?&amp;quot;}); 
todoItem.save({description: &amp;#39;Pickup Kids.&amp;#39;});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Build the Form with Backbone View&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoForm = Backbone.View.extend({
  template: _.template(&amp;#39;&amp;lt;form&amp;gt;&amp;#39; +
    &amp;#39;&amp;lt;input name=description value=&amp;quot;&amp;lt;%= description %&amp;gt;&amp;quot; /&amp;gt;&amp;#39; +
    &amp;#39;&amp;lt;button&amp;gt;Save&amp;lt;/button&amp;gt;&amp;lt;/form&amp;gt;&amp;#39;),
  render: function(){
    this.$el.html(this.template(this.model.attributes));
    return this;
  } 
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- tsk --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var todoItem = new TodoItem({description: &amp;quot;What do you need to do?&amp;quot;});
var todoForm = new TodoForm({model: todoItem});
$(&amp;#39;#app&amp;#39;).html(todoForm.render().el);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This outputs:
    &lt;form&gt;&lt;input name=description value=&quot;What do you need to do?&quot; /&gt;
    &lt;button&gt;Save&lt;/button&gt;&lt;/form&gt;&lt;/p&gt;

&lt;h3&gt;Capture Button Click and Return Key to Save Model&lt;/h3&gt;

&lt;p&gt;Using &lt;code&gt;submit&lt;/code&gt; allows processing on either click or pressing enter.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoForm = Backbone.View.extend({
  template: _.template(&amp;#39;&amp;lt;form&amp;gt;&amp;#39; +
    &amp;#39;&amp;lt;input name=description value=&amp;quot;&amp;lt;%= description %&amp;gt;&amp;quot; /&amp;gt;&amp;#39; +
    &amp;#39;&amp;lt;button&amp;gt;Save&amp;lt;/button&amp;gt;&amp;lt;/form&amp;gt;&amp;#39;),
  events: {
    submit: &amp;#39;save&amp;#39;  // !!! You can also use &amp;#39;click&amp;#39; to use just &amp;#39;click&amp;#39;
  },
  save: function(e) {
    e.preventDefault();
    var newDescription = this.$(&amp;#39;input[name=description]&amp;#39;).val();
    this.model.save({description: newDescription});
  } 
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Reusing Form to Edit existing TodoItem&lt;/h3&gt;

&lt;p&gt;Get existing TodoItem from already fetched collection&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var todoItem = todoItems.get(1); 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pass in existing model&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var editTodoForm = new TodoForm({model: todoItem}); 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Replace &amp;#39;#app&amp;#39; with the HTML of the form&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$(&amp;#39;#app&amp;#39;).html(editTodoForm.render().el);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;￼&lt;/p&gt;

&lt;h3&gt;Review of our App’s Router&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;￼
var TodoApp = new (Backbone.Router.extend({
  routes: {
    &amp;quot;&amp;quot;: &amp;quot;index&amp;quot;
  },
  initialize: function(){
    this.todoItems = new TodoItems();
    this.todosView = new TodosView({collection: this.todoItems});
  },
  index: function(){
    this.todoItems.fetch();
    $(&amp;#39;#app&amp;#39;).html(this.todosView.render().el);
  }
}));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Add Route to render Edit Form&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoApp = new (Backbone.Router.extend({
  routes: {
    &amp;quot;&amp;quot;: &amp;quot;index&amp;quot;,
    &amp;quot;todos/:id/edit&amp;quot;: &amp;quot;edit&amp;quot; // !!! Add this line
  },

  initialize: function(){
    this.todoItems = new TodoItems();
    this.todosView = new TodosView({collection: this.todoItems});
  },

  index: function(){
    this.todoItems.fetch();
    $(&amp;#39;#app&amp;#39;).html(this.todosView.render().el);
  }
  ￼￼
  edit: function(id){ // !!! Add this function
    var todoForm = new TodoForm({model: this.todoItems.get(id) });
    $(&amp;#39;#app&amp;#39;).html(todoForm.render().el);
  }
}));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Add Route to render New Form&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoApp = new (Backbone.Router.extend({
  routes: {
    &amp;quot;&amp;quot;: &amp;quot;index&amp;quot;, 
    &amp;quot;todos/:id/edit&amp;quot;: &amp;quot;edit&amp;quot;,
    &amp;quot;todos/new&amp;quot;: &amp;quot;newTodo&amp;quot;
  },

  ...

  newTodo: function(){
    var todoItem = new TodoItem({description: &amp;quot;What do you have to do?&amp;quot;});
    var todoForm = new TodoForm({model: todoItem});
    $(&amp;#39;#app&amp;#39;).append(todoForm.render().el);
  },
￼￼
  edit: function(id){
    var todoForm = new TodoForm({model: this.todoItems.get(id) });
    $(&amp;#39;#app&amp;#39;).html(todoForm.render().el);
  }
}));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Get Back to the List after saving &lt;strong&gt;success&lt;/strong&gt; or &lt;strong&gt;error&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoForm = Backbone.View.extend({
  ...
  save: function(e) {
    e.preventDefault();
    var newDescription = this.$(&amp;#39;input[name=description]&amp;#39;).val(); 
    this.model.save({description: newDescription}, {
      success: function(model, response, options) {
        Backbone.history.navigate(&amp;#39;&amp;#39;, { trigger: true });
      }, 
      error: function(model, xhr, options){
        var errors = JSON.parse(xhr.responseText).errors;
        alert(&amp;#39;Oops, something went wrong with saving the TodoItem: &amp;#39; + errors);
      }
    });
  }
}); 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;6. App Organization&lt;/h2&gt;

&lt;h3&gt;Class Naming&lt;/h3&gt;

&lt;p&gt;Before, everything is placed in the Global Scope, and this provides drawbacks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Leads to naming collisions&lt;/li&gt;
&lt;li&gt;Need to put “what kind of object” it is in the name e.g. “TodoItemView”&lt;/li&gt;
&lt;li&gt;Maintainability doesn’t scale with large applications&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoItem = Backbone.Model.extend({});
var TodoItemView = Backbone.View.extend({}); 
var TodoItems = Backbone.Collection.extend({}); 
var TodoItemsView = Backbone.View.extend({});
var TodoRouter = Backbone.Router.extend({});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Use a Global Object for Namespace.  Create a single global object where everything is stored:&lt;/p&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var App = {
  Models: {},
  Views: {},
  Collections: {}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- tsk --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;App.Models.TodoItem = Backbone.Model.extend({}); 
App.Views.TodoItem = Backbone.View.extend({});
App.Collections.TodoItems = Backbone.Collection.extend({}); 
App.Views.TodoItems = Backbone.View.extend({});
App.TodoRouter = Backbone.Router.extend({});  //Store one-off objects on App
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Reference classes with the namespace&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var todoItem = new App.Models.TodoItem({...})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Handle Links Outside of Backbone Views&lt;/h3&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;ul&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/completed&amp;quot;&amp;gt;Show Completed&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/support&amp;quot;&amp;gt;Support&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Solution A: Using Plain jQuery&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$(&amp;#39;a&amp;#39;).click(function(e){
  e.preventDefault();
  Backbone.history.navigate(e.target.pathname, {trigger: true});
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Solution B: Move jQuery inside of the App Object and call &lt;code&gt;App.start()&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var App = {
Models: {}, Views: {}, Collections: {}, start: function(){
    $(&amp;#39;a&amp;#39;).click(function(e){
      e.preventDefault();
      Backbone.history.navigate(e.target.pathname, {trigger: true});
    });
    Backbone.history.start({pushState: true});
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- tsk --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$(function(){ App.start(); });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Solution C: Make the App a Backbone View, so you can use event handler instead
when a link is clicked.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var App = Backbone.View.extend({ // !!! App now is a View Class
  Models: {},
  Views: {},
  Collections: {},

  events: { // !!! Use View event to handle clicks
    &amp;#39;click a&amp;#39;: function(e){
      e.preventDefault();
      Backbone.history.navigate(e.target.pathname, {trigger: true});
    }
  },

  start: function(){
    Backbone.history.start({pushState: true});
  } 
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- tsk --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var app = new App({el: document.body}); // Using body will capture everything
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Clean-up Solution C further by creating 
instance without creating a class&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var App = new (Backbone.View.extend({  // !!! `new` here!
  ...
}))({el: document.body});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- tsk --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$(function(){ App.start(); });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;￼&lt;/p&gt;

&lt;h3&gt;Skip Links&lt;/h3&gt;

&lt;p&gt;Handle specific links by adding specificity&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;ul&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/completed&amp;quot; data-internal=&amp;quot;true&amp;quot;&amp;gt;Show Completed&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/support&amp;quot;&amp;gt;Support&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- tsk --&gt;

&lt;p&gt;Event Handler&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;...
events: {
  &amp;#39;click a[data-internal]&amp;#39;: function(e){
    e.preventDefault();
    Backbone.history.navigate(e.target.pathname, {trigger: true});
  }
}
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Build Initial HTML&lt;/h3&gt;

&lt;p&gt;Since we now have a View that encompasses the entire document body, 
if we want we can put some template code in the App view which has some of the 
initial HTML.&lt;br&gt;
￼
    var App = new (Backbone.View.extend({
      ...
      template: _.template(&amp;#39;&lt;h1&gt;ToDo List!&lt;/h1&gt;&amp;#39; + &amp;#39;&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;&amp;#39;),
      render: function(){
        this.$el.html(this.template());
      }
    }))({el: document.body});&lt;/p&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$(function(){
  App.render();
  App.start();
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This results in...&lt;/p&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;ToDo List!&amp;lt;/h1&amp;gt;
  &amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Object Initialization&lt;/h3&gt;

&lt;p&gt;Inside the &lt;code&gt;start&lt;/code&gt; method is also a good place to instantiate our collections, our views,
rendering out the views, and fetching the todo items.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var App = new (Backbone.View.extend({
  ...
  start: function(){
    var todos = new App.Collections.TodoItems();
    var todosView = new App.Views.TodoItems({collection: todos}); 
    this.$el.append(todosView.render().el);
    todos.fetch();
  } 
}))({el: document.body});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- tsk --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$(function(){ App.start(); })
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;...However, we can save an AJAX call that is used on &lt;code&gt;fetch&lt;/code&gt; in the initial load by
boostrapping the HTML data which will be called on &lt;code&gt;append&lt;/code&gt; anyways...&lt;/p&gt;

&lt;h3&gt;Bootstrap Model Data&lt;/h3&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var App = new (Backbone.View.extend({ 
  start: function(bootstrap){
    var todos = new App.Collections.TodoItems(bootstrap.todos); 
    var todosView = new App.Views.TodoItems({collection: todos});
    this.$el.append(todosView.render().el);
  }
}))({el: document.body});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Bootstrap data comes from rendered HTML page&lt;/p&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var bootstrap = {
  todos: [
    {id: 1, description: &amp;quot;Pickup Milk.&amp;quot;, status: &amp;quot;complete&amp;quot;},
    {id: 2, description: &amp;quot;Pickup Kids.&amp;quot;, status: &amp;quot;incomplete&amp;quot;},
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pass in data to start&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$(function(){ App.start(bootstrap); });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;7. Customizing Backbone&lt;/h2&gt;

&lt;h3&gt;Using Other Templates&lt;/h3&gt;

&lt;p&gt;￼Underscore template:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;_.template(&amp;quot;&amp;lt;span&amp;gt;&amp;lt;%= description %&amp;gt;&amp;lt;/span&amp;quot; +
  &amp;quot;&amp;lt;em&amp;gt;&amp;lt;%= assigned_to %&amp;gt;&amp;lt;/em&amp;gt;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;: &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Mustache.compile(&amp;quot;&amp;lt;span&amp;gt;&amp;lt;/span&amp;quot; +
  &amp;quot;&amp;lt;em&amp;gt;&amp;lt;/em&amp;gt;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;NOTE: Mustache doesn&amp;#39;t allow arbitrary js, but Underscore does.  Underscore could be strange
and verbose, and Mustache is cleaner.&lt;/p&gt;

&lt;h3&gt;Default RESTful Persistence Strategy&lt;/h3&gt;

&lt;p&gt;var todoItem = new TodoItem({id: 1}) &lt;/p&gt;

&lt;p&gt;C.R.U.D.: 
    ￼￼￼
    // Read￼
    todoItem.fetch(); // ==&amp;gt; GET /todos/1&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;// Update
todoItem.save(): // ==&amp;gt; PUT /todos/1

// Delete
todoItem.delete(); // ==&amp;gt; DELETE /todos/1

// Create
(new TodoItem({description: &amp;quot;Pickup Kids&amp;quot;})).save(); // ==&amp;gt; POST /todos
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Make Read-only Model&lt;/h3&gt;

&lt;p&gt;Override the sync function.  &lt;code&gt;method&lt;/code&gt; below is either &amp;#39;create&amp;#39;, &amp;#39;read&amp;#39;, &amp;#39;update&amp;#39;,
or &amp;#39;delete&amp;#39;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoItem = Backbone.Model.extend({
  sync: function(method, model, options){
    if (method === &amp;quot;read&amp;quot;){
      Backbone.sync(method, model, options);
    }else{
      console.error(&amp;quot;You can not &amp;quot; + method + &amp;quot; the TodoItem model&amp;quot;);
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- tsk --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;todoItem.fetch(); // This works
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- tsk --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;todoItem.save();  // ==&amp;gt; &amp;quot;You can not update the TodoItem model&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Completely Replace Persistence Strategy&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;￼
var TodoItem = Backbone.Model.extend({
  sync: function(method, model, options){
    options || (options = {});

    switch(method){
      case &amp;#39;create&amp;#39;:
        var key = &amp;quot;TodoItem-&amp;quot; + model.id;
        localStorage.setItem(key, JSON.stringify(model));
      break;

      case &amp;#39;read&amp;#39;:
        var key = &amp;quot;TodoItem-&amp;quot; + model.id;
        var result = localStorage.getItem(key);
        if (result){
          result = JSON.parse(result);
          options.success &amp;amp;&amp;amp; options.success(result);
        }else if (options.error){
          options.error(&amp;quot;Couldn&amp;#39;t find TodoItem id=&amp;quot; + model.id);
        } 
      break;


      case &amp;#39;update&amp;#39;:
      break;

      case &amp;#39;delete&amp;#39;:
      break;
} }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;
</description>
        <pubDate>Thu, 06 Nov 2014 06:00:00 -0800</pubDate>
        <link>www.anton23.com/mahblog/craft/2014/11/06/backbone-anatomy-b1/</link>
        <guid isPermaLink="true">www.anton23.com/mahblog/craft/2014/11/06/backbone-anatomy-b1/</guid>
        
        
        <category>craft</category>
        
      </item>
    
      <item>
        <title>Anatomy of Backbone A2</title>
        <description>&lt;h2&gt;5. Collections&lt;/h2&gt;

&lt;p&gt;Set of Models&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoList = Backbone.Collection.extend({
  model: TodoItem
});
var todoList = new TodoList();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add/remove/get&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;todoList.length; //# of models
todoList.add(todoItem1); // add model instance
todoList.at(0); //get model instance at index 0
todoList.get(1); // get by id
todoList.remove(todoItem1); //remove model instance
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Bulk Population&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var todos = [
  {description: &amp;#39;Pick up milk.&amp;#39;, status: &amp;#39;incomplete&amp;#39;},
  {description: &amp;#39;Get a car wash&amp;#39;, status: &amp;#39;incomplete&amp;#39;},
  {description: &amp;#39;Learn Backbone&amp;#39;, status: &amp;#39;incomplete&amp;#39;}
];
todoList.reset(todos);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Fetching Data from the Server&lt;/h3&gt;

&lt;p&gt;URL to get JSON data from&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoList = Backbone.Collection.extend({
  url: &amp;#39;/todos&amp;#39;
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Populate collection from server&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;todoList.fetch();  // =&amp;gt; GET /todos
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Collections can have Events&lt;/h3&gt;

&lt;p&gt;To listen for an event on a collection, and run an event: (works just like models)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;todoListon(&amp;#39;event-name&amp;#39;, function(){
  alert(&amp;#39;event-name happened!&amp;#39;);
});
todoList.trigger(&amp;#39;event-name&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Special Events&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;//Listen for events
todoList.on(&amp;#39;reset&amp;#39;, doThing);  

// Event Triggered on reset and fetch
todoList.fetch();
todoList.reset();

// Event triggered without notification
todoList.fetch({silent: true});
todoList.reset({silent: true});

// Remove event listener
todoList.off(&amp;#39;reset&amp;#39;, doThing);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Syntax&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;todoList.on(&amp;lt;event&amp;gt;, &amp;lt;function&amp;gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Built-in Events. 
&lt;table&gt;
  &lt;tr&gt;&lt;td&gt;add&lt;/td&gt;&lt;td&gt;When a model is added&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;removed&lt;/td&gt;&lt;td&gt;When a model is removed&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;reset&lt;/td&gt;&lt;td&gt;When reset or fetched&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;Models in collection.  Events triggered on a model in a collection will also be triggered on the collection.
&lt;table&gt;
  &lt;tr&gt;&lt;td&gt;change&lt;/td&gt;&lt;td&gt;When an attribute is modified&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;change:&amp;lt;attr&amp;gt;&lt;/td&gt;&lt;td&gt;When &amp;lt;attr&amp;gt; is modified&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;destroy&lt;/td&gt;&lt;td&gt;When a model is destroyed&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;sync&lt;/td&gt;&lt;td&gt;Whenever successfully synced&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;error&lt;/td&gt;&lt;td&gt;When model save or validation fails&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;all&lt;/td&gt;&lt;td&gt;Any triggered event&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/p&gt;

&lt;h3&gt;Iteration&lt;/h3&gt;

&lt;p&gt;Example collection&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;todoList.reset([
  {description: &amp;#39;Pick up milk.&amp;#39;, status: &amp;#39;incomplete&amp;#39;, id: 1},
  {description: &amp;#39;Get a car wash.&amp;#39;, status: &amp;#39;complete&amp;#39;, id: 2}
]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alert each model&amp;#39;s description&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;todoList.forEach(function(todoItem){
  alert(todoItem.get(&amp;#39;description&amp;#39;));
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Build an array of description&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;todoList.map(function(todoItem){
  return todoItem.get(&amp;#39;description&amp;#39;);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Filter models of some criteria&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;todoList.filter(function(todoItem){
  return todoItem.get(&amp;#39;status&amp;#39;) === &amp;quot;incomplete&amp;quot;;
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Other Iteration Functions
&lt;table&gt;
  &lt;tr&gt;&lt;td&gt;forEach&lt;/td&gt;&lt;td&gt;reduce&lt;/td&gt;&lt;td&gt;reduceRight&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;find&lt;/td&gt;&lt;td&gt;filter&lt;/td&gt;&lt;td&gt;reject&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;every&lt;/td&gt;&lt;td&gt;all&lt;/td&gt;&lt;td&gt;some&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;include&lt;/td&gt;&lt;td&gt;invoke&lt;/td&gt;&lt;td&gt;max&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;min&lt;/td&gt;&lt;td&gt;sortBy&lt;/td&gt;&lt;td&gt;groupBy&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;sortedIndex&lt;/td&gt;&lt;td&gt;shuffle&lt;/td&gt;&lt;td&gt;toArray&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;size&lt;/td&gt;&lt;td&gt;first&lt;/td&gt;&lt;td&gt;initial&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;rest&lt;/td&gt;&lt;td&gt;last&lt;/td&gt;&lt;td&gt;without&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;indexOf&lt;/td&gt;&lt;td&gt;lastIndexOf&lt;/td&gt;&lt;td&gt;isEmpty&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;chain&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://documentcloud.github.io/backbone/#Collection-Underscore-Methods&quot;&gt;Link to Functions&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;6. Collections &amp;amp; Views&lt;/h2&gt;

&lt;p&gt;Collection + View == Collection View!&lt;/p&gt;

&lt;p&gt;Review our Model View&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoView = Backbone.View.extend({
  render: function(){
    this.$el.html(this.template(this.model.toJSON()));
    return this;
  }
... });
var todoItem = new TodoItem();
var todoView = new TodoView({model: todoItem});
console.log(todoView.render().el);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Define and Render&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoListView = Backbone.View.extend({});
var todoListView = new TodoListView({collection: todoList});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;First Crack at Render&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;render: function(){
  this.collection.forEach(function(todoItem){
    var todoView = new TodoView({model: todoItem});
    this.$el.append(todoView.render().el);  // !!! `this` changes context in forEach
}); }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Use addOne (2nd Crack at Render)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;render: function(){ this.collection.forEach(this.addOne, this);  // !!! 2nd param saves context
}
addOne: function(todoItem){
  var todoView = new TodoView({model: todoItem});
  this.$el.append(todoView.render().el);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To finish off...&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var todoListView = new TodoListView({collection: todoList});
todoListView.render();
console.log(todoListView.el);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Adding new Models&lt;/h3&gt;

&lt;p&gt;Since this is a collection, you must listen to the &lt;code&gt;add&lt;/code&gt; event in the initalize function&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoListView = Backbone.View.extend({
  initialize: function(){
    this.collection.on(&amp;#39;add&amp;#39;, this.addOne, this);
},
  addOne: function(todoItem){
    var todoView = new TodoView({model: todoItem});
    this.$el.append(todoView.render().el);
  },
  render: function(){
    this.collection.forEach(this.addOne, this);
  }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- tsk --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var newTodoItem = new TodoItem({
  description: &amp;#39;Take out trash.&amp;#39;,
  status: &amp;#39;incomplete&amp;#39;
});
todoList.add(newTodoItem);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Reset Event&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoListView = Backbone.View.extend({
  initialize: function(){
    this.collection.on(&amp;#39;add&amp;#39;, this.addOne, this);
    this.collection.on(&amp;#39;reset&amp;#39;, this.addAll, this);
  },
  addOne: function(todoItem){
    var todoView = new TodoView({model: todoItem});
    this.$el.append(todoView.render().el);
  },
  addAll: function(){
    this.collection.forEach(this.addOne, this);
￼  },
  render: function(){
    this.addAll();
  }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- tsk --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var todoList = new TodoList();
var todoListView = new TodoListView({
  collection: todoList
});
todoList.fetch();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Fixing remove with custom events&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;todoList.remove(todoItem);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;TodoList Collection&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;initialize: function(){
  this.on(&amp;#39;remove&amp;#39;, this.hideModel);
},
hideModel: function(model){
  model.trigger(&amp;#39;hide&amp;#39;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;TodoItem View&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;initialize: function(){
  this.model.on(&amp;#39;hide&amp;#39;, this.remove, this);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;7. Router &amp;amp; History&lt;/h2&gt;

&lt;h3&gt;The Router&lt;/h3&gt;

&lt;p&gt;Routers map URLs to actions&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;// Index Action
var router = new Backbone.Router({
  routes: { &amp;quot;todos&amp;quot;: &amp;#39;index&amp;#39; },
  index: function(){
    ...
} });

// OR Show Action
var router = new Backbone.Router({
  routes: { &amp;quot;todos/:id&amp;quot;: &amp;#39;show&amp;#39; }
  show: function(id){ ... }
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Triggering Routes&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;router.navigate(&amp;quot;todos/1&amp;quot;, {
  trigger: true
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Backbone History&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Backbone.history.start({pushState: true});  // !!! pushState on!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- tsk --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;router.navigate(&amp;quot;todos/1&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Show Action&lt;/h3&gt;

&lt;p&gt;Define Router Class&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoRouter = Backbone.Router.extend({
  routes: { &amp;quot;todos/:id&amp;quot;: &amp;quot;show&amp;quot; },
  show: function(id){
    this.todoList.focusOnTodoItem(id);
  },
  initialize: function(options){
    this.todoList = options.todoList;
  } 
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instantiate router instance&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var todoList = new TodoList();
var TodoApp = new TodoRouter({todoList: todoList});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Index Action&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoRouter = Backbone.Router.extend({ routes: { &amp;quot;&amp;quot;: &amp;quot;index&amp;quot;,
            &amp;quot;todos/:id&amp;quot;: &amp;quot;show&amp;quot; },
  index: function(){
    this.todoList.fetch();
},
  show: function(id){
    this.todoList.focusOnTodoItem(id);
},
  initialize: function(options){
    this.todoList = options.todoList;
} });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;App Organization&lt;/h3&gt;

&lt;p&gt;Since there&amp;#39;s only one router&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoApp = new (Backbone.Router.extend({
  routes: { &amp;quot;&amp;quot;: &amp;quot;index&amp;quot;, &amp;quot;todos/:id&amp;quot;: &amp;quot;show&amp;quot; },
  initialize: function(){
    this.todoList = new TodoList();
    this.todosView = new TodoListView({collection: this.todoList});
    $(&amp;#39;#app&amp;#39;).append(this.todosView.el);
  },
  start: function(){
    Backbone.history.start({pushState: true});
  },
  index: function(){
    this.todoList.fetch();
  },
  show: function(id){
    this.todoList.focusOnTodoItem(id);
  }
}));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- tsk --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$(function(){ TodoApp.start() });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;
</description>
        <pubDate>Wed, 05 Nov 2014 06:00:01 -0800</pubDate>
        <link>www.anton23.com/mahblog/craft/2014/11/05/backbone-anatomy-a2/</link>
        <guid isPermaLink="true">www.anton23.com/mahblog/craft/2014/11/05/backbone-anatomy-a2/</guid>
        
        
        <category>craft</category>
        
      </item>
    
      <item>
        <title>Anatomy of Backbone A1</title>
        <description>&lt;h2&gt;2. Models&lt;/h2&gt;

&lt;p&gt;Generating a model class and a model instance:&lt;/p&gt;

&lt;p&gt;var TodoItem = Backbone.Model.extend({});￼
  var todoItem = new TodoItem(
    { description: &amp;#39;Pick up milk&amp;#39;, status: &amp;#39;incomplete&amp;#39;, id: 1 }
  );&lt;/p&gt;

&lt;p&gt;To get, set, and save an attribute&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;todoItem.get(&amp;#39;description&amp;#39;); 
todoItem.set({status: &amp;#39;complete&amp;#39;}); 
todoItem.save();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Fetching Data from The Server&lt;/h3&gt;

&lt;p&gt;URL to get JSON data for model. RESTful web service flavor.  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoItem = Backbone.Model.extend({urlRoot: &amp;#39;/todos&amp;#39; });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To populate model from server.  Fetch todo with id=1.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var todoItem = new TodoItem({id: 1})
todoItem.fetch();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Destroying a todo:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;todoItem.get(&amp;#39;id&amp;#39;);
todoItem.destroy();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Creating Default Values&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoItem = Backbone.Model.extend({
  defaults: {
    description: &amp;#39;Empty todo...&amp;#39;,
    status: &amp;#39;incomplete&amp;#39;
  }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Models can have Events&lt;/h3&gt;

&lt;p&gt;To listen for an event on a model, and run the event:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;todoItem.on(&amp;#39;event-name&amp;#39;, function() {
  alert(&amp;#39;event-name happened!&amp;#39;);
});
todoItem.trigger(&amp;#39;event-name&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Special Events&lt;/h3&gt;

&lt;p&gt;Syntax&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;todoItem.on(&amp;lt;event&amp;gt;, &amp;lt;method&amp;gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To listen for changes,  to see how it&amp;#39;s triggered on change, to set without triggering, and to remove listener:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;todoItem.on(&amp;#39;change&amp;#39;, doThing);
todoItem.set({description: &amp;#39;Fill prescription.&amp;#39;});
todoItem.set({description: &amp;#39;Fill prescription.&amp;#39;}, {silent: true});
todoItem.off(&amp;#39;change&amp;#39;, doThing);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Built-in Events&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;&lt;td&gt;change&lt;/td&gt;&lt;td&gt;When an attribute is modified&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;change:&amp;lt;attr&amp;gt;&lt;/td&gt;&lt;td&gt;When &amp;lt;attr&amp;gt; is modified&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;destroy&lt;/td&gt;&lt;td&gt;When a model is destroyed&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;sync&lt;/td&gt;&lt;td&gt;Whenever successfully synced&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;error&lt;/td&gt;&lt;td&gt;When model save or validation fails&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;all&lt;/td&gt;&lt;td&gt;Any triggered event&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;h2&gt;3. Views&lt;/h2&gt;

&lt;p&gt;Create a view class and a view instance&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoView = Backbone.View.extend({});￼
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;￼   var todoView = new TodoView({ model: todoItem });&lt;/p&gt;

&lt;p&gt;Rendering the view.  Every view has a top level &lt;code&gt;el&lt;/code&gt; (element) where &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; is the default tag.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoView = Backbone.View.extend({
  render: function(){
    var html = &amp;#39;&amp;lt;h3&amp;gt;&amp;#39; + this.model.get(&amp;#39;description&amp;#39;) + &amp;#39;&amp;lt;/h3&amp;gt;&amp;#39;;
    todoView.$el.html(html);  // todoView.$el.html(html) works too, but slower.
  }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To use a different tag:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var SimpleView = Backbone.View.extend({tagName: &amp;#39;li&amp;#39;});
var simpleView = new SimpleView();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Using a Template&lt;/h3&gt;

&lt;p&gt;Underscore Library is part of Backbone&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoView = Backbone.View.extend({
  tagName: &amp;#39;article&amp;#39;,
  id: &amp;#39;todo-view&amp;#39;,
  className: &amp;#39;todo&amp;#39;,
  template: _.template(&amp;#39;&amp;lt;h3&amp;gt;&amp;lt;%= description %&amp;gt;&amp;lt;/h3&amp;gt;&amp;#39;),
￼} });


var todoView = new TodoView({ model: todoItem });
todoView.render();
console.log(todoView.el);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Other Templating Engines&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Underscore.js&lt;/li&gt;
&lt;li&gt;Mustache.js&lt;/li&gt;
&lt;li&gt;Haml-js&lt;/li&gt;
&lt;li&gt;Edo&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Adding View Events&lt;/h3&gt;

&lt;p&gt;Syntax&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;quot;&amp;lt;event&amp;gt; &amp;lt;selector&amp;gt;&amp;quot;: &amp;quot;&amp;lt;method&amp;gt;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoView = Backbone.View.extend({
  events: {
    &amp;quot;click h3&amp;quot;: &amp;quot;alertStatus&amp;quot;
  },
  alertStatus: function(e){
    alert(&amp;#39;Hey you clicked the h3!&amp;#39;);
} });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Selector is scoped to the &lt;code&gt;el&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;this.$el.delegate(&amp;#39;h3&amp;#39;, &amp;#39;click&amp;#39;, alertStatus);  //delegate is deprecated, but same idea
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Views can have many events on the &lt;code&gt;el&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var DocumentView = Backbone.View.extend({
  events: {
    &amp;quot;dblclick&amp;quot;                : &amp;quot;open&amp;quot;,
    &amp;quot;click .icon.doc&amp;quot;         : &amp;quot;select&amp;quot;,
    &amp;quot;click .show_notes&amp;quot;       : &amp;quot;toggleNotes&amp;quot;,
    &amp;quot;click .title .lock&amp;quot;      : &amp;quot;editAccessLevel&amp;quot;,
    &amp;quot;mouseover .title .date&amp;quot;  : &amp;quot;showTooltip&amp;quot;
  }, 
  ...

});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;View Event Options&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var SampleView = Backbone.View.extend({
  events: {
    &amp;quot;&amp;lt;event&amp;gt; &amp;lt;selector&amp;gt;&amp;quot;: &amp;quot;&amp;lt;method&amp;gt;&amp;quot;
  },
... });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Events: &lt;/p&gt;

&lt;p&gt;change click dblclick focus focusin
focusout hover keydown keypress load
mousedown mouseenter mouseleave mousemove mouseout
mouseover mouseup ready resize scroll
select unload&lt;/p&gt;

&lt;h2&gt;4. Models and Views&lt;/h2&gt;

&lt;p&gt;Review of model &amp;amp; view&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoView = Backbone.View.extend({
  template: _.template(&amp;#39;&amp;lt;h3&amp;gt;&amp;lt;%= description %&amp;gt;&amp;lt;/h3&amp;gt;&amp;#39;),
  render: function(){
    this.$el.html(this.template(this.model.toJSON()));
} });


var todoView = new TodoView({ model: todoItem });
todoView.render();
console.log(todoView.el);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Adding a Checkbox (that can be updated on the UI)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoView = Backbone.View.extend({ 
  template: _.template(&amp;#39;&amp;lt;h3&amp;gt;&amp;#39; +
    &amp;#39;&amp;lt;input type=checkbox &amp;#39; +
    &amp;#39;&amp;lt;% if(status === &amp;quot;complete&amp;quot;) print(&amp;quot;checked&amp;quot;) %&amp;gt;/&amp;gt;&amp;#39; +
    &amp;#39;&amp;lt;%= description %&amp;gt; &amp;lt;/h3&amp;gt;&amp;#39;),

  render: function() {
    this.$el.html(this.template(this.model.toJSON()));
  }
} });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;View events update the Model (Update model on UI event, and Refactor to separate what&amp;#39;s for the Model)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoView = Backbone.View.extend({
  events: {
    &amp;#39;change input&amp;#39;: &amp;#39;toggleStatus&amp;#39;
  },
  toggleStatus: function(){
   this.model.toggleStatus();
  }
});

var TodoItem = Backbone.Model.extend({
  toggleStatus: function(){
    if(this.get(&amp;#39;status&amp;#39;) === &amp;#39;incomplete&amp;#39;){
      this.set({&amp;#39;status&amp;#39;: &amp;#39;complete&amp;#39;});
    }else{
      this.set({&amp;#39;status&amp;#39;: &amp;#39;incomplete&amp;#39;});
￼   } 
    this.save();  // Synch changes to the server
  }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Re-render the view (Model updates change the view)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoView = Backbone.View.extend({
  events: {
    &amp;#39;change input&amp;#39;: &amp;#39;toggleStatus&amp;#39;
  },
  initialize: function(){
    this.model.on(&amp;#39;change&amp;#39;, this.render, this);
  },
  toggleStatus: function(){
   this.model.toggleStatus();
  },
  render: function(){
    this.$el.html(this.template(this.model.toJSON()));
} });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Why the 3rd argument (i.e., What is &lt;strong&gt;&lt;em&gt;this&lt;/em&gt;&lt;/strong&gt;)?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/vM1T1jh.png&quot; alt=&quot;&quot; title=&quot;&quot; &gt;
&lt;img src=&quot;http://i.imgur.com/GpBENlX.png&quot; alt=&quot;&quot; title=&quot;&quot; &gt;&lt;/p&gt;

&lt;p&gt;Remove View on model destroy&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var TodoView = Backbone.View.extend({
  initialize: function(){
    this.model.on(&amp;#39;change&amp;#39;, this.render, this);
    this.model.on(&amp;#39;destroy&amp;#39;, this.remove, this);
},
  render: function(){
   this.$el.html(this.template(this.model.toJSON()));
},
  remove: function(){
    this.$el.remove();
} });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;
</description>
        <pubDate>Tue, 04 Nov 2014 06:00:00 -0800</pubDate>
        <link>www.anton23.com/mahblog/craft/2014/11/04/backbone-anatomy-a1/</link>
        <guid isPermaLink="true">www.anton23.com/mahblog/craft/2014/11/04/backbone-anatomy-a1/</guid>
        
        
        <category>craft</category>
        
      </item>
    
      <item>
        <title>That Beauty Salon</title>
        <description>&lt;h2&gt;Lesson Learned&lt;/h2&gt;

&lt;p&gt;Always layout things clearly first.&lt;/p&gt;

&lt;hr&gt;
</description>
        <pubDate>Fri, 24 Oct 2014 07:00:00 -0700</pubDate>
        <link>www.anton23.com/mahblog/craft/2014/10/24/belle-salon/</link>
        <guid isPermaLink="true">www.anton23.com/mahblog/craft/2014/10/24/belle-salon/</guid>
        
        
        <category>craft</category>
        
      </item>
    
      <item>
        <title>Optimize Web Speed: Low Effort, Big Impact</title>
        <description>&lt;h2&gt;Pick the Low-hanging Fruits First (that have Big Impact)&lt;/h2&gt;

&lt;p&gt;I ran into &amp;quot;Doin Simple Stuff to Make Our Websites Faster.&amp;quot;  Below is the video and I&amp;#39;ve listed
the TL;DW.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Gzip.&lt;/strong&gt; Check &lt;a href=&quot;http://gzipwtf.com/&quot;&gt;http://gzipwtf.com/&lt;/a&gt; to see if your site&amp;#39;s assets was delivered with compression enabled.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Cache Stuff.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The slowest thing a website can do is go ask for a file across the internet and wait for it to arrive.&lt;/li&gt;
&lt;li&gt;The fasters HTTP request is the one not made.&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Losslessly Optimize Images.&lt;/strong&gt;  Use tools to compress images.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Codekit&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://imageoptim.com/&quot;&gt;https://imageoptim.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pnggauntlet.com/&quot;&gt;http://pnggauntlet.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Combine CSS and JS files.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you can, do sprites for images too.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;figure&gt;&lt;iframe width=&quot;480&quot; height=&quot;360&quot;  allowfullscreen=&quot;&quot; class=&quot;youtube-player&quot; src=&quot;//www.youtube.com/embed/IQKVtAMyiG0?wmode=transparent&amp;amp;amp;autoplay=0&amp;amp;amp;rel=0&amp;amp;amp;showinfo=0&amp;amp;amp;autohide=1&amp;amp;amp;color=white&amp;amp;amp;&quot; type=&quot;text/html&quot;&gt;&lt;/iframe&gt;
  &lt;figcaption&gt;2013 September Squatz (205x4)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;hr&gt;
</description>
        <pubDate>Wed, 22 Oct 2014 07:44:59 -0700</pubDate>
        <link>www.anton23.com/mahblog/craft/2014/10/22/optimize-web-speed/</link>
        <guid isPermaLink="true">www.anton23.com/mahblog/craft/2014/10/22/optimize-web-speed/</guid>
        
        
        <category>craft</category>
        
      </item>
    
  </channel>
</rss>
