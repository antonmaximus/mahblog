<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>anton</title>
    <description>A small growth today makes progression happen...</description>
    <link>www.anton23.com/</link>
    <atom:link href="www.anton23.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 06 Oct 2016 13:37:03 -0700</pubDate>
    <lastBuildDate>Thu, 06 Oct 2016 13:37:03 -0700</lastBuildDate>
    <generator>Jekyll v3.1.1</generator>
    
      <item>
        <title>Gee Dude. 3</title>
        <description>&lt;h2 id=&quot;what-worked&quot;&gt;What Worked&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;You weren’t afraid to fail in phone screens, coding challenges, and in-person interviews. You face them and fail better.&lt;/li&gt;
  &lt;li&gt;Resume gets the phone calls. Phone calls and coding challenge get you onsite. Onsite interview is how two future teammates get to know each other.&lt;/li&gt;
  &lt;li&gt;Studying over the long term.&lt;/li&gt;
  &lt;li&gt;Excitement about coding challenges.&lt;/li&gt;
  &lt;li&gt;Arriving ahead of time, and checking parking/driving instructions.&lt;/li&gt;
  &lt;li&gt;Having inquisitive questions about your future teammates.&lt;/li&gt;
  &lt;li&gt;Acknowledging and reading your teammates.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-didnt&quot;&gt;What Didn’t&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Self-expression. Find how to “express” yourself in all aspects: the way you move, talk, dress, and communicate.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;topics&quot;&gt;Topics:&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;How many H1 should be used in a page?&lt;/strong&gt; You can use as many as long as you used it in context.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is DOM?&lt;/strong&gt; The Document Object Model (DOM) is a programming interface for HTML and XML documents. The DOM provides a representation of the document as a structured group of nodes and objects that have properties and methods. Essentially, it connects web pages to scripts or programming languages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Data Types in JavaScript.&lt;/strong&gt; There are 6 &lt;em&gt;primitive&lt;/em&gt;  data types:  Null, Undefined, Boolean, Number, String, &amp;amp; Symbol, and 1 &lt;em&gt;non-primitive&lt;/em&gt; data-type  Object. Primitive means incapable of being changed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Weakly vs Strongly?&lt;/strong&gt; JavaScript is a &lt;em&gt;weakly&lt;/em&gt; programming language, but a better definition is it’s a &lt;em&gt;loosely typed&lt;/em&gt; language where you don’t have do declare a variable ahead of time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Timeout Scope.&lt;/strong&gt; Depending on where the function is defined, the function will follow its immediate scope.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How is &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; defined in JS?&lt;/strong&gt; In most cases, the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; is determined by how a function is called.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Dependency Injection?&lt;/strong&gt; Not instantiating the dependencies explicitly in the class, and, instead, declaratively expressing the dependencies in the class definition.  This enables easy replacement of the dependency concrete implementation without modifying your classes’ source code.  An example would be a Constructor Injection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Success and Error codes?&lt;/strong&gt;  Codes that indicate success are in the 2xx format. The 4xx codes are intended for cases in which the client seems to have erred, and the 5xx codes for the cases in which the server is aware that the server has erred.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is RESTful?&lt;/strong&gt;  Being RESTful means that we’re not expecting the server to know what it wants.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pros and cons of single-app vs multi-page?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Null vs Undefined?&lt;/strong&gt; They are both primitive data types inJavaScript. In general, The undefined value means a variable that has been declared but not assigned a value. The null value is a primitive value that represents the null, empty, or non-existent reference.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Margins of an inline element?&lt;/strong&gt;  Top and bottom don’t exist, while right &amp;amp; left can be modified.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Local Storage?&lt;/strong&gt; The &lt;code class=&quot;highlighter-rouge&quot;&gt;localStorage&lt;/code&gt; property allows you to access a local &lt;code class=&quot;highlighter-rouge&quot;&gt;Storage&lt;/code&gt; object. &lt;code class=&quot;highlighter-rouge&quot;&gt;localStorage&lt;/code&gt; is similar to &lt;code class=&quot;highlighter-rouge&quot;&gt;sessionStorage&lt;/code&gt;. The data stored in the former has no expiration time, while data stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;sessionStorage&lt;/code&gt; gets cleared when the browsing session ends—that is, when the browser is closed. An example of using it is &lt;code class=&quot;highlighter-rouge&quot;&gt;localStorage.setItem(&#39;myCat&#39;, &#39;Tom&#39;);&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Sort an Array. Merge sort provides good time complexity (Big O(nlogn)) and a straight-forward divide &amp;amp; conquer algorithm. Quick sort (not shown) has better time complexity in real-life application.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function mergeSort(arr, p, r) {
  
  // base case
  if(r === p) 
    return [arr[p]];
  
  let q = Math.floor((r-p)/2 + p) ; //half length
  
  let firstHalf = mergeSort(arr, p, q);
  let secondHalf = mergeSort(arr, q+1, r);
  
  let sorted = [];

  for(let j=0, k=0; j&amp;lt;firstHalf.length || k&amp;lt;secondHalf.length;) {
    if(firstHalf[j] &amp;lt; secondHalf[k] || k&amp;gt;=secondHalf.length) {
      sorted.push(firstHalf[j++]);
    } else {
      sorted.push(secondHalf[k++]);
    }
  }
  
  return sorted;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;=============&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function combineNoDups(a, b) {
  //Go through a array. Pick the shorter one.
  var shortArr;
  var longArr;
  
  if(a.length &amp;gt; b.length){
    longArr = a;
    shortArr = b;
  } else{
    longArr = b;
    shortArr = a;
  }
  
  for(let i=0; i&amp;lt;shortArr.length; i++) {
    if(longArr.indexOf(shortArr[i]) &amp;lt; 0) {
      longArr.push(shortArr[i]);
    }
  }
  
  console.log(longArr);
  
}

combineNoDups(a, b)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;=============&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;width=device-width&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Anton Accordion&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;.accordion&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;400px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Helvetica&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;border-bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;.entry&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;border-bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;.header&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#CCC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;.header&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#999&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;.content&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;40px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;accordion&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;entry&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;header&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Header#1 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;content&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; Bacon ipsum dolor amet spare ribs turkey alcatra &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;    
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;entry&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;header&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; Header#2 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;content&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; Bacon ipsum dolor amet spare ribs turkey alcatra &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;entry&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;header&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; Header#3 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;content&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; Bacon ipsum dolor amet spare ribs turkey alcatra &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;entry&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;header&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; Header#4 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;content&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; Bacon ipsum dolor amet spare ribs turkey alcatra&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt; 
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&#39;use strict&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Accordion&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;accordion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;activeEntry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;entries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;.entry&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;.header&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;actionAcc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;updateEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;activeEntry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;actionAcc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;newEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;.header&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;display&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;none&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;newEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;.content&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;display&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;block&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;activeEntry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;activeEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;.header&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;display&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;block&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;activeEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;.content&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;display&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;none&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;updateEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;accordions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;.accordion&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;accordions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Accordion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);});&lt;/span&gt;


  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;=============&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;width=device-width&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Anton Wireframe&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;#page-wrap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;800px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;#page-wrap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;err&quot;&gt;margin,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;vertical-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;box-sizing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;border-box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;white-space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nowrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;#page-wrap&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.noborder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;.left&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;232px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;margin-right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;11px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inline-block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;.main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;557px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inline-block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;#logo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;82px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;margin-bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;11px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;nav&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;49px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;margin-bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;384px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;aside&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;210px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;margin-bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;33px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;#ad&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;205px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;footer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;margin-top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;800px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;44px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;page-wrap&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;section&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;left noborder&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;logo&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;aside&amp;gt;&amp;lt;/aside&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;section&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;ad&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;section&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;main noborder&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;header&amp;gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;nav&amp;gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;main&amp;gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;footer&amp;gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;


&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Sun, 02 Oct 2016 12:00:00 -0700</pubDate>
        <link>www.anton23.com/gee-dude-3</link>
        <guid isPermaLink="true">www.anton23.com/gee-dude-3</guid>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Sort</title>
        <description>&lt;hr /&gt;
&lt;p&gt;layout: post
title:  “How I Sort”
date:   2016-09-26 14:42:59
categories: programming
—&lt;/p&gt;

&lt;p&gt;‘use strict’;&lt;/p&gt;

&lt;p&gt;// We pick out the smallest each time
function regSort(arr) { 
 function getPosition(arr) {
   var value = arr[0];
   var position = 0;
   for(var i = 0; i &amp;lt; arr.length; i++ ) {
     if (arr[i] &amp;lt; value) {
       value = arr[i];
       position = i;
     }
   }
   return position;
 }&lt;/p&gt;

&lt;p&gt;var sorted = [];
 var totalLength = arr.length;&lt;/p&gt;

&lt;p&gt;for(var i=0; i&amp;lt;totalLength; i++) {
   var x = getPosition(arr);
   sorted.push(arr[x]);
   arr.splice(x, 1);
  }
  return sorted;
}&lt;/p&gt;

&lt;p&gt;// We assume that object sorts its keys in numerical order
function hashSort(arr) {
  var x = {};
  var sorted = [];&lt;/p&gt;

&lt;p&gt;for(var i=0; i&amp;lt;arr.length; i++) {
    x[arr[i]] = x[arr[i]]  + 1 || 1;
  }&lt;/p&gt;

&lt;p&gt;for(var sub in x) {
    for(var j=0; j&amp;lt; x[sub]; j++) {
      sorted.push(Number(sub))
    }
  }&lt;/p&gt;

&lt;p&gt;return sorted;
}&lt;/p&gt;

&lt;p&gt;function insertionSort(arr) {
  for(let i=0; i&amp;lt;arr.length; i++) {
    let x = arr[i];
    let pos = 0;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// compare within sorted bounds
for(let j=i; j&amp;gt;=0; j--) {
  pos = j;
  if(x &amp;gt; arr[j-1])
    break;
}

// Then move contents
for(let k=i; k&amp;gt;pos; k--){
  arr[k] = arr[k-1];
}
arr[pos] = x; // insert into position   }   return arr; }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;function mergeSort(arr, p, r) {
  // base case
  if(r === p) 
    return [arr[p]];&lt;/p&gt;

&lt;p&gt;let q = Math.floor((r-p)/2 + p) ; //half length&lt;/p&gt;

&lt;p&gt;let firstHalf = mergeSort(arr, p, q);
  let secondHalf = mergeSort(arr, q+1, r);&lt;/p&gt;

&lt;p&gt;let sorted = [];&lt;/p&gt;

&lt;p&gt;for(let j=0, k=0; j&amp;lt;firstHalf.length || k&amp;lt;secondHalf.length;) {
    if(firstHalf[j] &amp;lt; secondHalf[k] || k&amp;gt;=secondHalf.length) {
      sorted.push(firstHalf[j++]);
    } else {
      sorted.push(secondHalf[k++]);
    }
  }&lt;/p&gt;

&lt;p&gt;return sorted;
}&lt;/p&gt;

&lt;p&gt;function mergeSort2(arr){
  //base case
  if(arr.length === 1) 
    return [arr[0]];&lt;/p&gt;

&lt;p&gt;//Divide 
  let halfLength = arr.length / 2;
  let firstPart = mergeSort(arr.slice(0, halfLength));
  let secondPart = mergeSort(arr.slice(halfLength));&lt;/p&gt;

&lt;p&gt;//Conquer
  let sorted = [];
  for(let i=0, j=0; i&amp;lt;firstPart.length || j&amp;lt;secondPart.length;) {
    if(firstPart[i]&amp;lt;secondPart[j] || j&amp;gt;=secondPart.length)
      sorted.push(firstPart[i++]);
    else 
      sorted.push(secondPart[j++]);
  }&lt;/p&gt;

&lt;p&gt;return sorted
}&lt;/p&gt;

&lt;p&gt;function quickSort(arr) {
  let p = 0;
  let r = arr.length-1;&lt;/p&gt;

&lt;p&gt;function partition(arr, p, r) {
    // base case
    if(r-p &amp;lt;= 0)
      return;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let pivot = arr[r];  
let q=p, u=p;
for(; u&amp;lt;=r; u++) {
  if(arr[u] &amp;lt;= pivot) {
    let temp = arr[q];
    arr[q++] = arr[u];
    arr[u] = temp;
  }
}

partition(arr, p, q-2); // You don&#39;t sort the pivot (q-1)
partition(arr, q, r);   }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;partition(arr, p, r);
  return arr;
}&lt;/p&gt;

&lt;p&gt;var s2 = [‘z’, “dog”, 4, 3, 1, 6, 1, ‘x’];
var s3 = [3, 7, 12, 14, 123, 7, 12, 12, 2, 6, 9, 11];
//  s3 = [13, 7,  12, 8, 11, 12, 11];
//s3 = [13, 16, 13, 14, 9, 7, 8, 12];
//s3 = [7, 8, 9, 6]
console.log(“===&amp;gt; “, quickSort(s3));&lt;/p&gt;

</description>
        <pubDate>Thu, 29 Sep 2016 00:00:00 -0700</pubDate>
        <link>www.anton23.com/sort</link>
        <guid isPermaLink="true">www.anton23.com/sort</guid>
        
        
      </item>
    
      <item>
        <title>Coing?</title>
        <description>&lt;h1 id=&quot;i-love-lance--janice&quot;&gt;I Love Lance &amp;amp; Janice&lt;/h1&gt;

&lt;p&gt;You’ve caught two of your fellow minions passing coded notes back and forth - while they’re on duty, no less! Worse, you’re pretty sure it’s not job-related - they’re both huge fans of the space soap opera “Lance &amp;amp; Janice”. You know how much Commander Lambda hates waste, so if you can prove that these minions are wasting her time passing non-job-related notes, it’ll put you that much closer to a promotion.&lt;/p&gt;

&lt;p&gt;Fortunately for you, the minions aren’t exactly advanced cryptographers. In their code, every lowercase letter [a..z] is replaced with the corresponding one in [z..a], while every other character (including uppercase letters and punctuation) is left untouched.  That is, ‘a’ becomes ‘z’, ‘b’ becomes ‘y’, ‘c’ becomes ‘x’, etc.  For instance, the word “vmxibkgrlm”, when decoded, would become “encryption”.&lt;/p&gt;

&lt;p&gt;Write a function called answer(s) which takes in a string and returns the deciphered string so you can show the commander proof that these minions are talking about “Lance &amp;amp; Janice” instead of doing their jobs.&lt;/p&gt;

&lt;h1 id=&quot;test-cases&quot;&gt;Test cases&lt;/h1&gt;

&lt;p&gt;Inputs:
    (string) s = “wrw blf hvv ozhg mrtsg’h vkrhlwv?”
Output:
    (string) “did you see last night’s episode?”&lt;/p&gt;

&lt;p&gt;Inputs:
    (string) s = “Yvzs! I xzm’g yvorvev Lzmxv olhg srh qly zg gsv xlolmb!!”
Output:
    (string) “Yeah! I can’t believe Lance lost his job at the colony!!”&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var s = &quot;wrw blf hvv ozhg mrtsg&#39;h vkrhlwv?&quot;;
var s2 = &quot;Yvzs! I xzm&#39;g yvorvev Lzmxv olhg srh qly zg gsv xlolmb!!&quot;;

var output = &quot;did you see last night&#39;s episode?&quot;;

function answer(s) {
  let tD = {}; //table decoder
  for (let i=0; i&amp;lt;26; i++) {
    let key = &#39;a&#39;.charCodeAt(0) + i;
    let value = &#39;z&#39;.charCodeAt(0) - i;
    tD[String.fromCharCode(key)] = String.fromCharCode(value);
  }
  
  let newS = &#39;&#39;;
  for(let i=0; i&amp;lt;s.length; i++) {
    let letter = s[i];
    if(letter &amp;gt;= &#39;a&#39; &amp;amp;&amp;amp; letter &amp;lt;= &#39;z&#39;) 
      newS += tD[letter];
    else 
      newS += letter;
  }
  
  return newS;
}

console.log(answer(s));
console.log(answer(s2));
//console.log(&#39;a&#39;.charCodeAt(0));


def answer(s):
    print 1
    tD = {}
    for i in range(0, 26):
        key = ord(&#39;a&#39;) + i
        value = ord(&#39;z&#39;) - i
        tD[chr(key)] = chr(value)


    newS = &#39;&#39;
    for i in range(0, len(s)):
        letter = s[i]
        if letter &amp;gt;= &#39;a&#39; and letter &amp;lt;= &#39;z&#39;:
            newS += tD[letter]
        else:
            newS += letter
    return newS

s = &quot;wrw blf hvv ozhg mrtsg&#39;h vkrhlwv?&quot;
print(answer(s))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;ion-flux-relabeling&quot;&gt;Ion Flux Relabeling&lt;/h1&gt;

&lt;p&gt;Oh no! Commander Lambda’s latest experiment to improve the efficiency of her LAMBCHOP doomsday device has backfired spectacularly. She had been improving the structure of the ion flux converter tree, but something went terribly wrong and the flux chains exploded. Some of the ion flux converters survived the explosion intact, but others had their position labels blasted off. She’s having her henchmen rebuild the ion flux converter tree by hand, but you think you can do it much more quickly - quickly enough, perhaps, to earn a promotion!&lt;/p&gt;

&lt;p&gt;Flux chains require perfect binary trees, so Lambda’s design arranged the ion flux converters to form one. To label them, she performed a post-order traversal of the tree of converters and labeled each converter with the order of that converter in the traversal, starting at 1. For example, a tree of 7 converters would look like the following:&lt;/p&gt;

&lt;p&gt;7
 3   6
1 2 4 5&lt;/p&gt;

&lt;p&gt;Write a function answer(h, q) - where h is the height of the perfect tree of converters and q is a list of positive integers representing different flux converters - which returns a list of integers p where each element in p is the label of the converter that sits on top of the respective converter in q, or -1 if there is no such converter.  For example, answer(3, [1, 4, 7]) would return the converters above the converters at indexes 1, 4, and 7 in a perfect binary tree of height 3, which is [3, 6, -1].&lt;/p&gt;

&lt;p&gt;The domain of the integer h is 1 &amp;lt;= h &amp;lt;= 30, where h = 1 represents a perfect binary tree containing only the root, h = 2 represents a perfect binary tree with the root and two leaf nodes, h = 3 represents a perfect binary tree with the root, two internal nodes and four leaf nodes (like the example above), and so forth.  The lists q and p contain at least one but no more than 10000 distinct integers, all of which will be between 1 and 2^h-1, inclusive.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def answer(h, q):
    p = [None] * len(q)
    
    def findIt(h, missingZ, stateFactor):
        max = (2**h) - 1
        maxhalf = max/2

        #base
        if missingZ == maxhalf + stateFactor:
            return max + stateFactor
        elif missingZ == maxhalf*2 + stateFactor:
            return max + stateFactor

        if missingZ &amp;lt; maxhalf+stateFactor:
            stateFactor += 0
        else:
            stateFactor += maxhalf

        return findIt(h-1, missingZ, stateFactor)


    for missingZ in q:
        cornerCase = (2**h) - 1
        if cornerCase == missingZ:
            p[q.index(cornerCase)] = -1
        else:
            p[q.index(missingZ)] = findIt(h, missingZ, 0)


    return p




h = 3
q = [7, 3, 5, 1]
print answer( h, q )


h2 = 5
q2 = [19, 14, 28, 8]
print(answer(h2, q2))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Mon, 26 Sep 2016 07:42:59 -0700</pubDate>
        <link>www.anton23.com/coding</link>
        <guid isPermaLink="true">www.anton23.com/coding</guid>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>JavaScript Objects</title>
        <description>&lt;h2 id=&quot;classes&quot;&gt;Classes&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Rabbit {
  // Constructor. Runs every time a new instance is created with `new` operator
  constructor(type) {
    this.type = type;
  }

  // Method
  render() {
    console.log(this.type);
  }
}
let whiteRabbit = new Rabbit(&#39;white&#39;);

console.log(&quot;=========&quot;)
console.log(Object.getPrototypeOf(whiteRabbit));
console.log(Object.getPrototypeOf(Rabbit));

whiteRabbit.render();
whiteRabbit.type = &#39;light&#39;;
whiteRabbit.render();

let lightRabbit = Object.create(whiteRabbit);
lightRabbit.render();


console.log(&quot;=====================&quot;)
console.log(Object.prototype.toString.call([1, 2]));
console.log(Array.prototype.toString.call([1, 2]));
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;enumerable-vs-nonenumerable-properties&quot;&gt;Enumerable vs Nonenumerable properties&lt;/h2&gt;

&lt;p&gt;All properties that we create by simply assigning to them are enumerable. The standard properties in &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.prototype&lt;/code&gt; are all nonenumerable, which is why they do not show up in such a for/in loop.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var map = {};
function storePhi(event, phi) {
  map[event] = phi;
}

storePhi(&quot;pizza&quot;, 0.069);
storePhi(&quot;touched tree&quot;, -0.081);

Object.prototype.nonsense = &quot;hi&quot;;
for (var name in map)
  console.log(name);
// → pizza
// → touched tree
// → nonsense
console.log(&quot;nonsense&quot; in map);
// → true
console.log(&quot;toString&quot; in map);
// → true

// Delete the problematic property again
delete Object.prototype.nonsense;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It is possible to define our own nonenumerable properties by using the &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.defineProperty&lt;/code&gt; function, which allows us to control the type of property we are creating.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Object.defineProperty(Object.prototype, &quot;hiddenNonsense&quot;,
                      {enumerable: false, value: &quot;hi&quot;});
for (var name in map)
  console.log(name);
// → pizza
// → touched tree
console.log(map.hiddenNonsense);
// → hi
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;But we still have the problem with the regular in operator claiming that the &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.prototype&lt;/code&gt; properties exist in our object. For that, we can use the object’s &lt;code class=&quot;highlighter-rouge&quot;&gt;hasOwnProperty&lt;/code&gt; method.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for (var name in map) {
  if (map.hasOwnProperty(name)) {
    console.log(name);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Prototype-less objects&lt;/strong&gt;.  You are allowed to pass null as the prototype to create a fresh object with no prototype.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var map = Object.create(null);
map[&quot;pizza&quot;] = 0.069;
console.log(&quot;toString&quot; in map);
// → false
console.log(&quot;pizza&quot; in map);
// → true
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;polymorphism&quot;&gt;Polymorphism&lt;/h2&gt;
&lt;hr /&gt;

</description>
        <pubDate>Tue, 12 Apr 2016 01:01:00 -0700</pubDate>
        <link>www.anton23.com/js-objects</link>
        <guid isPermaLink="true">www.anton23.com/js-objects</guid>
        
        
        <category>craft</category>
        
      </item>
    
      <item>
        <title>ES2015</title>
        <description>&lt;h2 id=&quot;let--const&quot;&gt;let &amp;amp; const&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; variables are scoped to the nearest block (i.e., blocked-scoped) and are not hoisted.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; keyword solves the issue of “registered-but-not-executed” callbacks. In the example below, &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; is shared for each iteration.
Once the event goes through on &lt;code class=&quot;highlighter-rouge&quot;&gt;click&lt;/code&gt;, the now executed callback will be using the last value of &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  function loopUsingVar(){
    var li = document.querySelectorAll(&#39;li&#39;)
    for (var i=0; i &amp;lt; li.length; i++) {
      li[i].addEventListener(&#39;click&#39;, function() {
        console.log(i, li[i]);
      })
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt; keyword creates &lt;strong&gt;read-only&lt;/strong&gt; named constants. Variables declared with &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt; must be assigned with an initial value. Behaves like &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   const MAX_USERS = 3`
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;functions&quot;&gt;Functions&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Default Parameter&lt;/strong&gt; values help move default values from the function body to the function definition.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function exampleFunction(userNames = []){
  let namesLength = userNames.length;
  console.log(namesLength);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Named Parameters&lt;/strong&gt; are used for optional settings to make it easer to understand how a function should be invoked. 
This also gets rid of the verbose boiler plate code, (e.g., &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.popular&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;= {}&lt;/code&gt; sets the default value to an empty object, and allows the parameter to be omitted during function calls.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function exampleFunction(name, {popular, expires, activeClass} = {}){
  console.log(&quot;Name: &quot;, name);
  console.log(&quot;Expires: &quot;, expires);
  console.log(&quot;Active: &quot;, activeClass);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The new &lt;strong&gt;rest parameter&lt;/strong&gt; syntax allows us to represent an indefinite number of arguments as an &lt;strong&gt;Array&lt;/strong&gt;.&lt;br /&gt;
This way, changesl to function signature are less likely to break code. This works well for a &lt;strong&gt;variadic function&lt;/strong&gt; which means it accepts individual arguments that can be multiple.&lt;/p&gt;

&lt;p&gt;Things to note: The 3 dots are part of the syntax, 
the variable is an array, and it must always go last on the function parameter.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function displayTags(targetElement, ...tags){
  let target = _findElement(targetElement);

  for(i in tags) {
    let tag  = tags[i];
    console.log(target, tag);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;strong&gt;spread operator&lt;/strong&gt; allows us to &lt;strong&gt;split an Array&lt;/strong&gt; into &lt;strong&gt;individual elements&lt;/strong&gt;.  It is used in a function invocation.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;getRequest(&#39;/topics/17/tags&#39;, function(data) {
    let tags = data.tags;
    displayTags(...tags);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Arrow functions&lt;/strong&gt; bind to the scope of where they are defined, not where they are used. This is known as &lt;strong&gt;lexical binding&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TagComponent.prototype.render = function() {
  getRequest(this.urlPath, (data) =&amp;gt; {
    let tags = data.tags;

    // &quot;this&quot; here refers to the scope outside of the `=&amp;gt;` (arrow function)
    displayTags(this.targetElement, ...tags); 
  });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;objects--strings&quot;&gt;Objects &amp;amp; Strings&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Object Initializer Shorthand.&lt;/strong&gt; We can remove duplicate variable names from object properties when those 
properties have the same name as the variables assigned to them. (i.e., from variables to object properties)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function buildUser(first, last) {
  let fullName = first + &#39; &#39; + last;

  // Old Way
  // return {first: first, last: last, fullName: fullName} 

  // ES2015 Way
  return { first, last, fullName };
}


function main() {
  let name = &#39;Sam&#39;;
  let age = 45;

  let user = { name, age };  //ES2015 Way
  console.log(user.name);
  console.log(user.age);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Object Destructuring&lt;/strong&gt;.  We can use shorthand to assign properties to local variables with the same name. (i.e., from object properties to variables)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//Old Way
let user = buildUser(&#39;Sam&#39;, &#39;Williams&#39;);
let first = user.first;
let last = user.last;
let fullName = user.fullName;

// ES2015 Way
let {first, last, fullName} = buildUser(&quot;Sam&quot;, &quot;Williams&quot;); 
console.log(first);
console.log(last);

// ES2015 Way
let {fullName} = buildUser(&quot;Katy&quot;, &quot;Perry&quot;); // if we only want fullName property destructured.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Adding a Function to an Object&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function buildUser(first, last) {
  let fullName = first + &#39; &#39; + last;

  // Old Way
  /* return {
        first: first, last: last, fullName: fullName,
        isActive: function(){return true;}
      } 
  */


  // ES2015 Way
  return { first, last, fullName,
    isActive(){ return true; } 
  };
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Template Strings.&lt;/strong&gt; Preserves white spaces.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let first = &#39;Sam&#39;;
let userName = &#39;SamSmith&#39;;

let veryLongText = `Hi ${first},

this is a very 
very

looong
text. 

Regards,
  ${userName}
`;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;strong&gt;Object.assign&lt;/strong&gt; method copies properties from one or more source objects to a target object specified as the very first argument.
In case of duplicates, the last object on the chain always prevails.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let defaults = {
  name: &#39;Sam&#39;,
  last: &#39;Williams&#39;
};

let option1 = { name: &#39;Tim&#39; };
let option2 = { screenName: &#39;misterwilliams&#39;};

let settings = Object.assign({}, defaults, option1, option2);
console.log(settings);  // Object {name: &quot;Tim&quot;, last: &quot;Williams&quot;, screenName: &quot;misterwilliams&quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;arrays&quot;&gt;Arrays&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Array Destructuring&lt;/strong&gt;.  We can use destructuring to assign multiple values from an array to local variables.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let users = [&#39;Sam&#39;, &#39;Tyler&#39;, &#39;Brook&#39;];
let [a, b, c] = users;
console.log(a, b, c); // Sam Tyler Brook 

// Values can be discarded
let [a, , b] = users;
console.log(a, b); // Sam Brook


// Combine Destructuring with Rest Parameter
let users = [&#39;Sam&#39;, &#39;Tyler&#39;, &#39;Brook&#39;];
let [first, ...rest] = users;
console.log(first, rest); // Sam [&quot;Tyler&quot;, &quot;Brook&quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;strong&gt;For…of&lt;/strong&gt; statement itereates over &lt;strong&gt;propety values&lt;/strong&gt;, and it’s a better way to loop over arrays and other &lt;strong&gt;iterable objects&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for(let name of names) {
  console.log(name);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Array.find&lt;/strong&gt; returns the first element in the array that satisfies a provided testing function.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let users = [
  {login: &quot;Sam&quot;,    admin: false},
  {login: &quot;Brook&quot;,  admin: true},
  {login: &quot;Tyler&quot;,  admin: true}
];

let admin = user.find( user =&amp;gt; {return user.admin; });
// let admin = user.find( user =&amp;gt; user.admin);  // Even shorter way

console.log(admin); // {&quot;login&quot;: &quot;Brook&quot;, &quot;admin&quot;: true}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;maps&quot;&gt;Maps&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;Map&lt;/strong&gt; object is a simple &lt;strong&gt;key/value&lt;/strong&gt; data structure. &lt;strong&gt;Any value&lt;/strong&gt; may be used as either a key or a value, and objects
are &lt;strong&gt;not converted&lt;/strong&gt; to strings.&lt;/p&gt;

&lt;p&gt;When to use Maps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When keys are unknown until runtime.  (When using predefined settings, it’s okay to use an object.)&lt;/li&gt;
  &lt;li&gt;When all keys are the same type and all values are the same type. (If values are different types, object is a better choice.)&lt;/li&gt;
  &lt;li&gt;When you need to iterate because Maps are iterable using &lt;code class=&quot;highlighter-rouge&quot;&gt;for...of&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let mapSettings = new Map();

mapSettings.set(&quot;user&quot;, &quot;Sam&quot;);
mapSettings.set(&quot;topic&quot;, &quot;ES2015&quot;);
mapSettings.set(&quot;replies&quot;, [&quot;Can&#39;t wait!&quot;, &quot;So Cool!&quot;]);

for(let [key, value] of mapSettings) {
  console.log(`${key} = ${value}`);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Weakmap&lt;/strong&gt; is a type of &lt;em&gt;Map&lt;/em&gt; where &lt;strong&gt;only objects&lt;/strong&gt; can be passed as keys.  Primitive data types – such as strings, numbers, booleans, etc. – are &lt;strong&gt;not allowed&lt;/strong&gt;.  All available methods on a &lt;em&gt;WeakMap&lt;/em&gt; require access to an &lt;strong&gt;object used as a key&lt;/strong&gt;.&lt;br /&gt;
Also, &lt;em&gt;WeakMaps&lt;/em&gt; are &lt;strong&gt;no interable.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Why use &lt;em&gt;WeakMaps&lt;/em&gt;? Because they are better with memory.  Individual entries in a &lt;em&gt;WeakMap&lt;/em&gt; can be &lt;strong&gt;garbage collected&lt;/strong&gt; 
while the &lt;em&gt;WeakMap&lt;/em&gt; still exists. &lt;em&gt;WeakMaps&lt;/em&gt; allows keys that are no longer referenced to be garbage collected.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let user = {};
let comment = {};

let mapSettings2 = new WeakMap();
mapSettings2.set(user, &quot;user&quot;);
mapSettings2.set(comment, &quot;comment&quot;);

console.log(mapSettings2.get(user));
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;sets&quot;&gt;Sets&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;Set&lt;/em&gt; object stores &lt;strong&gt;unique&lt;/strong&gt; values of any type, whether primitive values or object references.  &lt;em&gt;Set&lt;/em&gt; objects are 
iterable, which means they can be used with &lt;em&gt;for…of&lt;/em&gt; and destructuring.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let tags = new Set();
tags.add(&quot;JavaScript&quot;);
tags.add({version: &quot;2015&quot;});
tags.add(&quot;web&quot;);
tags.add(&quot;web&quot;); // This will be ignored since web is already in the Set.

for(let tag of tags) {
  console.log(tag);
}

let [a, b, c, d] = tags; //destructuring
console.log(a, b, c, d)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;strong&gt;WeakSet&lt;/strong&gt; is a type of &lt;em&gt;Set&lt;/em&gt; where &lt;strong&gt;only objects&lt;/strong&gt; are allowed to be stored.  A &lt;em&gt;WeakSet&lt;/em&gt; gives us 2 more methods
to use: &lt;code class=&quot;highlighter-rouge&quot;&gt;has&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;delete&lt;/code&gt; (both return a boolean).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let weakTags = new WeakSet();
weakTags.add(&quot;JavaScript&quot;); // TypeError: Invalid value use in weak set
weakTags.add({name: &quot;JavaScript&quot;});

let iOS = {name: &quot;iOS&quot;};
weakTags.add(iOS);

weakTags.has(iOS);
weakTags.delete(iOS);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;WeakSets&lt;/em&gt; cannot be used with &lt;em&gt;for…of&lt;/em&gt; and they offer no methods for reading valuse from it. Since we can’t read
values from a &lt;em&gt;WeakSet&lt;/em&gt;, when should we use it?  We can use &lt;em&gt;WeakSets&lt;/em&gt; to create special groups from existing objects
without mutating them.  Favoring immutable objects allow for much simpler code with no unexpected side effects.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;classes&quot;&gt;Classes&lt;/h2&gt;

&lt;p&gt;New Class Syntax.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class SponsorWidget {

  // Constructor. Runs every time a new instance is created with `new` operator
  constructor(name, description, url) {
    this.name = name;
    this.description = description;
    this.url = url;
  }

  // Method
  render() {
    let link = this._buildLink(this.url); // Use `this` to access instance variables within the class
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Currently, there are no access modifiers (e.g., private, protected), so prefixing a method with an underscore is a
popular convention that a method should not be called from the public API.&lt;/p&gt;

&lt;h2 id=&quot;class-inheritance&quot;&gt;Class Inheritance&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;extends&lt;/strong&gt; keyword is used to create a class that &lt;em&gt;inherits methods and properties&lt;/em&gt; from another class.  The &lt;strong&gt;super&lt;/strong&gt; 
method runs the constructor function from the parent class.&lt;/p&gt;

&lt;p&gt;Furthemore, The &lt;strong&gt;super object&lt;/strong&gt; can be used by a child class to invoke methods from a parent class&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Widget {
  constructor(name, description, url) {
    this.baseCSS = &quot;ste-widget&quot;;
  }

  parse(value) {
    // ...
  }
}


class SponsorWidgent extends Widget {
  constructor(name, description, url) {
    super();  // WE ALMOST ALWAYS WANT THIS TO HAPPEN! This is a method
    // ...
  }

  render(){
    let parsedName = this.parse(this.name); // `this.parse` is an inherited method
    let css = this._buildCSS(this.baseCSS); // `this.baseCSS` is an inherited property
  }

  newParse(){
    let parsedName = super.parse(this.name); // Calls the parent version of the parse() method.
    return `Sponsor: ${parsedName}`;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;modules-i&quot;&gt;Modules I&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;export&lt;/em&gt; keyword exposes the function.  The &lt;em&gt;default&lt;/em&gt; type export is the simplest way to export a function.&lt;/p&gt;

&lt;p&gt;// flash-message.js&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export default function(message) {
  alert(message);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To import modules we use the &lt;em&gt;import&lt;/em&gt; keyword, specify a new local variable to hold its content,
and use the &lt;em&gt;from&lt;/em&gt; keyword to tell the JavaScript engine where the module can be found.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;flashMessage&lt;/code&gt; variable
could have been named anything because the flash-message module is using a &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt; type export.&lt;/p&gt;

&lt;p&gt;//app.js&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import flashMessage from &#39;./flash-message&#39;;
flashMessage(&quot;Hello&quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Importing Named Exports&lt;/strong&gt; can be done by assigning the &lt;em&gt;same names&lt;/em&gt; for both export and import.&lt;/p&gt;

&lt;p&gt;// flash-message.js&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export function alertMessage(message) {
  alert(message);
}

export function logMessage(message) {
  console.log(message);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;// app.js&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { alertMessage, logMessage } from &#39;./flash-message&#39;;
alertMessage(&quot;Hello Alert&quot;);
logMessage(&quot;Hello Log&quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Importing a Module as an Object&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;// flash-message.js&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export function alertMessage(message) { alert(message);}
export function logMessage(message) { console.log(message);}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;// app.js&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import * as flash from &#39;./flash-message&#39;;
flash.alertMessage(&quot;Hello Alert&quot;);
flash.logMessage(&quot;Hello Log&quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Exporting Multiple Functions at Once&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;// flash-message.js&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function alertMessage(message) { alert(message);}
function logMessage(message) { console.log(message);}

export {alertMessage, logMessage}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;modules-ii&quot;&gt;Modules II&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Exporting Constants&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;// constants.js&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const MAX_USERS = 3;
const MAX_REPLIES = 3;

export {MAX_USERS, MAX_REPLIES}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Exporting a Class&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;// flash-message.js&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class FlashMessage {
  constructor(message){ this.message = message; }

  renderAlert(){ alert(`${this.message}` from Alert); }
  renderLog(){ console.log(`${this.message}` from Log); }
}

export { FlashMessage }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;// app.js&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import {FlashMessage} from &#39;./flash-message&#39;;

let flash = new FlashMessage(&quot;Hello&quot;);
flash.renderAlert();
flash.renderLog();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;promises&quot;&gt;Promises&lt;/h2&gt;

&lt;p&gt;Before ES2015, &lt;em&gt;continuation-passing style&lt;/em&gt; (CPS) async programming is used, wherein we tell a function how to 
continue execution by passing callbacks – which can grow to a &lt;em&gt;complicated nested code&lt;/em&gt;.  A &lt;strong&gt;Promise&lt;/strong&gt; is a new
abstraction that allows us to write async code in an easier way.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;getPollResultsFromServer(&quot;Sass vs Less&quot;)
  .then(ui.renderSidebar)
  .then(sendNotificationToServer)
  .then(doSomethingElseNonBlocking)
  .catch(function(error){
    console.log(&quot;Error: &quot;, error);
    });
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The Promise constructor function takes an anonymous function with 2 callback arguments known as handlers – responsible for &lt;em&gt;resolving&lt;/em&gt;
or &lt;em&gt;rejecting&lt;/em&gt; the Promise.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function getPollResultsFromServer(pollName){
  return new Promise(function(resolve, reject) {
    //...
    request.onload = function(){
      if(request.status &amp;gt;= 200 &amp;amp;&amp;amp; request.status &amp;lt; 400)
        resolve(request.response);
      else 
        reject(new Error(request.status));
    }
    request.onerror = function(){
      reject(new Error(&quot;Error Fetching Results&quot;));
    });
    //...
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Resolving&lt;/strong&gt; a Promise is handled by &lt;code class=&quot;highlighter-rouge&quot;&gt;then()&lt;/code&gt; functions.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;getPollResultsFromServer(&quot;Sass vs Less&quot;)
  .then(function(results){
    return results.filter((result) =&amp;gt; result.city == &quot;Orlando&quot;); // returns only those that match filter.
    })
  .then(function(resultsFromOrlando){ // The return value from the first then becomes the argument here
    ui.renderSidebar(resultsFromOrlando);
    })
  .catch(function(error){
    console.log(&quot;Error: &quot;, error);
    })
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Rejecting&lt;/strong&gt; a Promise is handled above by the &lt;code class=&quot;highlighter-rouge&quot;&gt;.catch&lt;/code&gt; function. We’ll call the &lt;em&gt;reject()&lt;/em&gt; handler for &lt;strong&gt;unsuccessful status codes&lt;/strong&gt; and also when the  &lt;em&gt;onerror&lt;/em&gt; event is triggered on our request object.  Both move the Promise to a rejected stated. Once an error occurs, execution moves immediately  to the &lt;code class=&quot;highlighter-rouge&quot;&gt;catch()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Shorthand and succinct version can be done by passing function arguments to &lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt; instead of using anonymous functions.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function filterResults(results) { //.. }

let ui  = { 
  renderSidebar(filteredResuls) { //.. }
}

getPollResultsFromServer(&quot;Sass vs Less&quot;)
  .then(filteredResults)
  .then(ui.renderSidebar)
  .catch(function(error){
    console.log(&quot;Error: &quot;, error);
    });
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;iterators&quot;&gt;Iterators&lt;/h2&gt;

&lt;p&gt;Arrays are &lt;strong&gt;iterable&lt;/strong&gt; objects, which means we can use them with &lt;code class=&quot;highlighter-rouge&quot;&gt;for...of&lt;/code&gt;.   Iterables return an &lt;strong&gt;iterator&lt;/strong&gt; object, which knows
how to access items from a collection one-at-a-time, while keeping track of its current position within the sequence.&lt;/p&gt;

&lt;p&gt;Below is an example of making a &lt;strong&gt;manual iterator&lt;/strong&gt; that iterates through an &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt; (which is non-iterable by default). 
Objects that are now iteraable can use the &lt;em&gt;spread operator&lt;/em&gt; and the &lt;em&gt;destructuring assignment&lt;/em&gt; as well.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let post = {
  title: &quot;New Festures&quot;,
  replies: 19
};

post[Symbol.iterator] = function(){
  let properties = Object.keys(this);
  let count = 0;
  let isDone = false;

  let next = () =&amp;gt; {
    if(count &amp;gt;= properties.length) {
      isDone = true;
    }
    return { done: isDone, value: this[properties[count++]] };
  }
  
  return {next};
}

post.dog = &#39;mmk&#39;;

console.log(&quot;====&quot;);
for(let p of post) { // p refers to property values
  console.log(p);
}

console.log(&quot;+++++++&quot;);
Object.getPrototypeOf(post)[&#39;cat&#39;] = &#39;meow&#39;;
//`for...in` iterates through all properties including those in prototype
for(let p in post) {  // p refers to property keys. 
  if(post.hasOwnProperty(p)) // limits to own property only
    console.log(post[p]);
}

let spreadOperated = [...post];
console.log(spreadOperated);

let [title, ,replies] = post;
console.log(title, replies);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;generators&quot;&gt;Generators&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;function *&lt;/code&gt; declaration defines &lt;em&gt;generator functions&lt;/em&gt;.  These are special functions from which we can use the &lt;em&gt;yield&lt;/em&gt; keyword
to return &lt;strong&gt;iterator&lt;/strong&gt; objects.  Generator functions return objects that provide the same &lt;em&gt;next&lt;/em&gt; method expected by &lt;code class=&quot;highlighter-rouge&quot;&gt;for...of&lt;/code&gt;,
the &lt;em&gt;spread operator&lt;/em&gt;, and the &lt;em&gt;destructuring assignment&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function *nameList() {
  yield &quot;Sam&quot;;  // {done: false, value: &quot;Sam&quot;}
  yield &quot;Tyler&quot;; // {done: false, value: &quot;Tyler&quot;}

}

for(let name of nameList()) {
  console.log( name ); // prints out Sam and Tyler in each line.
}

let spreadOperated = [...nameList()];
console.log(spreadOperated);  // [&quot;Sam&quot;, &quot;Tyler&quot;]

let [title, ,replies] = nameList();
console.log(title, replies);

let [first, second] = nameList();
console.log(first, second);  // Sam, Tyler
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Let’s replace our &lt;strong&gt;manual iterator&lt;/strong&gt; in the previous section using a &lt;strong&gt;generator function&lt;/strong&gt;.  Each time &lt;em&gt;yield&lt;/em&gt; is called, our function returns a &lt;strong&gt;new iterator&lt;/strong&gt; object adn then &lt;strong&gt;pauses&lt;/strong&gt; until it’s called again.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let post = { title: &quot;New Features&quot;, replies: 19};

post[Symbol.iterator] = function *(){
  let properties = Object.keys(this);
  for(let p of properties) {
    yield this[p];
  }
}

console.log(&quot;====&quot;);
for(let p of post) { // p refers to property values
  console.log(p);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

</description>
        <pubDate>Tue, 12 Apr 2016 01:01:00 -0700</pubDate>
        <link>www.anton23.com/ES2015</link>
        <guid isPermaLink="true">www.anton23.com/ES2015</guid>
        
        
        <category>craft</category>
        
      </item>
    
      <item>
        <title>Gee Dude. Interviewing 2</title>
        <description>&lt;p&gt;https://janechin.quora.com/The-Bullsh*t-that-is-Follow-Your-Bliss&lt;/p&gt;

&lt;hr /&gt;

</description>
        <pubDate>Fri, 01 Apr 2016 01:00:01 -0700</pubDate>
        <link>www.anton23.com/follow-your-bliss</link>
        <guid isPermaLink="true">www.anton23.com/follow-your-bliss</guid>
        
        
        <category>life</category>
        
      </item>
    
      <item>
        <title>Gee Dude. 2.</title>
        <description>&lt;h2 id=&quot;what-worked&quot;&gt;What Worked&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;You practiced courage in taking a high-stake, anxiety-inducing situation.&lt;/li&gt;
  &lt;li&gt;You studied for the short-term.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-didnt&quot;&gt;What Didn’t&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;You weren’t ready… like long-term ready.  There are things that you can review up on in the imminent term, and then there are things that could only be learned in the long-term.&lt;/li&gt;
  &lt;li&gt;Scheduled the talk a tad bit earlier than your normal functioning hours.&lt;/li&gt;
  &lt;li&gt;You didn’t effuse and laugh.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;topics&quot;&gt;Topics:&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Stacks vs. Queues&lt;/strong&gt;. For the former, a recursive function and a depth-first search are good examples of stack usage that allows you to go back a previous state. For queue usage, breadth-first search is a good approach where you go through one-level at a time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Interpreted vs. Compiled language&lt;/strong&gt;.  JavaScript is an interpreted language, not a compiled language (well, not anymore because of Google’s V8 that does compilation). A program such as C++ or Java needs to be compiled before it is run. The source code is passed through a program called a compiler, which translates it into bytecode that the machine understands and can execute. In contrast, JavaScript has no compilation step. Instead, an interpreter in the browser reads over the JavaScript code, interprets each line, and runs it. More modern browsers use a technology known as Just-In-Time (JIT) compilation, which compiles JavaScript to executable bytecode just as it is about to run. &lt;a href=&quot;http://web.stanford.edu/class/cs98si/slides/overview.html&quot;&gt;Source&lt;/a&gt;.  Futhermore, another good explanation &lt;a href=&quot;https://www.quora.com/What-is-the-difference-between-a-compiler-and-an-interpreter/answers/7670223&quot;&gt;can be found here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is a JavaScript Engine?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A JavaScript engine is a program or library which executes JavaScript code. A JavaScript engine may be a traditional interpreter, or it may utilize just-in-time compilation to bytecode in some manner. Although there are several uses for a JavaScript engine, it is most commonly used in web browsers&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What does asynchronous mean in JavaScript?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A good video on event loop and where asynchronous come into play: &lt;a href=&quot;https://www.youtube.com/watch?v=8aGhZQkoFbQ&quot;&gt;Video Here&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;JavaScript is a single-threaded programming language (i.e., one call stack, one thing at a time).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The JavaScript run-time can only do one thing at a time. The reason we can do things concurrently is because the browser is more than the just run-time.  The browser gives us these other things, like APIs, that are effectively like threads, and they are aware of this conconcurrency (12:21 in the video).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When the API is done with the asychronous call, it pushes the  callback function to the task queue.  The &lt;strong&gt;event loop&lt;/strong&gt; then does it job – that is to look at the stack and the task queue, and if the stack is empty it takes the first thing in the task queue and push it on to the stack.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What’s Lexical Scoping?&lt;/strong&gt;  In JavaScript, the scope of a variable is defined by its location within the source code (it is apparent lexically) and nested functions have access to variables declared in their outer scope.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What’s a closure?&lt;/strong&gt;  A closure is a special kind of object that combines two things: a function, and the environment in which that function was created. The environment consists of any local variables that were in-scope at the time that the closure was created.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What’s cross-site scripting?&lt;/strong&gt;  Cross-site scripting (XSS) is a type of computer security vulnerability typically found in web applications. XSS enables attackers to inject client-side scripts into web pages viewed by other users. A cross-site scripting vulnerability may be used by attackers to bypass access controls such as the same-origin policy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What’s a Hashtable&lt;/strong&gt;. A hash table (hash map) is a data structure used to implement an associative array, a structure that can map keys to values.&lt;/p&gt;

&lt;p&gt;Remove duplicates from an array using a hashtable.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &#39;use strict&#39;;

  let myArr = [&#39;apple&#39;, &#39;orange&#39;, &#39;mango&#39;, &#39;apple&#39;];

  function removeDuplicates(arr) {
    let itemInstances = {};
    for(let i = 0; i &amp;lt; arr.length; i++ ) {
      let currItem = arr[i];
      itemInstances[currItem] = itemInstances[currItem] ? 
        itemInstances[currItem] + 1 : 1;
    }
    
    console.log(itemInstances);
    
    let newArray = [];
    for (let key in itemInstances) {
      newArray.push(key);
    }
    // OR newArray = Object.keys(itemInstances);

    return newArray;
  }


  console.log(removeDuplicates(myArr));
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Compare two strings and check if first string can be rearranged as the second string.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &#39;use strict&#39;;

  function compareStrings(string1, string2) {
      if(string1.length !== string2.length) 
          return false;

      var usedLetters = []; // to keep track of instances
      
      // Count instances of letters first, so we can handle duplicates.
      for(var i=0; i&amp;lt;string1.length; i++) {
        var currLet = string1[i]; // current letter
        usedLetters[currLet] = usedLetters[currLet] ? 
          usedLetters[currLet] + 1 : 1;
      }
      
      // Compare if instances are in the second string
      for(var j=0; j&amp;lt;string2.length; j++) {
        var currLet = string2[j];
        var instances = usedLetters[currLet];
        
        if (instances &amp;gt;= 1)
          usedLetters[currLet] -= 1;
        else 
          return false;
      }
      
      return true;
  }


  console.log(compareStrings(&#39;abca&#39;, &#39;abec&#39;));
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;When is an Array Used instead of Linked List? Vice Versa?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Arrays: The size of the arrays is fixed (in most languages).  Inserting a new element in an array of elements is expensive, because room has to be created for the new elements and to create room existing elements have to be shifted.  Arrays allows for better access performance which is O(1);&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Linked List: The size is dynamic and allows for ease in insertion/deletion. A drawback of Linked List is it does not allow for random access and search has to be done sequentially.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;How to persist data between page loads?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Web Storage.&lt;/strong&gt; With the introduction of HTML5 we also got Web Storage, which allows you to save information in the browser across page loads. There is &lt;code class=&quot;highlighter-rouge&quot;&gt;localStorage&lt;/code&gt; which can save data for a longer period (as long as the user doesn’t manually clear it) and &lt;code class=&quot;highlighter-rouge&quot;&gt;sessionStorage&lt;/code&gt; which saves data only during your current browsing session.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Cookies.&lt;/strong&gt; An alternative to Web Storage is saving the data in a cookie. Cookies are mainly made to read data server-side, but can be used for purely client-side data as well.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;window.name.&lt;/strong&gt; Although this seems like a hack that probably originated from before &lt;code class=&quot;highlighter-rouge&quot;&gt;localStorage&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;sessionStorage&lt;/code&gt;, you could store information in the &lt;code class=&quot;highlighter-rouge&quot;&gt;window.name&lt;/code&gt; property: &lt;code class=&quot;highlighter-rouge&quot;&gt;window.name = &quot;my value&quot;&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Query string.&lt;/strong&gt;  When submitting a form using the GET method, the url gets updated with a query string (?parameter=value&amp;amp;something=42). You can utilize this by setting an input field in the form to a certain value.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;s&gt;Compare @Autowired vs @Resource&lt;/s&gt;

&lt;p&gt;Closure Example&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function Counter() {
    var count = 0;
    
    return function(){
      return ++count;
    }
}

var myCounter = Counter();
console.log(myCounter()); // outputs &quot;1&quot;
console.log(myCounter()); // outputs &quot;2&quot;

var myCounter2 = Counter();
console.log(myCounter2()); // outputs &quot;1&quot;
console.log(myCounter()); // outputs &quot;3&quot;
console.log(myCounter2()); // outputs &quot;2&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Another Closure Example&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function retainVal(i) {
  setTimeout(function () {
      console.log(i)
    }, 1);
}

for (var i = 0; i &amp;lt; 5; i++) {
  var a = retainVal(i)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Create a Power Function (i.e., base&lt;sup&gt;exponent&lt;/sup&gt;)&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function power(base, exponent) {
    let result = 1;
    for(let i=0; i&amp;lt;exponent; i++) {
        result = result * base;
    }
    return result; 
}

function powerTwiceTheSpeed(base, exponent) {
    let result = 1;
    let newExponent = Math.floor(exponent/2);
    
    for(let i=0; i&amp;lt;newExponent; i++) {
        result = result * base;
    }
    
    result = result * result;

    // If the exponent was an odd number
    result = (exponent % 2 == 1) ? result * base : result;
    
    return result;
}

function powerRecursive(base, exponent) {
    if(exponent === 0) {
        return 1;
    } else if (exponent === 1) {
        return base;
    }
    
    let newExponent = Math.floor(exponent/2);
    
    let result = recursivePower(base, newExponent);
    result = result * result;
    
    // If the exponent was an odd number
    result = (exponent % 2 == 1) ? result * base : result;
    
    return result;
}


//Call Function
powerRecursive(2, 4);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;How to find minimum value in a rotated sorted array?
Actual array - [1,2,3,4,6,7,8,9,10]
Ex Input :- [6,7,8,9,10,1,2,3,4]
Output - 1&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function getMin(array) {

  if(array.length === 2) {
    return (array[0] &amp;lt; array[1]) ? array[0] : array[1];
  } else if(array.length === 1) {
    return array[0];
  } else if (array[0] &amp;lt; array[array.length - 1]) { //Special Case
    return array[0];
  }
  
 let r = Math.floor(array.length/2);
  

  if(array[0] &amp;gt; array[r]) {
    return getMin(array.slice(0, r+1));
  } else {
    return getMin(array.slice(r+1));
  }
}

console.log(&#39;====&#39;);
var y = [7, 8, 9, 10, 1, 2, 3];
console.log(getMin(y));
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Tue, 15 Mar 2016 12:00:00 -0700</pubDate>
        <link>www.anton23.com/gee-dude-2</link>
        <guid isPermaLink="true">www.anton23.com/gee-dude-2</guid>
        
        
        <category>craft</category>
        
      </item>
    
      <item>
        <title>Beginning Gulp</title>
        <description>&lt;h2 id=&quot;what-worked&quot;&gt;What Worked&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;You practiced courage in taking a high-stake, anxiety-inducing situation.&lt;/li&gt;
  &lt;li&gt;You studied for the short-term.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-didnt&quot;&gt;What Didn’t&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;You weren’t ready… like long-term ready.  There are things that you can review up on in the imminent term, and then there are things that could only be learned in the long-term.&lt;/li&gt;
  &lt;li&gt;Scheduled the talk a tad bit earlier than your normal functioning hours.&lt;/li&gt;
  &lt;li&gt;You didn’t effuse and laugh.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;always&quot;&gt;Always:&lt;/h2&gt;

&lt;h3 id=&quot;before&quot;&gt;Before&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Get Interview Itinerary – This should include:
    &lt;ul&gt;
      &lt;li&gt;People whom you’ll be talking to and their background.&lt;/li&gt;
      &lt;li&gt;Duration of each interview&lt;/li&gt;
      &lt;li&gt;Type of interview (e.g., technical, group, one-on-one)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Have questions ready&lt;/li&gt;
  &lt;li&gt;Preparation is key, so read up
    &lt;ul&gt;
      &lt;li&gt;Industry the team is in.&lt;/li&gt;
      &lt;li&gt;Key people.&lt;/li&gt;
      &lt;li&gt;The team’s previous products.&lt;/li&gt;
      &lt;li&gt;Be very wary of interviews with less than 2 days notice – not enought time to prepare&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;during&quot;&gt;During&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Be Grounded – &lt;em&gt;To me, being grounded means being fully present: physically, emotionally and energetically. It means your mind is not wandering or pulling your energy elsewhere. Your heart and soul are not searching somewhere in the past or looking into the future. (Take a deep breath … there, you’re grounded!)&lt;/em&gt;
    &lt;ul&gt;
      &lt;li&gt;Breathe and listen to yourself.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Be calm and composed  – You want the other party to be composed? You should start it.&lt;/li&gt;
  &lt;li&gt;Interact, Connect, and Improv – with anyone and everyone.
    &lt;ul&gt;
      &lt;li&gt;Ask your favorite question at each interview (even if it’s repetitive to you, each
person will have a different take on it).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Improv rule: Avoid being funny.  Humor comes naturally and we want clever lines.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;after&quot;&gt;After&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Expect that they’re also interviewing other people – This means you’re not that 
special.  And that even if you did really well to the best of your ability, they’d 
still go with someone who’s done it better than you did (so it may not be all you after all).&lt;/li&gt;
  &lt;li&gt;There will be a waiting game.  Don’t play it by focusing on more important items on your to-do list.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
</description>
        <pubDate>Tue, 15 Mar 2016 12:00:00 -0700</pubDate>
        <link>www.anton23.com/gulp2</link>
        <guid isPermaLink="true">www.anton23.com/gulp2</guid>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>Beginning Gulp</title>
        <description>&lt;p&gt;Installing Gulp is as eas as 1, 2, 3…&lt;/p&gt;

&lt;h3 id=&quot;install-gulp-globally&quot;&gt;1. Install Gulp Globally&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo npm install gulp -g&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;install-gulp-to-the-local-project&quot;&gt;2. Install Gulp to the local project&lt;/h3&gt;

&lt;p&gt;a. Have a &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;   by typing &lt;code class=&quot;highlighter-rouge&quot;&gt;npm init&lt;/code&gt; or creating it manually.&lt;/p&gt;

&lt;p&gt;b.  &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install --save-dev gulp&lt;/code&gt;  – to install Gulp into the project locally.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;--save-dev&lt;/code&gt; keyword tells the computer to add &lt;code class=&quot;highlighter-rouge&quot;&gt;gulp&lt;/code&gt; as a dev dependency in &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;create-a-gulpfilejs-file-and-write-your-gulp-tasks&quot;&gt;3. Create a &lt;code class=&quot;highlighter-rouge&quot;&gt;gulpfile.js&lt;/code&gt; file and write your Gulp Tasks!&lt;/h3&gt;

&lt;p&gt;The first step to using Gulp is to &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; it in the gulpfile.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var gulp = require(&#39;gulp&#39;); 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The require statement tells Node to look into the &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; folder for a package named &lt;code class=&quot;highlighter-rouge&quot;&gt;gulp&lt;/code&gt;. Once the package is found, we assign its contents to the variable &lt;code class=&quot;highlighter-rouge&quot;&gt;gulp&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can now begin to write a gulp task with this &lt;code class=&quot;highlighter-rouge&quot;&gt;gulp&lt;/code&gt; variable. The basic syntax of a gulp task is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gulp.task(&#39;hello&#39;, function() {
  console.log(&#39;Hello Zell&#39;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can run this task with &lt;code class=&quot;highlighter-rouge&quot;&gt;gulp hello&lt;/code&gt; in the command line.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gulp hello
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;installing-other-plug-ins-to-your-project&quot;&gt;Installing other plug-ins to your project…&lt;/h4&gt;

&lt;p&gt;We can compile Sass to CSS in Gulp with the help of a plugin called &lt;code class=&quot;highlighter-rouge&quot;&gt;gulp-sass&lt;/code&gt;.  We install it by using &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt;.  We’d also want to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;--save-dev&lt;/code&gt; flag to ensure that gulp-sass gets added to &lt;code class=&quot;highlighter-rouge&quot;&gt;devDependencies&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm install gulp-sass --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;
</description>
        <pubDate>Tue, 08 Mar 2016 11:00:00 -0800</pubDate>
        <link>www.anton23.com/gulp</link>
        <guid isPermaLink="true">www.anton23.com/gulp</guid>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>Convo Mastery</title>
        <description>&lt;p&gt;How do you take a conversation from 1 minute to 10 minutes? From them feeling ‘I like that person’ to the point ‘I’m willing to help that person’?  When you’ve actually made a serious connection?&lt;/p&gt;

&lt;p&gt;Two Parts to having an awesome connection&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;A jovial, light-hearted, funny, silly conversation&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Relating to people a bit more about your values.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Three mindsets that cover the 2 parts above:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Spread conversational ammo – gives the other person many options to relate to. It builds the world.  Provide specifics.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Just say it out.  Don’t discriminate about the ammo you put out there.  – filtering leads to internal discomfort. You don’t need to have a master plan.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Activate your body – Identify your emotions and consciously show it through voice, body, etc.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Forward-staggered stance to open up people in their personal spaces – it’s like avoiding blocking on theatre stage.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Make a habit of using emotions &amp;amp; body language to talk to people.  Smile. Show your emotions.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Experiment ona big body expression each week. Gesticulate!&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The best conversationalists don’t know where they’re going all the time, but they seem to find their way in genious ways because they put so much out there.&lt;/p&gt;

</description>
        <pubDate>Sun, 28 Feb 2016 08:40:03 -0800</pubDate>
        <link>www.anton23.com/kickass1</link>
        <guid isPermaLink="true">www.anton23.com/kickass1</guid>
        
        
        <category>kickass</category>
        
      </item>
    
  </channel>
</rss>
