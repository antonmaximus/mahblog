<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>anton</title>
    <description>A small growth today makes progression happen...</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 01 Jan 2017 13:02:10 -0800</pubDate>
    <lastBuildDate>Sun, 01 Jan 2017 13:02:10 -0800</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>Cholesterol</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/cholesterol.jpg&quot; style=&quot;display: block; margin: auto;&quot; width=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cholesterol is not the bad guy!  You got the wrong guy!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Cholesterol is a waxy, charming lipid gracing every cell’s membrane and our blood plasma. Its jobs, which are many, include insulating neurons, building and maintaining cellular membranes, metabolizing fat soluble vitamins, producing bile, and kick-starting the body’s synthesis of many hormones, including the sex hormones. Cool stuff actually.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Given all the work cholesterol has to do, the liver is careful to ensure the body always has enough, producing some 1000-1400 milligrams of it each day. In comparison, the 300 milligram recommended limit for dietary cholesterol (your tax dollars at work in the USDA) is a drop in the bucket. And get this: our livers come with feedback mechanisms (at no additional cost) that regulate cholesterol production in response to our dietary intake. When we eat more, it makes less, and vice-versa. Imagine that!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;I’ve said it before, and I’ll say it again. Sound and reliable medical research hasn’t proven that lowering (or low) cholesterol in and of itself reduces risk of death from heart disease across a population. Yes, there is always that single isolated guy who throws off the curve, but he (or she) is a statistical anomaly and doesn’t negate the legitimacy of the model. For instance, the Japanese people of Okinawa are among the healthiest in the world. Their heart disease rate is extremely low, but they tend to have “elevated” cholesterol levels.&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;The fact is, half of all first time heart attack sufferers have a perfectly “normal” cholesterol profile. What does this tell you? There must be some other piece here behind the “other half” and, I would solidly argue, behind the first half. Cholesterol is a red herring.&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;It all boils down to inflammation.&lt;/strong&gt; Inflammation is the number one factor in heart disease. This is an accepted fact now, but it still gets little attention and no real prevention or treatment. Think about it: you have your cholesterol levels checked every five years or more if your profile is “problematic.” When do you have biomarkers for inflammation checked? Unless you’ve had a heart attack or been diagnosed with a serious medical condition, probably never.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;What is it caused by? Not fat, but carbohydrates. Yes, sugars and processed carbs are highest on the list of perpetrators here, but grains and starches as a whole contribute to the problem. LDL rises directly not with the amount of saturated fat you eat but with rising levels of inflammation caused by carbs and trans fats.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Oxidation.&lt;/strong&gt; Furthermore, nearly every study suggests that LDL is only a true threat when it’s oxidized. What oxidizes it? Free radicals. We’re talking trans fats primarily, that beast of an additive found in countless food products (as opposed to foods). What counteracts free radicals (because we all naturally have some in us)? Anti-oxidants: veggies and fruits, of course, as well as nuts, olive oil, etc. Consider also a broad-based multi-antioxidant supplement containing those nutrients shown to decrease oxidation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;http://www.marksdailyapple.com/cholesterol/&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 31 Dec 2016 17:02:03 -0800</pubDate>
        <link>http://localhost:4000/cholesterol</link>
        <guid isPermaLink="true">http://localhost:4000/cholesterol</guid>
        
        
        <category>Nutrition</category>
        
      </item>
    
      <item>
        <title>Be Honest With Yourself</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/pinocchio.jpg&quot; style=&quot;display: block; margin: auto;&quot; width=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The worst situations that I’ve been in were the times when I was not honest with myself.
Simply put: I betrayed myself.&lt;/p&gt;

&lt;p&gt;One of the biggest betrayals I did to myself was when I hung out with a person I had 
zero romantic interest with. I was interested in their friend, which turned out to be a
fake persona. I was catfish’ed. I hung out with the person for 11 days in hopes of seeing 
the  “friend” that has suddenly become unavailable because of family issues.&lt;/p&gt;

&lt;p&gt;Had I been true to myself, I would have not compromised my values. I would not hang out
with someone who had romantic interest in me that I could not return even if it means there 
was a promise of “introduction with the other person I was interested with.” If I was honest
with myself, I would 
have reached out to the person of interest myself  one-on-one, no strings attached – even
if it means getting rejected.
In the end, I paid the 
ultimate price: time, money, and heartache. I spent countless hours, days, and months chatting up 
two fake people. I spent money traveling only to find out they’re suddenly unavailable. 
And I fell in love with a non-existent person, and had to pick myself back up.&lt;/p&gt;

&lt;p&gt;&lt;del&gt;Another betrayal I did was when I forced myself to remain in the tech industry for my career. I wanted
to stay in the tech industry doing front-end web development. For starters, being a front-end
developer was already a compromise of not  wanting to be a hardcore programmer while 
benefitting from tech industry incentives. Anyway, after getting laid off, I really did not want to 
be a developer anymore. 
I felt I was killing myself inside even before I got laid off. But since it was the only thing
I knew how to do, it was the only thing I could be considered for. Hence, I sought out
front-end developer jobs. I should have looked inwards and should have been honest with myself 
on what I really wanted to do.&lt;/del&gt; Well, this is not betrayal. This is part of the process 
of finding the right track. You try various paths and see if it feels right for you. Though,
you were not honest with yourself when you interviewed for positions you were not 
excited about.&lt;/p&gt;

&lt;p&gt;I also made another compromise with myself to do product management. 
I guess I was trying to make a compromise of staying within the 
tech industry and reap its benefits while not doing programming work. Now that I think of it,
I may have not been fully honest with myself. I did like product management for its 
leadership opportunities while being technical still. Though, was it intellectually stimulating
enough for me?  I am someone that needs the intellectual challenge, physical challenge, and leadership challenge.&lt;/p&gt;

&lt;p&gt;The best decisions I’ve ever made were the times I was honest with myself. After geting laid off
for the first time, I knew I wanted to leave the Bay Area. My gut feeling and my weather analysis were in unison.
I went to Los Angeles without anything lined up and it was tough moving into a new city without knowing
anyone for support. I managed to stay the course and eventually settle after a few months
because I was true to myself.&lt;/p&gt;

&lt;p&gt;Applying to jobs?  Be honest with yourself and see if the company (heh) is something you’d
like to be part of.  If you don’t want their company, don’t force yourself to be part of it.
Listen to you gut.&lt;/p&gt;

&lt;p&gt;Considering hanging out with someone for romance? Be honest with yourself and ensure there are no
strings attached or any sort of compromises.&lt;/p&gt;

</description>
        <pubDate>Sat, 31 Dec 2016 17:01:01 -0800</pubDate>
        <link>http://localhost:4000/be-honest-with-yourself</link>
        <guid isPermaLink="true">http://localhost:4000/be-honest-with-yourself</guid>
        
        
        <category>Life</category>
        
      </item>
    
      <item>
        <title>Keep It  Lean</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/lean.jpg&quot; style=&quot;display: block; margin: auto;&quot; width=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Truths:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;You’re more likely to eat healthy if you only purchase healthy items at grocery stores.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You’re more likely to see results from your workout if you focus on the major lifts.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You’re more likely to do productive work when the phone is off.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Pareto Rule: roughly 80% of the effects come from 20% of the causes. Figure out the 20% causes
that matters to you because they will effect 80% of your life.&lt;/p&gt;

&lt;p&gt;Time is the most important asset. Amplifying the 20% that matters (and muting the rest)
will effect the 80% for a wholesome life.&lt;/p&gt;

&lt;p&gt;There’s too many junk food at the grocery store. There’s too many junk apps at the app store. 
Focus on the 20%.&lt;/p&gt;

&lt;p&gt;Keep. It. &lt;del&gt;Simple&lt;/del&gt; Lean. Stupid.&lt;/p&gt;

</description>
        <pubDate>Fri, 30 Dec 2016 06:42:59 -0800</pubDate>
        <link>http://localhost:4000/keep-it-lean</link>
        <guid isPermaLink="true">http://localhost:4000/keep-it-lean</guid>
        
        
        <category>Life</category>
        
      </item>
    
      <item>
        <title>Gee Dude. 3</title>
        <description>&lt;h2 id=&quot;what-worked&quot;&gt;What Worked&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;You weren’t afraid to fail in phone screens, coding challenges, and in-person interviews. You face them and fail better.&lt;/li&gt;
  &lt;li&gt;Resume gets the phone calls. Phone calls and coding challenge get you onsite. Onsite interview is how two future teammates get to know each other.&lt;/li&gt;
  &lt;li&gt;Studying over the long term.&lt;/li&gt;
  &lt;li&gt;Excitement about coding challenges.&lt;/li&gt;
  &lt;li&gt;Arriving ahead of time, and checking parking/driving instructions.&lt;/li&gt;
  &lt;li&gt;Having inquisitive questions about your future teammates.&lt;/li&gt;
  &lt;li&gt;Acknowledging and reading your teammates.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-didnt&quot;&gt;What Didn’t&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Self-expression. Find how to “express” yourself in all aspects: the way you move, talk, dress, and communicate.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;topics&quot;&gt;Topics:&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;How many H1 should be used in a page?&lt;/strong&gt; You can use as many as long as you used it in context.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is DOM?&lt;/strong&gt; The Document Object Model (DOM) is a programming interface for HTML and XML documents. The DOM provides a representation of the document as a structured group of nodes and objects that have properties and methods. Essentially, it connects web pages to scripts or programming languages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Data Types in JavaScript.&lt;/strong&gt; There are 6 &lt;em&gt;primitive&lt;/em&gt;  data types:  Null, Undefined, Boolean, Number, String, &amp;amp; Symbol, and 1 &lt;em&gt;non-primitive&lt;/em&gt; data-type  Object. Primitive means incapable of being changed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Weakly vs Strongly?&lt;/strong&gt; JavaScript is a &lt;em&gt;weakly&lt;/em&gt; programming language, but a better definition is it’s a &lt;em&gt;loosely typed&lt;/em&gt; language where you don’t have do declare a variable ahead of time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Timeout Scope.&lt;/strong&gt; Depending on where the function is defined, the function will follow its immediate scope.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How is &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; defined in JS?&lt;/strong&gt; In most cases, the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; is determined by how a function is called.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Dependency Injection?&lt;/strong&gt; Not instantiating the dependencies explicitly in the class, and, instead, declaratively expressing the dependencies in the class definition.  This enables easy replacement of the dependency concrete implementation without modifying your classes’ source code.  An example would be a Constructor Injection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Success and Error codes?&lt;/strong&gt;  Codes that indicate success are in the 2xx format. The 4xx codes are intended for cases in which the client seems to have erred, and the 5xx codes for the cases in which the server is aware that the server has erred.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is RESTful?&lt;/strong&gt;  Being RESTful means that we’re not expecting the server to know what it wants.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pros and cons of single-app vs multi-page?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Null vs Undefined?&lt;/strong&gt; They are both primitive data types inJavaScript. In general, The undefined value means a variable that has been declared but not assigned a value. The null value is a primitive value that represents the null, empty, or non-existent reference.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Margins of an inline element?&lt;/strong&gt;  Top and bottom don’t exist, while right &amp;amp; left can be modified.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Local Storage?&lt;/strong&gt; The &lt;code class=&quot;highlighter-rouge&quot;&gt;localStorage&lt;/code&gt; property allows you to access a local &lt;code class=&quot;highlighter-rouge&quot;&gt;Storage&lt;/code&gt; object. &lt;code class=&quot;highlighter-rouge&quot;&gt;localStorage&lt;/code&gt; is similar to &lt;code class=&quot;highlighter-rouge&quot;&gt;sessionStorage&lt;/code&gt;. The data stored in the former has no expiration time, while data stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;sessionStorage&lt;/code&gt; gets cleared when the browsing session ends—that is, when the browser is closed. An example of using it is &lt;code class=&quot;highlighter-rouge&quot;&gt;localStorage.setItem('myCat', 'Tom');&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Sort an Array. Merge sort provides good time complexity (Big O(nlogn)) and a straight-forward divide &amp;amp; conquer algorithm. Quick sort (not shown) has better time complexity in real-life application.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function mergeSort(arr, p, r) {
  
  // base case
  if(r === p) 
    return [arr[p]];
  
  let q = Math.floor((r-p)/2 + p) ; //half length
  
  let firstHalf = mergeSort(arr, p, q);
  let secondHalf = mergeSort(arr, q+1, r);
  
  let sorted = [];

  for(let j=0, k=0; j&amp;lt;firstHalf.length || k&amp;lt;secondHalf.length;) {
    if(firstHalf[j] &amp;lt; secondHalf[k] || k&amp;gt;=secondHalf.length) {
      sorted.push(firstHalf[j++]);
    } else {
      sorted.push(secondHalf[k++]);
    }
  }
  
  return sorted;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;=============&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function combineNoDups(a, b) {
  //Go through a array. Pick the shorter one.
  var shortArr;
  var longArr;
  
  if(a.length &amp;gt; b.length){
    longArr = a;
    shortArr = b;
  } else{
    longArr = b;
    shortArr = a;
  }
  
  for(let i=0; i&amp;lt;shortArr.length; i++) {
    if(longArr.indexOf(shortArr[i]) &amp;lt; 0) {
      longArr.push(shortArr[i]);
    }
  }
  
  console.log(longArr);
  
}

combineNoDups(a, b)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;=============&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;width=device-width&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Anton Accordion&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;.accordion&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;400px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Helvetica&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;.entry&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;.entry&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:not&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:last-child&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;border-bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;.header&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#CCC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;.header&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#999&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;.content&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;40px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'accordion'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'entry'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'header'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Header#1 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'content'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; Bacon ipsum dolor amet spare ribs turkey alcatra &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;    
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'entry'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'header'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; Header#2 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'content'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; Bacon ipsum dolor amet spare ribs turkey alcatra &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'entry'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'header'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; Header#3 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'content'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; Bacon ipsum dolor amet spare ribs turkey alcatra &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'entry'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'header'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; Header#4 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'content'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; Bacon ipsum dolor amet spare ribs turkey alcatra&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt; 
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;br&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'accordion'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'entry'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'header'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Header#1 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'content'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; Bacon ipsum dolor amet spare ribs turkey alcatra &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;    
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'entry'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'header'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; Header#2 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'content'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; Bacon ipsum dolor amet spare ribs turkey alcatra &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'entry'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'header'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; Header#3 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'content'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; Bacon ipsum dolor amet spare ribs turkey alcatra &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'entry'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'header'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; Header#4 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'content'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; Bacon ipsum dolor amet spare ribs turkey alcatra&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt; 
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;'use strict'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Accordion&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;accordion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;activeEntry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;entries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.entry'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.header'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'click'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;actionAcc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;updateEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;activeEntry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;actionAcc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;newEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.header'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;display&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'none'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;newEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.content'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;display&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'block'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;activeEntry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;activeEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.header'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;display&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'block'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;activeEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.content'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;display&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'none'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;updateEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;accordions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.accordion'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;accordions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Accordion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);});&lt;/span&gt;


  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;=============&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;width=device-width&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Anton Wireframe&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;


    &lt;span class=&quot;nf&quot;&gt;#page-wrap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;800px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;#page-wrap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;box-sizing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;border-box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;#page-wrap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;footer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;margin-top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;800px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;44px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;.left&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;232px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;margin-right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;11px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inline-block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;.main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;557px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inline-block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;#logo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;82px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;margin-bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;11px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;nav&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;49px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;margin-bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;384px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;aside&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;210px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;margin-bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;33px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;#ad&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;205px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;




  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'page-wrap'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;section&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'left noborder'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'logo'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;aside&amp;gt;&amp;lt;/aside&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;section&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ad'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;section&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'main noborder'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;header&amp;gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;nav&amp;gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;main&amp;gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;footer&amp;gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;


&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Sun, 02 Oct 2016 12:00:00 -0700</pubDate>
        <link>http://localhost:4000/gee-dude-3</link>
        <guid isPermaLink="true">http://localhost:4000/gee-dude-3</guid>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Steaks</title>
        <description>&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;2016-09-27&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I now have a much simpler approach in cooking steak.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The Tools.&lt;/strong&gt; A regular pan works. Use a lid to minimize splatter.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The Thickness.&lt;/strong&gt; Anything close to one-inch is ideal. The thicker it is, the longer it has to be cooked.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Bone-in/Bone-out.&lt;/strong&gt; The part that’s closer to the bone will need more time to be cooked. T-bone is ought to be avoided (if possible) because it requires a more advanced technique of cooking due to the bone.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;No Oil.&lt;/strong&gt; Definitely add salt and pepper though.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Cooking Time.&lt;/strong&gt; For a one-inch thick meat, the first side should be cooked for about 4 minutes, while the other side about 3 minutes. Cutting with a knife and fork might be needed  to check if it’s cooked enough at first, but overtime the person gets to gauge things better.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Let it rest.&lt;/strong&gt; Steaks still continue to cook after you’ve taken it out of the pan.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;2015-03-28&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Since I’ve started living the “simple life” back in 2013, the majority of my diet consists of eggs, steamed fish, steamed chicken, and steamed vegetables.  As anyone could imagine, steamed anything doesn’t really taste too well because you lose all of the flavors – which I was fine with because the food is clean, food cooks fast, and cleaning is a breeze.&lt;/p&gt;

&lt;p&gt;However, recently I started to feel that I need to add diversity into my diet while still keeping it clean (i.e., no processed foods).  So occasionally, I’d go and order some piece of steak at a restaurant.  However, this left me unsatisfied for the following reasons: 1.) The portions are too small and overpriced for their size, and 2.) I would need to spend time to drive out, order, and wait for it to be ready.   Needless to say, the ROI is not worth it.&lt;/p&gt;

&lt;p&gt;So I thought, why not learn how to cook steaks properly.  After searching through some reddit posts on how to cook steaks, I was brought to &lt;a href=&quot;http://www.seriouseats.com/2012/12/the-food-lab-complete-guide-to-pan-seared-steaks.html&quot;&gt;this site&lt;/a&gt;.  What I like about it that it’s simple: pan-seared steak. No oven necessary. And below is my take away…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. The tools.&lt;/strong&gt;  I plan to learn the ways of the cast-iron skillet (I got it from Amazon).  Also, I’ll be using a thermometer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. The Cut.&lt;/strong&gt; Ribeye, New York Strip, Tenderloin, and T-bone.  In that order.  T-bone is ought to be avoided (if possible) because it requires a more advanced technique of cooking due to the bone.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. The Grade.&lt;/strong&gt; All beef that’s sold in the U.S. is graded by the United States Department of Agriculture on a scale according to its tenderness and degree of marbling. The grades are: Prime, Choice, Select, and Canner.  Only about 2% of the beef sold in the US is Prime.  Choice and Select are what you find supermarkets. Canner is at school lunches and dog food.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. The Thickness.&lt;/strong&gt; Try to go for at least 1.5 inch in thickness.  &lt;em&gt;“Without an adequately thick steak, it’s very difficult to get that contrast between exterior and interior that is so desirable. Thin, thin steaks will tend to overcook before they can finish developing a nice crust.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Aging.&lt;/strong&gt; This is more advanced for the basic cook (so I’ll leave this out for now). In fact, it is pretty much impossible to dry age properly at home.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Bone-in, Bone-out.&lt;/strong&gt;  This is pretty minor.   A bone accomplishes two things: It prevent some moisture loss by reducing the surface area of a steak, and it keeps that section of the steak from overcooking by acting as an insulator.  Sure there’s that extra moist, but you’ll have to learn the ways of basting to ensure the meat in the bone area gets cooked properly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. The Salt.&lt;/strong&gt; USE KOSHER SALT, not regular table salt.  Season it at least overnight.  A couple of days or more if possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. Cook with Oil. Add butter later.&lt;/strong&gt;  Milk proteins in butter get burn when too hot.  Butter is best added to the pan a few minutes before it’s done cooking.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. The Flipping.&lt;/strong&gt; It’s actually slightly better to flip often.  Nonetheless, this is minutiae.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. The Baste.&lt;/strong&gt; This is basically spooning hot fat over your meat.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10. Add Aromatics.&lt;/strong&gt; After the butter is melted, add a handful of herbs such as thyme or rosemary, along with some sweet alliums like shallots or garlic. They pop and sputter, releasing their aromas and rapidly infusing the fat with their flavor. When you baste, you’re adding that aroma with each spoonful.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;11. Let it Rest.&lt;/strong&gt; &lt;em&gt;“If you cut the steak open as soon as it comes off the grill, the juice has only one place to go — onto your plate. On the other hand, allow the steak to rest until its temperature has normalized, and the juices will distribute themselves more evenly throughout its interior.”&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
        <pubDate>Tue, 27 Sep 2016 07:00:01 -0700</pubDate>
        <link>http://localhost:4000/steaks</link>
        <guid isPermaLink="true">http://localhost:4000/steaks</guid>
        
        
        <category>Nutrition</category>
        
      </item>
    
      <item>
        <title>How I Sort</title>
        <description>&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;'use strict';

// We pick out the smallest each time
function regSort(arr) { 
 function getPosition(arr) {
   var value = arr[0];
   var position = 0;
   for(var i = 0; i &amp;lt; arr.length; i++ ) {
     if (arr[i] &amp;lt; value) {
       value = arr[i];
       position = i;
     }
   }
   return position;
 }
  
 var sorted = [];
 var totalLength = arr.length;
  
 for(var i=0; i&amp;lt;totalLength; i++) {
   var x = getPosition(arr);
   sorted.push(arr[x]);
   arr.splice(x, 1);
  }
  return sorted;
}

// We assume that object sorts its keys in numerical order
function hashSort(arr) {
  var x = {};
  var sorted = [];
  
  for(var i=0; i&amp;lt;arr.length; i++) {
    x[arr[i]] = x[arr[i]]  + 1 || 1;
  }
  
  for(var sub in x) {
    for(var j=0; j&amp;lt; x[sub]; j++) {
      sorted.push(Number(sub))
    }
  }
  
  return sorted;
}


function insertionSort(arr) {
  for(let i=0; i&amp;lt;arr.length; i++) {
    let x = arr[i];
    let pos = 0;
    
    // compare within sorted bounds
    for(let j=i; j&amp;gt;=0; j--) {
      pos = j;
      if(x &amp;gt; arr[j-1])
        break;
    }
    
    // Then move contents
    for(let k=i; k&amp;gt;pos; k--){
      arr[k] = arr[k-1];
    }
    arr[pos] = x; // insert into position
  }
  return arr;
}



function mergeSort(arr, p, r) {
  // base case
  if(r === p) 
    return [arr[p]];
  
  let q = Math.floor((r-p)/2 + p) ; //half length
  
  let firstHalf = mergeSort(arr, p, q);
  let secondHalf = mergeSort(arr, q+1, r);
  
  let sorted = [];

  for(let j=0, k=0; j&amp;lt;firstHalf.length || k&amp;lt;secondHalf.length;) {
    if(firstHalf[j] &amp;lt; secondHalf[k] || k&amp;gt;=secondHalf.length) {
      sorted.push(firstHalf[j++]);
    } else {
      sorted.push(secondHalf[k++]);
    }
  }
  
  return sorted;
}


function mergeSort2(arr){
  //base case
  if(arr.length === 1) 
    return [arr[0]];
  
  //Divide 
  let halfLength = arr.length / 2;
  let firstPart = mergeSort(arr.slice(0, halfLength));
  let secondPart = mergeSort(arr.slice(halfLength));
  
  //Conquer
  let sorted = [];
  for(let i=0, j=0; i&amp;lt;firstPart.length || j&amp;lt;secondPart.length;) {
    if(firstPart[i]&amp;lt;secondPart[j] || j&amp;gt;=secondPart.length)
      sorted.push(firstPart[i++]);
    else 
      sorted.push(secondPart[j++]);
  }
  
  return sorted
}


function quickSort(arr) {
  let p = 0;
  let r = arr.length-1;
  
  function partition(arr, p, r) {
    // base case
    if(r-p &amp;lt;= 0)
      return;
    
    let pivot = arr[r];  
    let q=p, u=p;
    for(; u&amp;lt;=r; u++) {
      if(arr[u] &amp;lt;= pivot) {
        let temp = arr[q];
        arr[q++] = arr[u];
        arr[u] = temp;
      }
    }
    
    partition(arr, p, q-2); // You don't sort the pivot (q-1)
    partition(arr, q, r);
  }
  
  partition(arr, p, r);
  return arr;
}

var s2 = ['z', &quot;dog&quot;, 4, 3, 1, 6, 1, 'x'];
var s3 = [3, 7, 12, 14, 123, 7, 12, 12, 2, 6, 9, 11];
//  s3 = [13, 7,  12, 8, 11, 12, 11];
//s3 = [13, 16, 13, 14, 9, 7, 8, 12];
//s3 = [7, 8, 9, 6]
console.log(&quot;===&amp;gt; &quot;, quickSort(s3));
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Mon, 26 Sep 2016 07:42:59 -0700</pubDate>
        <link>http://localhost:4000/sort</link>
        <guid isPermaLink="true">http://localhost:4000/sort</guid>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Coing?</title>
        <description>&lt;h1 id=&quot;i-love-lance--janice&quot;&gt;I Love Lance &amp;amp; Janice&lt;/h1&gt;

&lt;p&gt;You’ve caught two of your fellow minions passing coded notes back and forth - while they’re on duty, no less! Worse, you’re pretty sure it’s not job-related - they’re both huge fans of the space soap opera “Lance &amp;amp; Janice”. You know how much Commander Lambda hates waste, so if you can prove that these minions are wasting her time passing non-job-related notes, it’ll put you that much closer to a promotion.&lt;/p&gt;

&lt;p&gt;Fortunately for you, the minions aren’t exactly advanced cryptographers. In their code, every lowercase letter [a..z] is replaced with the corresponding one in [z..a], while every other character (including uppercase letters and punctuation) is left untouched.  That is, ‘a’ becomes ‘z’, ‘b’ becomes ‘y’, ‘c’ becomes ‘x’, etc.  For instance, the word “vmxibkgrlm”, when decoded, would become “encryption”.&lt;/p&gt;

&lt;p&gt;Write a function called answer(s) which takes in a string and returns the deciphered string so you can show the commander proof that these minions are talking about “Lance &amp;amp; Janice” instead of doing their jobs.&lt;/p&gt;

&lt;h1 id=&quot;test-cases&quot;&gt;Test cases&lt;/h1&gt;

&lt;p&gt;Inputs:
    (string) s = “wrw blf hvv ozhg mrtsg’h vkrhlwv?”
Output:
    (string) “did you see last night’s episode?”&lt;/p&gt;

&lt;p&gt;Inputs:
    (string) s = “Yvzs! I xzm’g yvorvev Lzmxv olhg srh qly zg gsv xlolmb!!”
Output:
    (string) “Yeah! I can’t believe Lance lost his job at the colony!!”&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var s = &quot;wrw blf hvv ozhg mrtsg'h vkrhlwv?&quot;;
var s2 = &quot;Yvzs! I xzm'g yvorvev Lzmxv olhg srh qly zg gsv xlolmb!!&quot;;

var output = &quot;did you see last night's episode?&quot;;

function answer(s) {
  let tD = {}; //table decoder
  for (let i=0; i&amp;lt;26; i++) {
    let key = 'a'.charCodeAt(0) + i;
    let value = 'z'.charCodeAt(0) - i;
    tD[String.fromCharCode(key)] = String.fromCharCode(value);
  }
  
  let newS = '';
  for(let i=0; i&amp;lt;s.length; i++) {
    let letter = s[i];
    if(letter &amp;gt;= 'a' &amp;amp;&amp;amp; letter &amp;lt;= 'z') 
      newS += tD[letter];
    else 
      newS += letter;
  }
  
  return newS;
}

console.log(answer(s));
console.log(answer(s2));
//console.log('a'.charCodeAt(0));


def answer(s):
    print 1
    tD = {}
    for i in range(0, 26):
        key = ord('a') + i
        value = ord('z') - i
        tD[chr(key)] = chr(value)


    newS = ''
    for i in range(0, len(s)):
        letter = s[i]
        if letter &amp;gt;= 'a' and letter &amp;lt;= 'z':
            newS += tD[letter]
        else:
            newS += letter
    return newS

s = &quot;wrw blf hvv ozhg mrtsg'h vkrhlwv?&quot;
print(answer(s))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;ion-flux-relabeling&quot;&gt;Ion Flux Relabeling&lt;/h1&gt;

&lt;p&gt;Oh no! Commander Lambda’s latest experiment to improve the efficiency of her LAMBCHOP doomsday device has backfired spectacularly. She had been improving the structure of the ion flux converter tree, but something went terribly wrong and the flux chains exploded. Some of the ion flux converters survived the explosion intact, but others had their position labels blasted off. She’s having her henchmen rebuild the ion flux converter tree by hand, but you think you can do it much more quickly - quickly enough, perhaps, to earn a promotion!&lt;/p&gt;

&lt;p&gt;Flux chains require perfect binary trees, so Lambda’s design arranged the ion flux converters to form one. To label them, she performed a post-order traversal of the tree of converters and labeled each converter with the order of that converter in the traversal, starting at 1. For example, a tree of 7 converters would look like the following:&lt;/p&gt;

&lt;p&gt;7
 3   6
1 2 4 5&lt;/p&gt;

&lt;p&gt;Write a function answer(h, q) - where h is the height of the perfect tree of converters and q is a list of positive integers representing different flux converters - which returns a list of integers p where each element in p is the label of the converter that sits on top of the respective converter in q, or -1 if there is no such converter.  For example, answer(3, [1, 4, 7]) would return the converters above the converters at indexes 1, 4, and 7 in a perfect binary tree of height 3, which is [3, 6, -1].&lt;/p&gt;

&lt;p&gt;The domain of the integer h is 1 &amp;lt;= h &amp;lt;= 30, where h = 1 represents a perfect binary tree containing only the root, h = 2 represents a perfect binary tree with the root and two leaf nodes, h = 3 represents a perfect binary tree with the root, two internal nodes and four leaf nodes (like the example above), and so forth.  The lists q and p contain at least one but no more than 10000 distinct integers, all of which will be between 1 and 2^h-1, inclusive.&lt;/p&gt;

&lt;p&gt;JavaScript:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  def answer(h, q):
      p = [None] * len(q)
      state = {'x': 0, 'counter': len(p)}
      hashTable = {}
      

      def postOrderTraversal(h):
          if state['counter'] &amp;lt; 1:
              return None
          elif h &amp;lt;= 0:
              return None

          z1 = postOrderTraversal(h-1)
          z2 = postOrderTraversal(h-1)
          state['x'] = state['x'] + 1

          if(z1):
              p[q.index(z1)] = state['x']

          if(z2):
              p[q.index(z2)] = state['x']

          if state['counter'] &amp;lt; 1:
              return None
          elif state['x'] in q:
              state['counter'] = state['counter'] - 1
              return  state['x']
          else:
              return None
      
      # coner case
      cornerCase = (2**h) - 1
      if cornerCase in q:
          p[q.index(cornerCase)] = -1
          state['counter'] = state['counter'] - 1
      postOrderTraversal(h)

      return p




  h = 3
  q = [7, 3, 5, 1]
  print answer( h, q )


  h2 = 5
  q2 = [19, 14, 28, 8]
  print(answer(h2, q2))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Python&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def answer(h, q):
    p = [None] * len(q)
    
    def findIt(h, missingZ, stateFactor):
        max = (2**h) - 1
        maxhalf = max/2

        #base
        if missingZ == maxhalf + stateFactor:
            return max + stateFactor
        elif missingZ == maxhalf*2 + stateFactor:
            return max + stateFactor

        if missingZ &amp;lt; maxhalf+stateFactor:
            stateFactor += 0
        else:
            stateFactor += maxhalf

        return findIt(h-1, missingZ, stateFactor)


    for missingZ in q:
        cornerCase = (2**h) - 1
        if cornerCase == missingZ:
            p[q.index(cornerCase)] = -1
        else:
            p[q.index(missingZ)] = findIt(h, missingZ, 0)


    return p




h = 3
q = [7, 3, 5, 1]
print answer( h, q )


h2 = 5
q2 = [19, 14, 28, 8]
print(answer(h2, q2))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;lovely-lucky-lambs&quot;&gt;Lovely Lucky LAMBs&lt;/h1&gt;

&lt;p&gt;Being a henchman isn’t all drudgery. Occasionally, when Commander Lambda is feeling generous, she’ll hand out Lucky LAMBs (Lambda’s All-purpose Money Bucks). Henchmen can use Lucky LAMBs to buy things like a second pair of socks, a pillow for their bunks, or even a third daily meal!&lt;/p&gt;

&lt;p&gt;However, actually passing out LAMBs isn’t easy. Each henchman squad has a strict seniority ranking which must be respected - or else the henchmen will revolt and you’ll all get demoted back to minions again!&lt;/p&gt;

&lt;p&gt;There are 4 key rules which you must follow in order to avoid a revolt:
    1. The most junior henchman (with the least seniority) gets exactly 1 LAMB.  (There will always be at least 1 henchman on a team.)
    2. A henchman will revolt if the person who ranks immediately above them gets more than double the number of LAMBs they do.
    3. A henchman will revolt if the amount of LAMBs given to their next two subordinates combined is more than the number of LAMBs they get.  (Note that the two most junior henchmen won’t have two subordinates, so this rule doesn’t apply to them.  The 2nd most junior henchman would require at least as many LAMBs as the most junior henchman.)
    4. You can always find more henchmen to pay - the Commander has plenty of employees.  If there are enough LAMBs left over such that another henchman could be added as the most senior while obeying the other rules, you must always add and pay that henchman.&lt;/p&gt;

&lt;p&gt;Note that you may not be able to hand out all the LAMBs. A single LAMB cannot be subdivided. That is, all henchmen must get a positive integer number of LAMBs.&lt;/p&gt;

&lt;p&gt;Write a function called answer(total_lambs), where total_lambs is the integer number of LAMBs in the handout you are trying to divide. It should return an integer which represents the difference between the minimum and maximum number of henchmen who can share the LAMBs (that is, being as generous as possible to those you pay and as stingy as possible, respectively) while still obeying all of the above rules to avoid a revolt.  For instance, if you had 10 LAMBs and were as generous as possible, you could only pay 3 henchmen (1, 2, and 4 LAMBs, in order of ascending seniority), whereas if you were as stingy as possible, you could pay 4 henchmen (1, 1, 2, and 3 LAMBs). Therefore, answer(10) should return 4-3 = 1.&lt;/p&gt;

&lt;p&gt;To keep things interesting, Commander Lambda varies the sizes of the Lucky LAMB payouts: you can expect total_lambs to always be between 10 and 1 billion (10 ^ 9).&lt;/p&gt;

&lt;h1 id=&quot;test-cases-1&quot;&gt;Test cases&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Inputs:
    (int) total_lambs = 10
Output:
    (int) 1

Inputs:
    (int) total_lambs = 143
Output:
    (int) 3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;JavaScript:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function generous(total_lambs) {
  let rank = 1;
  let counter = 0;
  for(; total_lambs &amp;gt; 0; ) {
    total_lambs -= rank;
    rank *= 2;
    
    if(total_lambs &amp;gt;= 0)
      counter++;
  }
  return counter;
}


function stingy(total_lambs){
  let rank = [0, 1];
  let twoJuniors = 1;
  let counter = 0;
  for(; total_lambs &amp;gt; 0;) {
    let totalRank = rank[0] + rank[1];
    total_lambs -= totalRank;
    
    if(twoJuniors &amp;lt; 2) {
      twoJuniors++;
    } else {
      rank[0] = rank[1];
      rank[1] = totalRank;
    }
    
    if(total_lambs &amp;gt;= 0)
      counter++;
  }
  
  return counter;
}

let total = 143;

let x = Math.abs(generous(total) - stingy(total));
console.log(x);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Python&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def answer(total_lambs):
    def generous(total_lambs):
        rank = 1
        counter = 0
        while(total_lambs &amp;gt; 0):
            total_lambs -= rank
            rank *= 2
            if(total_lambs &amp;gt;= 0):
                counter += 1
        return counter


    def stingy(total_lambs):
        rank = [0, 1]
        twoJuniors = 1
        counter = 0
        while(total_lambs &amp;gt; 0):
            totalRank = rank[0] + rank[1]
            total_lambs -= totalRank

            if(twoJuniors &amp;lt; 2):
                twoJuniors += 1
            else:
                rank[0] = rank[1]
                rank[1] = totalRank
            if(total_lambs &amp;gt;= 0):
                counter += 1
        return counter


    return abs(generous(total_lambs) - stingy(total_lambs))

total_lambs = 143
print answer(total_lambs)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;fuel-injection-perfection&quot;&gt;Fuel Injection Perfection&lt;/h1&gt;

&lt;p&gt;Commander Lambda has asked for your help to refine the automatic quantum antimatter fuel injection system for her LAMBCHOP doomsday device. It’s a great chance for you to get a closer look at the LAMBCHOP - and maybe sneak in a bit of sabotage while you’re at it - so you took the job gladly.&lt;/p&gt;

&lt;p&gt;Quantum antimatter fuel comes in small pellets, which is convenient since the many moving parts of the LAMBCHOP each need to be fed fuel one pellet at a time. However, minions dump pellets in bulk into the fuel intake. You need to figure out the most efficient way to sort and shift the pellets down to a single pellet at a time.&lt;/p&gt;

&lt;p&gt;The fuel control mechanisms have three operations:&lt;/p&gt;

&lt;p&gt;1) Add one fuel pellet
2) Remove one fuel pellet
3) Divide the entire group of fuel pellets by 2 (due to the destructive energy released when a quantum antimatter pellet is cut in half, the safety controls will only allow this to happen if there is an even number of pellets)&lt;/p&gt;

&lt;p&gt;Write a function called answer(n) which takes a positive integer as a string and returns the minimum number of operations needed to transform the number of pellets to 1. The fuel intake control panel can only display a number up to 309 digits long, so there won’t ever be more pellets than you can express in that many digits.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;answer(4) returns 2: 4 -&amp;gt; 2 -&amp;gt; 1&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;answer(15) returns 5: 15 -&amp;gt; 16 -&amp;gt; 8 -&amp;gt; 4 -&amp;gt; 2 -&amp;gt; 1&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def answer(n):
    counter = 0
    num = long(n)
    while(num &amp;gt; 1):
        if num % 2 == 0:
            num = num / 2
        elif num == 3 or num % 4 == 1:
            num -= 1
        elif num % 4 == 3 :
            num += 1
        else:
            print 'ruh roh'
            break
        counter += 1
    return counter




print &quot;Input: 1. Expected: 0. Actual Answer: &quot;, answer('1')
print &quot;Input: 2. Expected: 1. Actual Answer: &quot;, answer('2')
print &quot;Input: 4. Expected: 2. Actual Answer: &quot;, answer('4')
print &quot;Input: 15. Expected: 5. Actual Answer: &quot;, answer('15')
print &quot;Input: 17. Expected: 5. Actual Answer: &quot;, answer('17')
print &quot;Input: 18. Expected: 6 or less. Actual Answer: &quot;, answer('18')
print &quot;Input: 12. Expected: 7 or less. Actual Answer: &quot;, answer('12')
print &quot;Input: 1024. Expected: 10 or less. Actual Answer: &quot;, answer('1024')
print &quot;Input: 1536. Expected: 11 or less. Actual Answer: &quot;, answer('1536')
print &quot;Input: 1048576. Expected: 20. Actual Answer: &quot;, answer('1048576')
print &quot;Input: 18446744073709551615. Expected: 64. Actual Answer: &quot;, answer('18446744073709551616')
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 26 Sep 2016 07:42:59 -0700</pubDate>
        <link>http://localhost:4000/coding</link>
        <guid isPermaLink="true">http://localhost:4000/coding</guid>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>JavaScript Objects</title>
        <description>&lt;h2 id=&quot;classes&quot;&gt;Classes&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Rabbit {
  // Constructor. Runs every time a new instance is created with `new` operator
  constructor(type) {
    this.type = type;
  }

  // Method
  render() {
    console.log(this.type);
  }
}
let whiteRabbit = new Rabbit('white');

console.log(&quot;=========&quot;)
console.log(Object.getPrototypeOf(whiteRabbit));
console.log(Object.getPrototypeOf(Rabbit));

whiteRabbit.render();
whiteRabbit.type = 'light';
whiteRabbit.render();

let lightRabbit = Object.create(whiteRabbit);
lightRabbit.render();


console.log(&quot;=====================&quot;)
console.log(Object.prototype.toString.call([1, 2]));
console.log(Array.prototype.toString.call([1, 2]));
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;enumerable-vs-nonenumerable-properties&quot;&gt;Enumerable vs Nonenumerable properties&lt;/h2&gt;

&lt;p&gt;All properties that we create by simply assigning to them are enumerable. The standard properties in &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.prototype&lt;/code&gt; are all nonenumerable, which is why they do not show up in such a for/in loop.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var map = {};
function storePhi(event, phi) {
  map[event] = phi;
}

storePhi(&quot;pizza&quot;, 0.069);
storePhi(&quot;touched tree&quot;, -0.081);

Object.prototype.nonsense = &quot;hi&quot;;
for (var name in map)
  console.log(name);
// → pizza
// → touched tree
// → nonsense
console.log(&quot;nonsense&quot; in map);
// → true
console.log(&quot;toString&quot; in map);
// → true

// Delete the problematic property again
delete Object.prototype.nonsense;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It is possible to define our own nonenumerable properties by using the &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.defineProperty&lt;/code&gt; function, which allows us to control the type of property we are creating.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Object.defineProperty(Object.prototype, &quot;hiddenNonsense&quot;,
                      {enumerable: false, value: &quot;hi&quot;});
for (var name in map)
  console.log(name);
// → pizza
// → touched tree
console.log(map.hiddenNonsense);
// → hi
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;But we still have the problem with the regular in operator claiming that the &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.prototype&lt;/code&gt; properties exist in our object. For that, we can use the object’s &lt;code class=&quot;highlighter-rouge&quot;&gt;hasOwnProperty&lt;/code&gt; method.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for (var name in map) {
  if (map.hasOwnProperty(name)) {
    console.log(name);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Prototype-less objects&lt;/strong&gt;.  You are allowed to pass null as the prototype to create a fresh object with no prototype.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var map = Object.create(null);
map[&quot;pizza&quot;] = 0.069;
console.log(&quot;toString&quot; in map);
// → false
console.log(&quot;pizza&quot; in map);
// → true
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;polymorphism&quot;&gt;Polymorphism&lt;/h2&gt;
&lt;hr /&gt;

</description>
        <pubDate>Tue, 12 Apr 2016 01:01:00 -0700</pubDate>
        <link>http://localhost:4000/js-objects</link>
        <guid isPermaLink="true">http://localhost:4000/js-objects</guid>
        
        
        <category>craft</category>
        
      </item>
    
      <item>
        <title>ES2015</title>
        <description>&lt;h2 id=&quot;let--const&quot;&gt;let &amp;amp; const&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; variables are scoped to the nearest block (i.e., blocked-scoped) and are not hoisted.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; keyword solves the issue of “registered-but-not-executed” callbacks. In the example below, &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; is shared for each iteration.
Once the event goes through on &lt;code class=&quot;highlighter-rouge&quot;&gt;click&lt;/code&gt;, the now executed callback will be using the last value of &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  function loopUsingVar(){
    var li = document.querySelectorAll('li')
    for (var i=0; i &amp;lt; li.length; i++) {
      li[i].addEventListener('click', function() {
        console.log(i, li[i]);
      })
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt; keyword creates &lt;strong&gt;read-only&lt;/strong&gt; named constants. Variables declared with &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt; must be assigned with an initial value. Behaves like &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   const MAX_USERS = 3`
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;functions&quot;&gt;Functions&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Default Parameter&lt;/strong&gt; values help move default values from the function body to the function definition.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function exampleFunction(userNames = []){
  let namesLength = userNames.length;
  console.log(namesLength);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Named Parameters&lt;/strong&gt; are used for optional settings to make it easer to understand how a function should be invoked. 
This also gets rid of the verbose boiler plate code, (e.g., &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.popular&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;= {}&lt;/code&gt; sets the default value to an empty object, and allows the parameter to be omitted during function calls.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function exampleFunction(name, {popular, expires, activeClass} = {}){
  console.log(&quot;Name: &quot;, name);
  console.log(&quot;Expires: &quot;, expires);
  console.log(&quot;Active: &quot;, activeClass);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The new &lt;strong&gt;rest parameter&lt;/strong&gt; syntax allows us to represent an indefinite number of arguments as an &lt;strong&gt;Array&lt;/strong&gt;.&lt;br /&gt;
This way, changesl to function signature are less likely to break code. This works well for a &lt;strong&gt;variadic function&lt;/strong&gt; which means it accepts individual arguments that can be multiple.&lt;/p&gt;

&lt;p&gt;Things to note: The 3 dots are part of the syntax, 
the variable is an array, and it must always go last on the function parameter.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function displayTags(targetElement, ...tags){
  let target = _findElement(targetElement);

  for(i in tags) {
    let tag  = tags[i];
    console.log(target, tag);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;strong&gt;spread operator&lt;/strong&gt; allows us to &lt;strong&gt;split an Array&lt;/strong&gt; into &lt;strong&gt;individual elements&lt;/strong&gt;.  It is used in a function invocation.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;getRequest('/topics/17/tags', function(data) {
    let tags = data.tags;
    displayTags(...tags);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Arrow functions&lt;/strong&gt; bind to the scope of where they are defined, not where they are used. This is known as &lt;strong&gt;lexical binding&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TagComponent.prototype.render = function() {
  getRequest(this.urlPath, (data) =&amp;gt; {
    let tags = data.tags;

    // &quot;this&quot; here refers to the scope outside of the `=&amp;gt;` (arrow function)
    displayTags(this.targetElement, ...tags); 
  });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;objects--strings&quot;&gt;Objects &amp;amp; Strings&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Object Initializer Shorthand.&lt;/strong&gt; We can remove duplicate variable names from object properties when those 
properties have the same name as the variables assigned to them. (i.e., from variables to object properties)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function buildUser(first, last) {
  let fullName = first + ' ' + last;

  // Old Way
  // return {first: first, last: last, fullName: fullName} 

  // ES2015 Way
  return { first, last, fullName };
}


function main() {
  let name = 'Sam';
  let age = 45;

  let user = { name, age };  //ES2015 Way
  console.log(user.name);
  console.log(user.age);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Object Destructuring&lt;/strong&gt;.  We can use shorthand to assign properties to local variables with the same name. (i.e., from object properties to variables)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//Old Way
let user = buildUser('Sam', 'Williams');
let first = user.first;
let last = user.last;
let fullName = user.fullName;

// ES2015 Way
let {first, last, fullName} = buildUser(&quot;Sam&quot;, &quot;Williams&quot;); 
console.log(first);
console.log(last);

// ES2015 Way
let {fullName} = buildUser(&quot;Katy&quot;, &quot;Perry&quot;); // if we only want fullName property destructured.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Adding a Function to an Object&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function buildUser(first, last) {
  let fullName = first + ' ' + last;

  // Old Way
  /* return {
        first: first, last: last, fullName: fullName,
        isActive: function(){return true;}
      } 
  */


  // ES2015 Way
  return { first, last, fullName,
    isActive(){ return true; } 
  };
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Template Strings.&lt;/strong&gt; Preserves white spaces.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let first = 'Sam';
let userName = 'SamSmith';

let veryLongText = `Hi ${first},

this is a very 
very

looong
text. 

Regards,
  ${userName}
`;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;strong&gt;Object.assign&lt;/strong&gt; method copies properties from one or more source objects to a target object specified as the very first argument.
In case of duplicates, the last object on the chain always prevails.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let defaults = {
  name: 'Sam',
  last: 'Williams'
};

let option1 = { name: 'Tim' };
let option2 = { screenName: 'misterwilliams'};

let settings = Object.assign({}, defaults, option1, option2);
console.log(settings);  // Object {name: &quot;Tim&quot;, last: &quot;Williams&quot;, screenName: &quot;misterwilliams&quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;arrays&quot;&gt;Arrays&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Array Destructuring&lt;/strong&gt;.  We can use destructuring to assign multiple values from an array to local variables.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let users = ['Sam', 'Tyler', 'Brook'];
let [a, b, c] = users;
console.log(a, b, c); // Sam Tyler Brook 

// Values can be discarded
let [a, , b] = users;
console.log(a, b); // Sam Brook


// Combine Destructuring with Rest Parameter
let users = ['Sam', 'Tyler', 'Brook'];
let [first, ...rest] = users;
console.log(first, rest); // Sam [&quot;Tyler&quot;, &quot;Brook&quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;strong&gt;For…of&lt;/strong&gt; statement itereates over &lt;strong&gt;propety values&lt;/strong&gt;, and it’s a better way to loop over arrays and other &lt;strong&gt;iterable objects&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for(let name of names) {
  console.log(name);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Array.find&lt;/strong&gt; returns the first element in the array that satisfies a provided testing function.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let users = [
  {login: &quot;Sam&quot;,    admin: false},
  {login: &quot;Brook&quot;,  admin: true},
  {login: &quot;Tyler&quot;,  admin: true}
];

let admin = user.find( user =&amp;gt; {return user.admin; });
// let admin = user.find( user =&amp;gt; user.admin);  // Even shorter way

console.log(admin); // {&quot;login&quot;: &quot;Brook&quot;, &quot;admin&quot;: true}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;maps&quot;&gt;Maps&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;Map&lt;/strong&gt; object is a simple &lt;strong&gt;key/value&lt;/strong&gt; data structure. &lt;strong&gt;Any value&lt;/strong&gt; may be used as either a key or a value, and objects
are &lt;strong&gt;not converted&lt;/strong&gt; to strings.&lt;/p&gt;

&lt;p&gt;When to use Maps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When keys are unknown until runtime.  (When using predefined settings, it’s okay to use an object.)&lt;/li&gt;
  &lt;li&gt;When all keys are the same type and all values are the same type. (If values are different types, object is a better choice.)&lt;/li&gt;
  &lt;li&gt;When you need to iterate because Maps are iterable using &lt;code class=&quot;highlighter-rouge&quot;&gt;for...of&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let mapSettings = new Map();

mapSettings.set(&quot;user&quot;, &quot;Sam&quot;);
mapSettings.set(&quot;topic&quot;, &quot;ES2015&quot;);
mapSettings.set(&quot;replies&quot;, [&quot;Can't wait!&quot;, &quot;So Cool!&quot;]);

for(let [key, value] of mapSettings) {
  console.log(`${key} = ${value}`);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Weakmap&lt;/strong&gt; is a type of &lt;em&gt;Map&lt;/em&gt; where &lt;strong&gt;only objects&lt;/strong&gt; can be passed as keys.  Primitive data types – such as strings, numbers, booleans, etc. – are &lt;strong&gt;not allowed&lt;/strong&gt;.  All available methods on a &lt;em&gt;WeakMap&lt;/em&gt; require access to an &lt;strong&gt;object used as a key&lt;/strong&gt;.&lt;br /&gt;
Also, &lt;em&gt;WeakMaps&lt;/em&gt; are &lt;strong&gt;no interable.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Why use &lt;em&gt;WeakMaps&lt;/em&gt;? Because they are better with memory.  Individual entries in a &lt;em&gt;WeakMap&lt;/em&gt; can be &lt;strong&gt;garbage collected&lt;/strong&gt; 
while the &lt;em&gt;WeakMap&lt;/em&gt; still exists. &lt;em&gt;WeakMaps&lt;/em&gt; allows keys that are no longer referenced to be garbage collected.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let user = {};
let comment = {};

let mapSettings2 = new WeakMap();
mapSettings2.set(user, &quot;user&quot;);
mapSettings2.set(comment, &quot;comment&quot;);

console.log(mapSettings2.get(user));
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;sets&quot;&gt;Sets&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;Set&lt;/em&gt; object stores &lt;strong&gt;unique&lt;/strong&gt; values of any type, whether primitive values or object references.  &lt;em&gt;Set&lt;/em&gt; objects are 
iterable, which means they can be used with &lt;em&gt;for…of&lt;/em&gt; and destructuring.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let tags = new Set();
tags.add(&quot;JavaScript&quot;);
tags.add({version: &quot;2015&quot;});
tags.add(&quot;web&quot;);
tags.add(&quot;web&quot;); // This will be ignored since web is already in the Set.

for(let tag of tags) {
  console.log(tag);
}

let [a, b, c, d] = tags; //destructuring
console.log(a, b, c, d)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;strong&gt;WeakSet&lt;/strong&gt; is a type of &lt;em&gt;Set&lt;/em&gt; where &lt;strong&gt;only objects&lt;/strong&gt; are allowed to be stored.  A &lt;em&gt;WeakSet&lt;/em&gt; gives us 2 more methods
to use: &lt;code class=&quot;highlighter-rouge&quot;&gt;has&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;delete&lt;/code&gt; (both return a boolean).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let weakTags = new WeakSet();
weakTags.add(&quot;JavaScript&quot;); // TypeError: Invalid value use in weak set
weakTags.add({name: &quot;JavaScript&quot;});

let iOS = {name: &quot;iOS&quot;};
weakTags.add(iOS);

weakTags.has(iOS);
weakTags.delete(iOS);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;WeakSets&lt;/em&gt; cannot be used with &lt;em&gt;for…of&lt;/em&gt; and they offer no methods for reading valuse from it. Since we can’t read
values from a &lt;em&gt;WeakSet&lt;/em&gt;, when should we use it?  We can use &lt;em&gt;WeakSets&lt;/em&gt; to create special groups from existing objects
without mutating them.  Favoring immutable objects allow for much simpler code with no unexpected side effects.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;classes&quot;&gt;Classes&lt;/h2&gt;

&lt;p&gt;New Class Syntax.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class SponsorWidget {

  // Constructor. Runs every time a new instance is created with `new` operator
  constructor(name, description, url) {
    this.name = name;
    this.description = description;
    this.url = url;
  }

  // Method
  render() {
    let link = this._buildLink(this.url); // Use `this` to access instance variables within the class
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Currently, there are no access modifiers (e.g., private, protected), so prefixing a method with an underscore is a
popular convention that a method should not be called from the public API.&lt;/p&gt;

&lt;h2 id=&quot;class-inheritance&quot;&gt;Class Inheritance&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;extends&lt;/strong&gt; keyword is used to create a class that &lt;em&gt;inherits methods and properties&lt;/em&gt; from another class.  The &lt;strong&gt;super&lt;/strong&gt; 
method runs the constructor function from the parent class.&lt;/p&gt;

&lt;p&gt;Furthemore, The &lt;strong&gt;super object&lt;/strong&gt; can be used by a child class to invoke methods from a parent class&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Widget {
  constructor(name, description, url) {
    this.baseCSS = &quot;ste-widget&quot;;
  }

  parse(value) {
    // ...
  }
}


class SponsorWidgent extends Widget {
  constructor(name, description, url) {
    super();  // WE ALMOST ALWAYS WANT THIS TO HAPPEN! This is a method
    // ...
  }

  render(){
    let parsedName = this.parse(this.name); // `this.parse` is an inherited method
    let css = this._buildCSS(this.baseCSS); // `this.baseCSS` is an inherited property
  }

  newParse(){
    let parsedName = super.parse(this.name); // Calls the parent version of the parse() method.
    return `Sponsor: ${parsedName}`;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;modules-i&quot;&gt;Modules I&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;export&lt;/em&gt; keyword exposes the function.  The &lt;em&gt;default&lt;/em&gt; type export is the simplest way to export a function.&lt;/p&gt;

&lt;p&gt;// flash-message.js&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export default function(message) {
  alert(message);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To import modules we use the &lt;em&gt;import&lt;/em&gt; keyword, specify a new local variable to hold its content,
and use the &lt;em&gt;from&lt;/em&gt; keyword to tell the JavaScript engine where the module can be found.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;flashMessage&lt;/code&gt; variable
could have been named anything because the flash-message module is using a &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt; type export.&lt;/p&gt;

&lt;p&gt;//app.js&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import flashMessage from './flash-message';
flashMessage(&quot;Hello&quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Importing Named Exports&lt;/strong&gt; can be done by assigning the &lt;em&gt;same names&lt;/em&gt; for both export and import.&lt;/p&gt;

&lt;p&gt;// flash-message.js&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export function alertMessage(message) {
  alert(message);
}

export function logMessage(message) {
  console.log(message);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;// app.js&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { alertMessage, logMessage } from './flash-message';
alertMessage(&quot;Hello Alert&quot;);
logMessage(&quot;Hello Log&quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Importing a Module as an Object&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;// flash-message.js&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export function alertMessage(message) { alert(message);}
export function logMessage(message) { console.log(message);}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;// app.js&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import * as flash from './flash-message';
flash.alertMessage(&quot;Hello Alert&quot;);
flash.logMessage(&quot;Hello Log&quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Exporting Multiple Functions at Once&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;// flash-message.js&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function alertMessage(message) { alert(message);}
function logMessage(message) { console.log(message);}

export {alertMessage, logMessage}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;modules-ii&quot;&gt;Modules II&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Exporting Constants&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;// constants.js&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const MAX_USERS = 3;
const MAX_REPLIES = 3;

export {MAX_USERS, MAX_REPLIES}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Exporting a Class&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;// flash-message.js&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class FlashMessage {
  constructor(message){ this.message = message; }

  renderAlert(){ alert(`${this.message}` from Alert); }
  renderLog(){ console.log(`${this.message}` from Log); }
}

export { FlashMessage }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;// app.js&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import {FlashMessage} from './flash-message';

let flash = new FlashMessage(&quot;Hello&quot;);
flash.renderAlert();
flash.renderLog();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;promises&quot;&gt;Promises&lt;/h2&gt;

&lt;p&gt;Before ES2015, &lt;em&gt;continuation-passing style&lt;/em&gt; (CPS) async programming is used, wherein we tell a function how to 
continue execution by passing callbacks – which can grow to a &lt;em&gt;complicated nested code&lt;/em&gt;.  A &lt;strong&gt;Promise&lt;/strong&gt; is a new
abstraction that allows us to write async code in an easier way.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;getPollResultsFromServer(&quot;Sass vs Less&quot;)
  .then(ui.renderSidebar)
  .then(sendNotificationToServer)
  .then(doSomethingElseNonBlocking)
  .catch(function(error){
    console.log(&quot;Error: &quot;, error);
    });
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The Promise constructor function takes an anonymous function with 2 callback arguments known as handlers – responsible for &lt;em&gt;resolving&lt;/em&gt;
or &lt;em&gt;rejecting&lt;/em&gt; the Promise.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function getPollResultsFromServer(pollName){
  return new Promise(function(resolve, reject) {
    //...
    request.onload = function(){
      if(request.status &amp;gt;= 200 &amp;amp;&amp;amp; request.status &amp;lt; 400)
        resolve(request.response);
      else 
        reject(new Error(request.status));
    }
    request.onerror = function(){
      reject(new Error(&quot;Error Fetching Results&quot;));
    });
    //...
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Resolving&lt;/strong&gt; a Promise is handled by &lt;code class=&quot;highlighter-rouge&quot;&gt;then()&lt;/code&gt; functions.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;getPollResultsFromServer(&quot;Sass vs Less&quot;)
  .then(function(results){
    return results.filter((result) =&amp;gt; result.city == &quot;Orlando&quot;); // returns only those that match filter.
    })
  .then(function(resultsFromOrlando){ // The return value from the first then becomes the argument here
    ui.renderSidebar(resultsFromOrlando);
    })
  .catch(function(error){
    console.log(&quot;Error: &quot;, error);
    })
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Rejecting&lt;/strong&gt; a Promise is handled above by the &lt;code class=&quot;highlighter-rouge&quot;&gt;.catch&lt;/code&gt; function. We’ll call the &lt;em&gt;reject()&lt;/em&gt; handler for &lt;strong&gt;unsuccessful status codes&lt;/strong&gt; and also when the  &lt;em&gt;onerror&lt;/em&gt; event is triggered on our request object.  Both move the Promise to a rejected stated. Once an error occurs, execution moves immediately  to the &lt;code class=&quot;highlighter-rouge&quot;&gt;catch()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Shorthand and succinct version can be done by passing function arguments to &lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt; instead of using anonymous functions.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function filterResults(results) { //.. }

let ui  = { 
  renderSidebar(filteredResuls) { //.. }
}

getPollResultsFromServer(&quot;Sass vs Less&quot;)
  .then(filteredResults)
  .then(ui.renderSidebar)
  .catch(function(error){
    console.log(&quot;Error: &quot;, error);
    });
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;iterators&quot;&gt;Iterators&lt;/h2&gt;

&lt;p&gt;Arrays are &lt;strong&gt;iterable&lt;/strong&gt; objects, which means we can use them with &lt;code class=&quot;highlighter-rouge&quot;&gt;for...of&lt;/code&gt;.   Iterables return an &lt;strong&gt;iterator&lt;/strong&gt; object, which knows
how to access items from a collection one-at-a-time, while keeping track of its current position within the sequence.&lt;/p&gt;

&lt;p&gt;Below is an example of making a &lt;strong&gt;manual iterator&lt;/strong&gt; that iterates through an &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt; (which is non-iterable by default). 
Objects that are now iteraable can use the &lt;em&gt;spread operator&lt;/em&gt; and the &lt;em&gt;destructuring assignment&lt;/em&gt; as well.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let post = {
  title: &quot;New Festures&quot;,
  replies: 19
};

post[Symbol.iterator] = function(){
  let properties = Object.keys(this);
  let count = 0;
  let isDone = false;

  let next = () =&amp;gt; {
    if(count &amp;gt;= properties.length) {
      isDone = true;
    }
    return { done: isDone, value: this[properties[count++]] };
  }
  
  return {next};
}

post.dog = 'mmk';

console.log(&quot;====&quot;);
for(let p of post) { // p refers to property values
  console.log(p);
}

console.log(&quot;+++++++&quot;);
Object.getPrototypeOf(post)['cat'] = 'meow';
//`for...in` iterates through all properties including those in prototype
for(let p in post) {  // p refers to property keys. 
  if(post.hasOwnProperty(p)) // limits to own property only
    console.log(post[p]);
}

let spreadOperated = [...post];
console.log(spreadOperated);

let [title, ,replies] = post;
console.log(title, replies);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;generators&quot;&gt;Generators&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;function *&lt;/code&gt; declaration defines &lt;em&gt;generator functions&lt;/em&gt;.  These are special functions from which we can use the &lt;em&gt;yield&lt;/em&gt; keyword
to return &lt;strong&gt;iterator&lt;/strong&gt; objects.  Generator functions return objects that provide the same &lt;em&gt;next&lt;/em&gt; method expected by &lt;code class=&quot;highlighter-rouge&quot;&gt;for...of&lt;/code&gt;,
the &lt;em&gt;spread operator&lt;/em&gt;, and the &lt;em&gt;destructuring assignment&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function *nameList() {
  yield &quot;Sam&quot;;  // {done: false, value: &quot;Sam&quot;}
  yield &quot;Tyler&quot;; // {done: false, value: &quot;Tyler&quot;}

}

for(let name of nameList()) {
  console.log( name ); // prints out Sam and Tyler in each line.
}

let spreadOperated = [...nameList()];
console.log(spreadOperated);  // [&quot;Sam&quot;, &quot;Tyler&quot;]

let [title, ,replies] = nameList();
console.log(title, replies);

let [first, second] = nameList();
console.log(first, second);  // Sam, Tyler
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Let’s replace our &lt;strong&gt;manual iterator&lt;/strong&gt; in the previous section using a &lt;strong&gt;generator function&lt;/strong&gt;.  Each time &lt;em&gt;yield&lt;/em&gt; is called, our function returns a &lt;strong&gt;new iterator&lt;/strong&gt; object adn then &lt;strong&gt;pauses&lt;/strong&gt; until it’s called again.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let post = { title: &quot;New Features&quot;, replies: 19};

post[Symbol.iterator] = function *(){
  let properties = Object.keys(this);
  for(let p of properties) {
    yield this[p];
  }
}

console.log(&quot;====&quot;);
for(let p of post) { // p refers to property values
  console.log(p);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

</description>
        <pubDate>Tue, 12 Apr 2016 01:01:00 -0700</pubDate>
        <link>http://localhost:4000/ES2015</link>
        <guid isPermaLink="true">http://localhost:4000/ES2015</guid>
        
        
        <category>craft</category>
        
      </item>
    
      <item>
        <title>Gee Dude. Interviewing 2</title>
        <description>&lt;p&gt;https://janechin.quora.com/The-Bullsh*t-that-is-Follow-Your-Bliss&lt;/p&gt;

&lt;hr /&gt;

</description>
        <pubDate>Fri, 01 Apr 2016 01:00:01 -0700</pubDate>
        <link>http://localhost:4000/follow-your-bliss</link>
        <guid isPermaLink="true">http://localhost:4000/follow-your-bliss</guid>
        
        
        <category>life</category>
        
      </item>
    
  </channel>
</rss>
