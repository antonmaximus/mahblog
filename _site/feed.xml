<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>anton</title>
    <description>A small growth today makes progression happen...</description>
    <link>www.anton23.com/</link>
    <atom:link href="www.anton23.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 01 Jan 2016 16:10:23 -0800</pubDate>
    <lastBuildDate>Fri, 01 Jan 2016 16:10:23 -0800</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>December Deadz 2015</title>
        <description>&lt;p&gt;It’s that time of the year again!&lt;/p&gt;

&lt;p&gt;Last December 2014, I had a goal of pulling close to 4 plates.  Looking back now, that goal was wayyy too ambitious.  Furthermore, after being plagued with illness every couple of months, my deadlifts has now gone down.  The graph best display how my deadlifts have gone the past year (note that there were a couple of months with missing info as I went through some dark times).&lt;/p&gt;

&lt;p&gt;The good news is that in the past year, I’ve discovered that my deadlifts need to have a more vertical back.  I learned via lifting forum that my lower body is shorter than my torso similar (just like most Asians). Hence, a more vertical back at the start position is expected.&lt;/p&gt;

&lt;p&gt;As for my deadlifting goal for next December, I’m looking to pull 3 plates (315 lbs).  I’m currently pulling 275 lbs for 5 reps.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/deadz_2015.png&quot; width=&quot;&quot; /&gt;&lt;/p&gt;

&lt;figure&gt;&lt;iframe width=&quot;360&quot; height=&quot;480&quot; allowfullscreen=&quot;&quot; class=&quot;youtube-player&quot; src=&quot;//www.youtube.com/embed/lUAkYkW0_h8?wmode=transparent&amp;amp;amp;autoplay=0&amp;amp;amp;rel=0&amp;amp;amp;showinfo=0&amp;amp;amp;autohide=1&amp;amp;amp;color=white&amp;amp;amp;&quot; type=&quot;text/html&quot;&gt;&lt;/iframe&gt;
  &lt;figcaption&gt;2015 December Deadz (275x4)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;&lt;iframe width=&quot;360&quot; height=&quot;480&quot; allowfullscreen=&quot;&quot; class=&quot;youtube-player&quot; src=&quot;//www.youtube.com/embed/VdZn_FRxY7k?wmode=transparent&amp;amp;amp;autoplay=0&amp;amp;amp;rel=0&amp;amp;amp;showinfo=0&amp;amp;amp;autohide=1&amp;amp;amp;color=white&amp;amp;amp;&quot; type=&quot;text/html&quot;&gt;&lt;/iframe&gt;
  &lt;figcaption&gt;2014 December Deadz (305x6)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;hr /&gt;
</description>
        <pubDate>Thu, 31 Dec 2015 14:00:00 -0800</pubDate>
        <link>www.anton23.com/exercise/2015/12/31/december-deadz-2015/</link>
        <guid isPermaLink="true">www.anton23.com/exercise/2015/12/31/december-deadz-2015/</guid>
        
        
        <category>exercise</category>
        
      </item>
    
      <item>
        <title>Man Shoes</title>
        <description>&lt;p&gt;There comes a time when a guy has to graduate from sneakers. After doing research on what shoes I’d like to partake in for the next years of my life, I’ve discovered bucks, bluchers, and loafers.&lt;/p&gt;

&lt;h2 id=&quot;choices-choices-choices&quot;&gt;Choices, choices, choices…&lt;/h2&gt;

&lt;p&gt;I’m a shorts man. It’s the most comfortable attire for me because I have thick legs (thanks for squatting). For this reason, I’ve decided to incorporate shoes that can work with shorts. After going thorough Reddit’s MaleFashionAdvice sub, I’ve discovered loafers, bluchers, and bucks. Am now learning how to incorporate them in my wardrobe.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Loafers.&lt;/strong&gt; There are &lt;a href=&quot;https://www.reddit.com/r/malefashionadvice/comments/1ansx6/penny_loafers_3_in_a_series_of_springsummer_boat/&quot;&gt;various kinds of loafers&lt;/a&gt;.  However, beefroll penny loafers appeal to me the most. The contrast between the stitches and the material give a more casual vibe for me.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/beefroll.jpg&quot; width=&quot;250&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Bluchers.&lt;/strong&gt;  Bluchers are lace-up shoes and they are the casual versions of oxford shoes – really formal dress shoes.  A thorough &lt;a href=&quot;/assets/shoe_jargon.jpg&quot;&gt;definition between bluchers and oxfords can be seen on this link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Furthermore, Brogues shoes are shoes with perforation. I’ve discovered that blucher brogues can go well with shorts.  I am set to own a pair of blucher brogues with wingtip perforation.  Wingtip is one of &lt;a href=&quot;http://perfectgentlemansa.blogspot.com/2010/10/brogues-vs-wingtips.html&quot;&gt;several brogue perforation styles&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Bucks.&lt;/strong&gt; Bucks are shoes made of suede or nubuck and has a blucher-type of lacing. They’re pretty versatile as long as it’s not raining or wet – especially since suede/nubuck don’t go well with wet weather.  Most common colors are tan and white. &lt;a href=&quot;https://www.reddit.com/r/malefashionadvice/comments/p7usf/shoe_guide_v20/&quot;&gt;More bucks definiton can be found here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/bucks_shoes.jpg&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 22 Nov 2015 06:43:59 -0800</pubDate>
        <link>www.anton23.com/style/2015/11/22/man-shoes/</link>
        <guid isPermaLink="true">www.anton23.com/style/2015/11/22/man-shoes/</guid>
        
        
        <category>style</category>
        
      </item>
    
      <item>
        <title>T-mobile Cellphone</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://imgur.com/xhsuWCJ.jpg&quot; alt=&quot;drawing&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;So you’re interested in maximizing your T-mobile $30 prepaid plan. Here’s the down-low…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you have:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Unlimited Data – wherein the first 5GB is at 4G LTE speed, and anything after is 2G speed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Unlimited Texting&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;100 Minutes of Talk Time – any minute that exceeds is billed at 10 cents.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As you can see from the above, items 1 and 2 should never be a problem. It’s item 3 that can be tricky.  Below are the tips I use to go around it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to Maximize:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Accept the reality&lt;/strong&gt; that there would be months when you will exceed 100 minutes of talk time. – Some months you tend to talk more, for example, during the holidays. By accepting this fact, you will be more open-minded about all possible solutions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Always have an extra $10 load in your sim card.&lt;/strong&gt; Since there would be months when you will go over your talk time, the best you could is to be prepared by carrying some extra amount in your account. If you exceed by 30 minutes, that’s an extra 3 dollars. If you exceed by 1 hour, that’s only 6 dollars. Paying $33 or $36 in one month is still cheaper than the $40, $50, or $60 plans.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Install Google’s Hangout App and Hangout Dialer App on your phone.&lt;/strong&gt; Google Hangout allows you to make free outgoing calls with a U.S. or Canada area code.  You can also make free phone calls via your Gmail that uses Google Hangout.  I use Google Hangouts especially when calling credit card companies, doctors, and the like.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Install Whatsapp.&lt;/strong&gt; Whatsapp allows free calls to anyone in the world as long as the recipient is also using Whatsapp.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Buy your refill card from grocery stores.&lt;/strong&gt; Well, this suggestion only works if you have a credit card that gives you cashback from grocery stores.  My current credit card gives me 3% cashback.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Well, if you made it this far, send me a text message and ask for what else I have in store for you!&lt;/p&gt;

</description>
        <pubDate>Fri, 30 Oct 2015 07:43:59 -0700</pubDate>
        <link>www.anton23.com/frugal/2015/10/30/tmobile-cellphone/</link>
        <guid isPermaLink="true">www.anton23.com/frugal/2015/10/30/tmobile-cellphone/</guid>
        
        
        <category>frugal</category>
        
      </item>
    
      <item>
        <title>How To Improve Daily Decision Making by Avoiding 4 Cognitive Biases</title>
        <description>&lt;p&gt;Study shows that there are many biases in our decision-making process. Below are the top four biases that cloud judgment.&lt;/p&gt;

&lt;h2 id=&quot;self-serving-bias&quot;&gt;1. Self-serving bias.&lt;/h2&gt;

&lt;p&gt;People attribute sucesses to moslty themselves and that all failures are due to others’ shortcomings.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Pros: Protects self-esteem (and lessens depression)&lt;/li&gt;
  &lt;li&gt;Cons: Can’t learn from mistakes and improve (because one doesn’t take responsibility for failures)&lt;/li&gt;
  &lt;li&gt;How to Overcome: Be with close friends who can call you out and keep you grounded.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cognitive-fluency&quot;&gt;2. Cognitive Fluency.&lt;/h2&gt;

&lt;p&gt;It’s how easy an idea is to process and understand; the more fluent the idea, the more we unconsciously trust it.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Pros: Can be used to influence other people.&lt;/li&gt;
  &lt;li&gt;Cons: Whether something is easy has nothing to do with truth – which lead to an &lt;strong&gt;illusion of truth&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;How to Overcome: If something sounds too good, question it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;sunk-cost-fallacy&quot;&gt;3. Sunk-cost Fallacy.&lt;/h2&gt;

&lt;p&gt;The idea that people are more likely to endure something that already sucks if they’ve already invested so much into it. As opposed to cutting loses and moving on.&lt;/p&gt;

&lt;p&gt;This fallacy stems from our intense aversion to loss.  The thought that we wasted resources motivates us to carry on, even if it’s clearly a loss cause.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How to Overcome: Focus on future cost and benefits &lt;strong&gt;not&lt;/strong&gt; past losses.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;confirmation-bias&quot;&gt;4. Confirmation Bias.&lt;/h2&gt;

&lt;p&gt;You only search for evidence that confirms your beliefs.  This explains why so many people stick to many unscientific beliefs.&lt;/p&gt;

&lt;p&gt;Another consequence is that the framing of question is vital.  &lt;em&gt;Are you happy with your life?&lt;/em&gt; vs. &lt;em&gt;Are you unhappy with your life?&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How to Overcome: Search for &lt;strong&gt;contradictory&lt;/strong&gt; evidence.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; allowfullscreen=&quot;&quot; class=&quot;youtube-player&quot; src=&quot;//www.youtube.com/embed/3Ux3pm6UfCo?wmode=transparent&amp;amp;amp;autoplay=0&amp;amp;amp;rel=0&amp;amp;amp;showinfo=0&amp;amp;amp;autohide=1&amp;amp;amp;color=white&amp;amp;amp;&quot; type=&quot;text/html&quot;&gt;&lt;/iframe&gt;
  &lt;figcaption&gt;2014 September Squatz (245x3)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;hr /&gt;
</description>
        <pubDate>Thu, 28 May 2015 07:00:00 -0700</pubDate>
        <link>www.anton23.com/meditate/2015/05/28/four-cognitive-biases/</link>
        <guid isPermaLink="true">www.anton23.com/meditate/2015/05/28/four-cognitive-biases/</guid>
        
        
        <category>meditate</category>
        
      </item>
    
      <item>
        <title>Angular</title>
        <description>&lt;h2 id=&quot;why-angular&quot;&gt;Why Angular?&lt;/h2&gt;

&lt;p&gt;If you’re using JavaScript to create a dynamic website, Angular is a good choice.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Angular helps you organize your JavaScript&lt;/li&gt;
  &lt;li&gt;Angular helps create responsive (as in fast) websites&lt;/li&gt;
  &lt;li&gt;~~Angular plays well with jQuery~~&lt;/li&gt;
  &lt;li&gt;Angular is easy to test&lt;/li&gt;
  &lt;li&gt;Angular is “responsive” – only requests the information it needs (hence; no need to load an entire page)&lt;/li&gt;
  &lt;li&gt;Modern API-Driven Application – like the one being built in the code school course&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-is-angular-js&quot;&gt;What is Angular JS?&lt;/h2&gt;

&lt;p&gt;A client-side JavaScript Framework for adding interactivity to HTML.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Directives&lt;/strong&gt; is used to tell our HTML when to trigger our JavaScript.  We add behavior to our HTML through Directives.  It is how we bind the behavior. (I know, I know. You get it!)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Modules&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Where we write pieces of our Angular application, and keep our code encapsulated.&lt;/li&gt;
  &lt;li&gt;Makes our code more maintainable, testable, and readable.&lt;/li&gt;
  &lt;li&gt;Where we define dependencies for our app.&lt;br /&gt;
&lt;img src=&quot;http://i.imgur.com/m08hpjY.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;http://i.imgur.com/oFQopox.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Expressions&lt;/strong&gt; allow you to insert dynamic values into your HTML. ``&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Controllers&lt;/strong&gt; are where we define our app’s behavior by defining functions and values. The scope of the controller is inside the DOM element it’s attached to.&lt;br /&gt;
&lt;img src=&quot;http://i.imgur.com/QNLkJR8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;!-- tsk --&gt;
&lt;!-- Defaul Backbone `parse` just returns response, so we edit it like so...

    var TodoItem = Backbone.Model.extend({
      parse: function(response){
    return response.todo; }
    });
 --&gt;

&lt;hr /&gt;
</description>
        <pubDate>Mon, 11 May 2015 07:00:00 -0700</pubDate>
        <link>www.anton23.com/career/2015/05/11/angular/</link>
        <guid isPermaLink="true">www.anton23.com/career/2015/05/11/angular/</guid>
        
        
        <category>career</category>
        
      </item>
    
      <item>
        <title>The steaks are high</title>
        <description>&lt;p&gt;Since I’ve started living the “simple life” back in 2013, the majority of my diet consists of eggs, steamed fish, steamed chicken, and steamed vegetables.  As anyone could imagine, steamed anything doesn’t really taste too well because you lose all of the flavors – which I was fine with because the food is clean, food cooks fast, and cleaning is a breeze.&lt;/p&gt;

&lt;p&gt;However, recently I started to feel that I need to add diversity into my diet while still keeping it clean (i.e., no processed foods).  So occasionally, I’d go and order some piece of steak at a restaurant.  However, this left me unsatisfied for the following reasons: 1.) The portions are too small and overpriced for their size, and 2.) I would need to spend time to drive out, order, and wait for it to be ready.   Needless to say, the ROI is not worth it.&lt;/p&gt;

&lt;p&gt;So I thought, why not learn how to cook steaks properly.  After searching through some reddit posts on how to cook steaks, I was brought to &lt;a href=&quot;http://www.seriouseats.com/2012/12/the-food-lab-complete-guide-to-pan-seared-steaks.html&quot;&gt;this site&lt;/a&gt;.  What I like about it that it’s simple: pan-seared steak. No oven necessary. And below is my take away…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. The tools.&lt;/strong&gt;  I plan to learn the ways of the cast-iron skillet (I got it from Amazon).  Also, I’ll be using a thermometer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. The Cut.&lt;/strong&gt; Ribeye, New York Strip, Tenderloin, and T-bone.  In that order.  T-bone is ought to be avoided (if possible) because it requires a more advanced technique of cooking due to the bone.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. The Grade.&lt;/strong&gt; All beef that’s sold in the U.S. is graded by the United States Department of Agriculture on a scale according to its tenderness and degree of marbling. The grades are: Prime, Choice, Select, and Canner.  Only about 2% of the beef sold in the US is Prime.  Choice and Select are what you find supermarkets. Canner is at school lunches and dog food.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. The Thickness.&lt;/strong&gt; Try to go for at least 1.5 inch in thickness.  &lt;em&gt;“Without an adequately thick steak, it’s very difficult to get that contrast between exterior and interior that is so desirable. Thin, thin steaks will tend to overcook before they can finish developing a nice crust.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Aging.&lt;/strong&gt; This is more advanced for the basic cook (so I’ll leave this out for now). In fact, it is pretty much impossible to dry age properly at home.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Bone-in, Bone-out.&lt;/strong&gt;  This is pretty minor.   A bone accomplishes two things: It prevent some moisture loss by reducing the surface area of a steak, and it keeps that section of the steak from overcooking by acting as an insulator.  Sure there’s that extra moist, but you’ll have to learn the ways of basting to ensure the meat in the bone area gets cooked properly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. The Salt.&lt;/strong&gt; USE KOSHER SALT, not regular table salt.  Season it at least overnight.  A couple of days or more if possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. Cook with Oil. Add butter later.&lt;/strong&gt;  Milk proteins in butter get burn when too hot.  Butter is best added to the pan a few minutes before it’s done cooking.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. The Flipping.&lt;/strong&gt; It’s actually slightly better to flip often.  Nonetheless, this is minutiae.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. The Baste.&lt;/strong&gt; This is basically spooning hot fat over your meat.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10. Add Aromatics.&lt;/strong&gt; After the butter is melted, add a handful of herbs such as thyme or rosemary, along with some sweet alliums like shallots or garlic. They pop and sputter, releasing their aromas and rapidly infusing the fat with their flavor. When you baste, you’re adding that aroma with each spoonful.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;11. Let it Rest.&lt;/strong&gt; &lt;em&gt;“If you cut the steak open as soon as it comes off the grill, the juice has only one place to go — onto your plate. On the other hand, allow the steak to rest until its temperature has normalized, and the juices will distribute themselves more evenly throughout its interior.”&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
        <pubDate>Sat, 28 Mar 2015 07:00:01 -0700</pubDate>
        <link>www.anton23.com/food/2015/03/28/steaks-are-high/</link>
        <guid isPermaLink="true">www.anton23.com/food/2015/03/28/steaks-are-high/</guid>
        
        
        <category>food</category>
        
      </item>
    
      <item>
        <title>December Deadz</title>
        <description>&lt;p&gt;I originally planned to write this in December… but alas, laziness and procrastination got in the way and now it’s March.  Nonetheless, better late than never.&lt;/p&gt;

&lt;p&gt;As of early December, I’m pulling 305 lbs in 6 reps (for my first set).  To keep thing simple, I’ll keep track of the first set only throughout my progression. Keep in mind that this usually done after a good set of squats.  In the video below, I’m highly certain that I did it after squats.  I’ll explicitly make a note for it next time.&lt;/p&gt;

&lt;p&gt;For next December (the one in 2015), I’d like to hit 4 plates for 1 – this is about 405 lbs total.  Though, this might sound too ambitious, I think I might be able to come close.  I’m basing this judgment from the graph of my previous numbers (which have been converted to 1 rep max).  Peace.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/eAAPnBF.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;figure&gt;&lt;iframe width=&quot;360&quot; height=&quot;480&quot; allowfullscreen=&quot;&quot; class=&quot;youtube-player&quot; src=&quot;//www.youtube.com/embed/VdZn_FRxY7k?wmode=transparent&amp;amp;amp;autoplay=0&amp;amp;amp;rel=0&amp;amp;amp;showinfo=0&amp;amp;amp;autohide=1&amp;amp;amp;color=white&amp;amp;amp;&quot; type=&quot;text/html&quot;&gt;&lt;/iframe&gt;
  &lt;figcaption&gt;2014 December Deadz (305x6)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;hr /&gt;
</description>
        <pubDate>Sat, 28 Mar 2015 07:00:00 -0700</pubDate>
        <link>www.anton23.com/exercise/2015/03/28/december-deadz/</link>
        <guid isPermaLink="true">www.anton23.com/exercise/2015/03/28/december-deadz/</guid>
        
        
        <category>exercise</category>
        
      </item>
    
      <item>
        <title>Investing... Here we go again.</title>
        <description>&lt;h2 id=&quot;july-note&quot;&gt;July Note…&lt;/h2&gt;

&lt;p&gt;I’ve looked into investing pretty heavily about 5 years ago.  I wish I made notes of the terms that ought to be remembered and the approach I followed.  Oh well, it’s not too late to refresh my memory and make notes.  So here goes…&lt;/p&gt;

&lt;p&gt;It’s 2014.  The approach I’ll be using is making my portfolio.&lt;/p&gt;

&lt;p&gt;First off, reading…&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;I Will Teach You To Be Rich – as far as investing is concerned, you cannot beat the market and you’re better off investing in index funds because of the low fees.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The Boglehead’s Guide to Investing&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A Random Walk Down Wall Street&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;november-note&quot;&gt;November Note…&lt;/h2&gt;
&lt;p&gt;Since I’ve been procrastinating  reading those fun reads mentioned above, I just went straight to the meat and bones.&lt;br /&gt;
The first resource I went to was &lt;a href=&quot;https://www.reddit.com/r/personalfinance/wiki/commontopics&quot;&gt;reddit’s /r/personalfinance sub&lt;/a&gt;.&lt;br /&gt;
Here’s the plan of action:&lt;/p&gt;

&lt;p&gt;###1a. Emergency Fund&lt;br /&gt;
This is typically the basic Savings Account.  It’s a fund where you can easily take money from&lt;br /&gt;
 for the unexpecteds: job loss, appliance replacement,&lt;br /&gt;
medical procedures, unexpected travel, and more.  Since it’s easy to have access to&lt;br /&gt;
the money, its downside is that the interest you earn won’t be high.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What’s the ideal size for an emergency fund?&lt;/strong&gt; If you’re already an expert in your career (i.e., you’re&lt;br /&gt;
sought-after), a fund for 6-months of expenses will work.  However, if you feel you’re&lt;br /&gt;
in the early stages of your career (i.e., a lot of uncertainties), a fund for 12 months of expenses&lt;br /&gt;
is a good bet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What kinds of accounts should an emergency fund in be?&lt;/strong&gt;  Emergency funds should be held in safe investments&lt;br /&gt;
that can be liquidated in a hurry – Savings &amp;amp; Checking account, CDs (Certificate of Deposits), and I-bonds.&lt;/p&gt;

&lt;p&gt;Another good way letting your money work for you is to have the E-Fund in tiers as seen below, &lt;br /&gt;
so you can take advantage of the higher interest rates that some accounts offer.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tier 1: Checking account – holds 2 month worth of expenses.&lt;/li&gt;
  &lt;li&gt;Tier 2: Savings account – holds 4 month worth of expenses.&lt;/li&gt;
  &lt;li&gt;Tier 3: CDs and I-bonds – holds 6-12 month worth of expenses.
    &lt;ul&gt;
      &lt;li&gt;The drawback of these accounts require a relatively longer investment time (e.g., 6 months)&lt;br /&gt;
for it to yield interest.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;###1b. Higher Education Expenses&lt;/p&gt;

&lt;p&gt;###2. Employer-sponsored matching funds&lt;br /&gt;
You want to ensure you get the guaranteed free money to its full-extent.  That’s all there is to it.&lt;/p&gt;

&lt;p&gt;###3. Pay down high interest debts&lt;br /&gt;
I’ve heard the rule of thumb that over 6% is &lt;strong&gt;high&lt;/strong&gt;, under 4% is low, and between that you trust your gut.&lt;br /&gt;
In context, the average inflation rate is 3%  and the average stock market return is 7%. Hence,&lt;br /&gt;
by paying those high interest rates, you’re ensuring yourself to not lose money by that much.&lt;/p&gt;

&lt;p&gt;###4. Additional savings for retirement in an IRA&lt;br /&gt;
&lt;strong&gt;Why contribute to an IRA? Shouldn’t I go back to my 401k?&lt;/strong&gt; Choose IRAs, since they are opened by individuals with a provider of your choice, are generally better than 401k plans because you have more fund choices. Low cost providers like Vanguard, Fidelity, and Schwab all offer low expense ratio index funds to invest in. However, if you have an excellent 401k plan such as the U.S. Federal government’s Thrift Savings Plan or work for a large company that has negotiated institutional rates for the mutual funds in their 401k plan, you may want to “Maximize contributions to employer-sponsored plan” (i.e., 401k) first and return to your IRA contribution afterwards.&lt;/p&gt;

&lt;h3 id=&quot;a-maximize-contributions-to-employer-sponsored-plan&quot;&gt;5a. Maximize contributions to employer-sponsored plan&lt;/h3&gt;
&lt;p&gt;After covering all bases, now is a good time to maximize the contributions to 401k.  &lt;br /&gt;
&lt;a href=&quot;https://www.reddit.com/r/personalfinance/wiki/401k&quot;&gt;Here’s a link to tips on how-to&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;b-save-for-non-retirement-goals&quot;&gt;5b. Save for non-retirement goals&lt;/h3&gt;
&lt;p&gt;Well, this is a toss-up compared to 6, since both deals with paying yourself either way.&lt;br /&gt;
Non-retirement goals include paying down a house sooner, vacations, vehicles, babies, &lt;br /&gt;
and the like.  Just keep in mind that (especially for a young person) the more time your money has to grow, the more powerful the effects of compounding will be on your retirement savings.&lt;/p&gt;

&lt;h3 id=&quot;save-for-retirement-in-a-taxable-account&quot;&gt;6. Save for retirement in a taxable account&lt;/h3&gt;
&lt;p&gt;If there’s still lump sump after covering all the bases, open a taxable brokerage account and invest according to your retirement asset allocation. You’ll want to have a decent grasp on &lt;a href=&quot;http://www.bogleheads.org/wiki/Asset_allocation_in_multiple_accounts&quot;&gt;asset allocation in multiple accounts&lt;/a&gt; and &lt;a href=&quot;http://www.bogleheads.org/wiki/Principles_of_tax-efficient_fund_placement&quot;&gt;tax-efficient fund placement.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;december-note&quot;&gt;December Note…&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;“Not All Income are Taxed the same.”&lt;/em&gt;  This is what I learned after watching &lt;a href=&quot;http://www.bogleheads.org/wiki/Video:Bogleheads%C2%AE_investment_philosophy&quot;&gt;Boglehead’s Investment Philosophy&lt;/a&gt; where the basic building blocks of investing is discussed.&lt;/p&gt;

&lt;hr /&gt;
</description>
        <pubDate>Sun, 16 Nov 2014 06:00:00 -0800</pubDate>
        <link>www.anton23.com/investing/2014/11/16/investing-again/</link>
        <guid isPermaLink="true">www.anton23.com/investing/2014/11/16/investing-again/</guid>
        
        
        <category>investing</category>
        
      </item>
    
      <item>
        <title>Anatomy of Backbone B1</title>
        <description>&lt;h2 id=&quot;more-models&quot;&gt;1. More Models&lt;/h2&gt;

&lt;h3 id=&quot;parsing-non-standard-json-into-your-models&quot;&gt;Parsing non-standard JSON into your Models&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Response from Server
{todo:{id: 1, description: &#39;Pick up milk&#39;, status: &#39;incomplete&#39; }}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!-- tsk --&gt;
&lt;p&gt;Defaul Backbone &lt;code class=&quot;highlighter-rouge&quot;&gt;parse&lt;/code&gt; just returns response, so we edit it like so…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var TodoItem = Backbone.Model.extend({
  parse: function(response){
return response.todo; }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!-- tsk --&gt;
&lt;p&gt;Instantiating Models, doesn’t call parse by default. So we call it with &lt;code class=&quot;highlighter-rouge&quot;&gt;parse: true&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var todoItem = new TodoItem({
  todo:{id: 1, description: &#39;Pick up milk&#39;, status: &#39;incomplete&#39;}
}, { parse: true });
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;changing-attribute-names&quot;&gt;Changing Attribute Names&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Response from Server
{todo:{id: 1, desc: &#39;Pick up milk&#39;, status: &#39;incomplete&#39;}}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var TodoItem = Backbone.Model.extend({
  parse: function(response){
    response = response.todo;
    response.description = response.desc;
    delete response.desc;
    return response;
  }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;sending-json-back-to-the-server&quot;&gt;Sending JSON back to the Server&lt;/h3&gt;

&lt;p&gt;Defaut Backbone &lt;code class=&quot;highlighter-rouge&quot;&gt;toJSON()&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var TodoItem = Backbone.Model.extend({
  toJSON: function(){
    return _.clone(this.attributes);
  }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Overridng the &lt;code class=&quot;highlighter-rouge&quot;&gt;toJSON()&lt;/code&gt; function like so…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var TodoItem = Backbone.Model.extend({
  toJSON: function(){
    var attrs = _.clone(this.attributes);
    attrs.desc = attrs.description;
    attrs = _.pick(attrs, &#39;desc&#39;, &#39;status&#39;);  //returns an object with desc &amp;amp; status properties
    return { todo: attrs };
} });
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then, replace Render View attributes from &lt;code class=&quot;highlighter-rouge&quot;&gt;toJSON()&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;attributes&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var TodoView = Backbone.View.extend({
  render: function(){
    this.$el.html(this.template(this.model.attributes));  // this used to be .toJSON()
    return this;
  }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;unconventional-id-attribute&quot;&gt;Unconventional ID Attribute&lt;/h3&gt;

&lt;p&gt;Common way:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var todoItem = new TodoItem({id: 1})
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Workaround:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var TodoItem = Backbone.Model.extend({
  idAttribute: &#39;_id&#39;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;customizing-collections&quot;&gt;2. Customizing Collections&lt;/h2&gt;

&lt;h3 id=&quot;review-fetching-data-from-the-server&quot;&gt;Review Fetching Data from the Server&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// URL to get JSON data from
var TodoItems = Backbone.Collection.extend({
  url: &#39;/todos&#39;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Populate collection from server
todoItems.fetch();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Response from server after calling `fetch()`
[
  {description: &#39;Pick up milk.&#39;, status: &#39;incomplete&#39;, id: 1},
  {description: &#39;Get a car wash.&#39;, status: &#39;incomplete&#39;, id: 2}
]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;handling-non-standard-response-from-server&quot;&gt;Handling non-standard Response from Server&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;todoItems.fetch()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//Response from Server
{
  &quot;total&quot;: 25, &quot;per_page&quot;: 10, &quot;page&quot;: 2,
  &quot;todos&quot;: [ {&quot;id&quot;: 1, ... }, {&quot;id&quot;: 2, ... } ]
}   
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Common Way to parse:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var TodoItems = Backbone.Collection.extend({
  parse: function(response){
    return response;
  }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;New Way to accommodate non-standard format:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var TodoItems = Backbone.Collection.extend({
  parse: function(response){
    this.perPage = response.per_page;
    this.page = response.page;
    this.total = response.total; return response.todos;
  } 
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;fetching-with-extra-parameters&quot;&gt;Fetching with Extra Parameters&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;todoItems.fetch({data: { page: 6 }}); // GET /todos?page=6
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;todoItems.fetch({data: {page: todoItems.page + 1}}); // GET /todos?page=2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Review on Collection View&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var TodosView = Backbone.View.extend({
  initialize: function(){
    this.collection.on(&#39;reset&#39;, this.render, this);
  },
  render: function(){
    this.addAll();
    return this;
  },
  addAll: function(){
    this.$el.empty();
    this.collection.forEach(this.addOne);
  },
  addOne: function(todoItem){
    var todoView = new TodoView({model: todoItem});
    this.$el.append(todoView.render().el);
  }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Render the Next Link&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var TodosView = Backbone.View.extend({
  template: _.template(&#39;&amp;lt;a href=&quot;#/todos/p&amp;lt;%= page %&amp;gt;&quot;&amp;gt;next page&amp;lt;/a&amp;gt;&#39;),  // !!! Add this line

  initialize: function(){
    this.collection.on(&#39;reset&#39;, this.render, this);
  },

  render: function(){
    this.addAll();
    this.$el.append(this.template({page: this.collection.page + 1}); // !!! Add this line too
    return this;
  },
  ... 
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Review our Router&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var TodoApp = new (Backbone.Router.extend({
  routes: {
    &quot;&quot;: &quot;index&quot;
  },
  initialize: function(){
    this.todoItems = new TodoItems();
    this.todosView = new TodosView({collection: this.todoItems});
    this.todosView.render();
    $(&#39;#app&#39;).append(this.todosView.el);
  },
  index: function(){
    this.todoItems.fetch();
  }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Implementing the Base Route&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var TodoApp = new (Backbone.Router.extend({
  routes: {
    &quot;todos/p:page&quot;: &quot;page&quot;,  // !!! Add this line
      &quot;&quot;: &quot;index&quot;
  },

  page: function(page){  // !!! Add this function too
    this.todoItems.fetch({data: {page: page}});
  },

  initialize: function(){
    this.todoItems = new TodoItems();
    this.todosView = new TodosView({collection: this.todoItems});
    this.todosView.render();
    $(&#39;#app&#39;).append(this.todosView.el);
  },

  index: function(){
    this.todoItems.fetch();
  }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;sorting-collections&quot;&gt;Sorting Collections&lt;/h3&gt;

&lt;p&gt;Sort by Comparator &lt;code class=&quot;highlighter-rouge&quot;&gt;status&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var TodoItems = Backbone.Collection.extend({
  comparator: &#39;status&#39;;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;todoItems.fetch(); // When this is called, the collection gets sorted by status
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Sort by Function&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var TodoItems = Backbone.Collection.extend({
  comparator: function(todo1, todo2) {
    return todo1.get(&#39;status&#39;) &amp;lt; todo2.get(&#39;status&#39;)
  }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// When this is called, the collection gets sorted by status in reverse order
todoItems.fetch(); 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;aggregate-values&quot;&gt;Aggregate Values&lt;/h3&gt;

&lt;p&gt;Display amount of completed todo items&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var TodoItems = Backbone.Collection.extend({
  completedCount: function() {
    return this.where({status: &#39;complete&#39;}).length;
  }
});

todoItems.completedCount(); // This returns 1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;real-routes&quot;&gt;3. Real Routes&lt;/h2&gt;

&lt;h3 id=&quot;optional-routes&quot;&gt;Optional Routes&lt;/h3&gt;

&lt;p&gt;Use parentheses for optional parts like so: &lt;code class=&quot;highlighter-rouge&quot;&gt;(/p:page)&lt;/code&gt;.  &lt;br /&gt;
Optional Trailing Slash at the end of the URI can be accommodated by adding &lt;code class=&quot;highlighter-rouge&quot;&gt;(/)&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var TodoRouter = new (Backbone.Router.extend({ 
  routes: {
    &#39;search/:query(/p:page)(/)&#39;: &#39;search&#39;,
  },
  search: function(query, page) {
    page = page || 0;
    console.log(query);
    console.log(page);
  } 
}));
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Calling the above would yield...
TodoRouter.navigate(&#39;search/milk&#39;, {trigger: true});  // ==&amp;gt; &quot;milk&quot;, 0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TodoRouter.navigate(&#39;search/milk/p2&#39;, {trigger: true}); // ==&amp;gt; &quot;milk&quot;, 2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// For the trailing slash
TodoRouter.navigate(&#39;search/milk/p2/&#39;, {trigger: true}) ; // ==&amp;gt; &quot;milk&quot;, 2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;URI with Spaces Gotcha&lt;/p&gt;

&lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;decodeURIComponent&lt;/code&gt; like so…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var TodoRouter = new (Backbone.Router.extend({
  routes: {
    &#39;search/:query(/p:page)(/)&#39;: &#39;search&#39;,
  },
  search: function(query, page) {
    page = page || 0;
    query = decodeURIComponent(query);
    console.log(query);
    console.log(page);
  }
}));
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Encoded input ==&amp;gt; Decoded output
TodoRouter.navigate(&#39;search/Hello%20World/p2&#39;, {trigger: true})  // ==&amp;gt; &quot;Hello World&quot;, 2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;regex-in-routes&quot;&gt;Regex in Routes&lt;/h3&gt;

&lt;p&gt;To handle regex, we use &lt;code class=&quot;highlighter-rouge&quot;&gt;Router.route&lt;/code&gt; format…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var TodoRouter = new (Backbone.Router.extend({
  initialize: function(){ 
    this.route(/^todos\/(\d+)$/, &#39;show&#39;);
  },

  show: function(id) {
    console.log(&quot;id = &quot; + id);
  } 
}));
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;!!! Needs more data&lt;/p&gt;

&lt;h3 id=&quot;catch-all-routes&quot;&gt;Catch-all Routes&lt;/h3&gt;

&lt;p&gt;Alert user when no route matches&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var TodoRouter = Backbone.Router.extend({
  routes: {
    &#39;*path&#39;: &#39;notFound&#39;
  },
  notFound: function(path) {
    alert(&#39;Sorry!  There is no content here.&#39;);
} });
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TodoRouter.navigate(&#39;nothinghere&#39;, {trigger: true});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;file-path-route&quot;&gt;File Path Route&lt;/h3&gt;

&lt;p&gt;Accept a file path and get its parts&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var TodoRouter = new (Backbone.Router.extend({
  routes: {
    &#39;file/*path&#39;: &#39;file&#39;
  },
    file: function(path) {
    var parts = path.split(&quot;/&quot;);
    console.log(parts);
  } 
}));
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TodoRouter.navigate(&quot;file/this/is/a/file.txt&quot;, {trigger: true});
// ==&amp;gt; [&quot;this&quot;, &quot;is&quot;, &quot;a&quot;, &quot;file.txt&quot;]
￼￼
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;varying-views&quot;&gt;4. Varying Views&lt;/h2&gt;

&lt;h3 id=&quot;view-initialization-options-review&quot;&gt;View Initialization Options Review&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//Pass in the Model
var todoView = new TodoView({
  model: todoItem
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!-- tsk --&gt;
&lt;p&gt;//Pass in the Collection&lt;br /&gt;
var todoView = new TodoView({&lt;br /&gt;
  collection: todoItems&lt;br /&gt;
});&lt;/p&gt;

&lt;h3 id=&quot;using-existing-dom-elements-as-a-parameter&quot;&gt;Using Existing DOM Elements as a parameter&lt;/h3&gt;

&lt;p&gt;You can use the existing &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt;  (or any element) in the DOM instead of &lt;br /&gt;
having the view instance to create a new one.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//HTML
&amp;lt;div class=&quot;todo&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var TodoView = Backbone.View.extend({
  template: _.template(&quot;&amp;lt;%= description %&amp;gt;&quot;),
  render: function(){
    this.$el.html(this.template(this.model.attributes));
    return this;
  }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// !!! Take note of the `el` option
var todoView = new TodoView({model: todoItem, el: $(&#39;.todo&#39;)});  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;todoView.render(); // ==&amp;gt; &amp;lt;div class=&quot;todo&quot;&amp;gt;Pickup Milk.&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;custom-initialization-options&quot;&gt;Custom Initialization Options&lt;/h3&gt;

&lt;p&gt;Pass in an extra option.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var todoView = new TodoView({
  model: todoItem,
  user: currentUser
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Access extra options in initialize&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var TodoView = Backbone.View.extend({
  initialize: function(options){
    this.user = options.user;
  }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;escaping-user-content&quot;&gt;Escaping User Content&lt;/h3&gt;

&lt;p&gt;Rendering user supplied strings can lead to XSS attack.  You can use&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var TodoView = Backbone.View.extend({
template: _.template(&#39;&amp;lt;%= model.escape(&quot;description&quot;) %&amp;gt;&#39;),
render: function(){
this.$el.html(this.template({model: this.model}));
    return this;
  }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var todoView = new TodoView({model: todoItem});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;todoItem.set(&#39;description&#39;, &quot;&amp;lt;script src=&#39;attack.js&#39; /&amp;gt;&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When, &lt;code class=&quot;highlighter-rouge&quot;&gt;todoView.render().el&lt;/code&gt; is called, this outputs:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;todoView.render().el; // ==&amp;gt; &amp;lt;div&amp;gt;&amp;amp;lt;script src=&amp;amp;#x27;attack.js&amp;amp;#x27; /&amp;amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;passing-extra-options-to-event-handlers&quot;&gt;Passing Extra Options to Event Handlers&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;￼
var TodoView = Backbone.View.extend({
  template: _.template(&#39;&amp;lt;span&amp;gt;&amp;lt;%= description %&amp;gt;&amp;lt;/span&amp;gt;&#39;),
  initialize: function(){
    this.model.on(&#39;change:description&#39;, this.change, this);
  },
  render: function(){
    this.$el.html(this.template(this.model.attributes));
  },
  change: function(model, value, options){
      this.$(&#39;span&#39;).html(value);
    if (options.highlight !== false){
      this.$el.effect(&quot;highlight&quot;, {}, 1000);
    }
  }, 

});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To make change without firing off events, pass &lt;code class=&quot;highlighter-rouge&quot;&gt;silent: true&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;todoItem.set({description: &quot;Pickup Kids&quot;}, {silent: true});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To stop specific action (e.g., highlighting), edit the function above to accommodate&lt;br /&gt;
an &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; check, then pass that option&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;todoItem.set({description: &quot;Pickup Kids&quot;}, {highlight: false});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;view-event-cleanup&quot;&gt;View Event Cleanup&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Old Approach:&lt;/strong&gt; Using model to notify the view.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var TodoView = Backbone.View.extend({
  initialize: function() {
    this.model.on(&#39;change&#39;, this.render, this);
  }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When the view instance is removed using &lt;code class=&quot;highlighter-rouge&quot;&gt;todoView.remove()&lt;/code&gt;, this breaks&lt;br /&gt;
because Model still holds reference to the view.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;New Approach:&lt;/strong&gt; Use view to “listen to” model.  Added in Backbone 0.9.9&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var TodoView = Backbone.View.extend({
  initialize: function() {
    this.listenTo(this.model, &#39;change&#39;, this.render);
  }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;todoView.stopListening(); // Stops all listeners for this view instance
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;todoView.remove(); //Automatically calls stopListening()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;working-with-forms&quot;&gt;5. Working with Forms&lt;/h2&gt;

&lt;h3 id=&quot;the-plain-no-backbone-way&quot;&gt;The Plain (no Backbone) Way&lt;/h3&gt;

&lt;p&gt;Create an Ajax form for creating new Todos&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;form action=&quot;/todos&quot; method=&quot;POST&quot;&amp;gt;
    &amp;lt;input name=description value=&quot;What do you need to do?&quot; /&amp;gt; 
    &amp;lt;button&amp;gt;Save&amp;lt;/button&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Plain jQuery
$(&#39;button&#39;).click(function(e){
  e.preventDefault();
  var uri = $(&#39;form&#39;).attr(&#39;action&#39;);
  var description = $(&#39;input[name=description]&#39;).val();
  $.post(uri, {description: description});
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;the-backbone-way&quot;&gt;The Backbone Way&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var TodoItem = Backbone.Model.extend({
  urlRoot: &quot;/todos&quot;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var todoItem = new TodoItem({description: &quot;What do you need to do?&quot;}); 
todoItem.save({description: &#39;Pickup Kids.&#39;});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Build the Form with Backbone View&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var TodoForm = Backbone.View.extend({
  template: _.template(&#39;&amp;lt;form&amp;gt;&#39; +
    &#39;&amp;lt;input name=description value=&quot;&amp;lt;%= description %&amp;gt;&quot; /&amp;gt;&#39; +
    &#39;&amp;lt;button&amp;gt;Save&amp;lt;/button&amp;gt;&amp;lt;/form&amp;gt;&#39;),
  render: function(){
    this.$el.html(this.template(this.model.attributes));
    return this;
  } 
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var todoItem = new TodoItem({description: &quot;What do you need to do?&quot;});
var todoForm = new TodoForm({model: todoItem});
$(&#39;#app&#39;).html(todoForm.render().el);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This outputs:&lt;br /&gt;
    &amp;lt;form&amp;gt;&amp;lt;input name=description value=”What do you need to do?” /&amp;gt;&lt;br /&gt;
    &lt;button&gt;Save&lt;/button&gt;&amp;lt;/form&amp;gt;&lt;/p&gt;

&lt;h3 id=&quot;capture-button-click-and-return-key-to-save-model&quot;&gt;Capture Button Click and Return Key to Save Model&lt;/h3&gt;

&lt;p&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;submit&lt;/code&gt; allows processing on either click or pressing enter.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var TodoForm = Backbone.View.extend({
  template: _.template(&#39;&amp;lt;form&amp;gt;&#39; +
    &#39;&amp;lt;input name=description value=&quot;&amp;lt;%= description %&amp;gt;&quot; /&amp;gt;&#39; +
    &#39;&amp;lt;button&amp;gt;Save&amp;lt;/button&amp;gt;&amp;lt;/form&amp;gt;&#39;),
  events: {
    submit: &#39;save&#39;  // !!! You can also use &#39;click&#39; to use just &#39;click&#39;
  },
  save: function(e) {
    e.preventDefault();
    var newDescription = this.$(&#39;input[name=description]&#39;).val();
    this.model.save({description: newDescription});
  } 
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;reusing-form-to-edit-existing-todoitem&quot;&gt;Reusing Form to Edit existing TodoItem&lt;/h3&gt;

&lt;p&gt;Get existing TodoItem from already fetched collection&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var todoItem = todoItems.get(1); 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Pass in existing model&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var editTodoForm = new TodoForm({model: todoItem}); 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Replace ‘#app’ with the HTML of the form&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$(&#39;#app&#39;).html(editTodoForm.render().el); ￼
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;review-of-our-apps-router&quot;&gt;Review of our App’s Router&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;￼
var TodoApp = new (Backbone.Router.extend({
  routes: {
    &quot;&quot;: &quot;index&quot;
  },
  initialize: function(){
    this.todoItems = new TodoItems();
    this.todosView = new TodosView({collection: this.todoItems});
  },
  index: function(){
    this.todoItems.fetch();
    $(&#39;#app&#39;).html(this.todosView.render().el);
  }
}));
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;add-route-to-render-edit-form&quot;&gt;Add Route to render Edit Form&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var TodoApp = new (Backbone.Router.extend({
  routes: {
    &quot;&quot;: &quot;index&quot;,
    &quot;todos/:id/edit&quot;: &quot;edit&quot; // !!! Add this line
  },

  initialize: function(){
    this.todoItems = new TodoItems();
    this.todosView = new TodosView({collection: this.todoItems});
  },

  index: function(){
    this.todoItems.fetch();
    $(&#39;#app&#39;).html(this.todosView.render().el);
  }
  ￼￼
  edit: function(id){ // !!! Add this function
    var todoForm = new TodoForm({model: this.todoItems.get(id) });
    $(&#39;#app&#39;).html(todoForm.render().el);
  }
}));
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;add-route-to-render-new-form&quot;&gt;Add Route to render New Form&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var TodoApp = new (Backbone.Router.extend({
  routes: {
    &quot;&quot;: &quot;index&quot;, 
    &quot;todos/:id/edit&quot;: &quot;edit&quot;,
    &quot;todos/new&quot;: &quot;newTodo&quot;
  },

  ...

  newTodo: function(){
    var todoItem = new TodoItem({description: &quot;What do you have to do?&quot;});
    var todoForm = new TodoForm({model: todoItem});
    $(&#39;#app&#39;).append(todoForm.render().el);
  },
￼￼
  edit: function(id){
    var todoForm = new TodoForm({model: this.todoItems.get(id) });
    $(&#39;#app&#39;).html(todoForm.render().el);
  }
}));
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;get-back-to-the-list-after-saving-success-or-error&quot;&gt;Get Back to the List after saving &lt;strong&gt;success&lt;/strong&gt; or &lt;strong&gt;error&lt;/strong&gt;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var TodoForm = Backbone.View.extend({
  ...
  save: function(e) {
    e.preventDefault();
    var newDescription = this.$(&#39;input[name=description]&#39;).val(); 
    this.model.save({description: newDescription}, {
      success: function(model, response, options) {
        Backbone.history.navigate(&#39;&#39;, { trigger: true });
      }, 
      error: function(model, xhr, options){
        var errors = JSON.parse(xhr.responseText).errors;
        alert(&#39;Oops, something went wrong with saving the TodoItem: &#39; + errors);
      }
    });
  }
}); 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;app-organization&quot;&gt;6. App Organization&lt;/h2&gt;

&lt;h3 id=&quot;class-naming&quot;&gt;Class Naming&lt;/h3&gt;

&lt;p&gt;Before, everything is placed in the Global Scope, and this provides drawbacks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Leads to naming collisions&lt;/li&gt;
  &lt;li&gt;Need to put “what kind of object” it is in the name e.g. “TodoItemView”&lt;/li&gt;
  &lt;li&gt;Maintainability doesn’t scale with large applications&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var TodoItem = Backbone.Model.extend({});
var TodoItemView = Backbone.View.extend({}); 
var TodoItems = Backbone.Collection.extend({}); 
var TodoItemsView = Backbone.View.extend({});
var TodoRouter = Backbone.Router.extend({});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Use a Global Object for Namespace.  Create a single global object where everything is stored:&lt;/p&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var App = {
  Models: {},
  Views: {},
  Collections: {}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;App.Models.TodoItem = Backbone.Model.extend({}); 
App.Views.TodoItem = Backbone.View.extend({});
App.Collections.TodoItems = Backbone.Collection.extend({}); 
App.Views.TodoItems = Backbone.View.extend({});
App.TodoRouter = Backbone.Router.extend({});  //Store one-off objects on App
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Reference classes with the namespace&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var todoItem = new App.Models.TodoItem({...})
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;handle-links-outside-of-backbone-views&quot;&gt;Handle Links Outside of Backbone Views&lt;/h3&gt;

&lt;!-- tsk --&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&quot;/completed&quot;&amp;gt;Show Completed&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&quot;/support&quot;&amp;gt;Support&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Solution A: Using Plain jQuery&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$(&#39;a&#39;).click(function(e){
  e.preventDefault();
  Backbone.history.navigate(e.target.pathname, {trigger: true});
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Solution B: Move jQuery inside of the App Object and call &lt;code class=&quot;highlighter-rouge&quot;&gt;App.start()&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var App = {
Models: {}, Views: {}, Collections: {}, start: function(){
    $(&#39;a&#39;).click(function(e){
      e.preventDefault();
      Backbone.history.navigate(e.target.pathname, {trigger: true});
    });
    Backbone.history.start({pushState: true});
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$(function(){ App.start(); });
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Solution C: Make the App a Backbone View, so you can use event handler instead&lt;br /&gt;
when a link is clicked.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var App = Backbone.View.extend({ // !!! App now is a View Class
  Models: {},
  Views: {},
  Collections: {},

  events: { // !!! Use View event to handle clicks
    &#39;click a&#39;: function(e){
      e.preventDefault();
      Backbone.history.navigate(e.target.pathname, {trigger: true});
    }
  },

  start: function(){
    Backbone.history.start({pushState: true});
  } 
})
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var app = new App({el: document.body}); // Using body will capture everything
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Clean-up Solution C further by creating &lt;br /&gt;
instance without creating a class&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var App = new (Backbone.View.extend({  // !!! `new` here!
  ...
}))({el: document.body});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$(function(){ App.start(); }); ￼
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;skip-links&quot;&gt;Skip Links&lt;/h3&gt;

&lt;p&gt;Handle specific links by adding specificity&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&quot;/completed&quot; data-internal=&quot;true&quot;&amp;gt;Show Completed&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&quot;/support&quot;&amp;gt;Support&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!-- tsk --&gt;
&lt;p&gt;Event Handler&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
events: {
  &#39;click a[data-internal]&#39;: function(e){
    e.preventDefault();
    Backbone.history.navigate(e.target.pathname, {trigger: true});
  }
}
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;build-initial-html&quot;&gt;Build Initial HTML&lt;/h3&gt;

&lt;p&gt;Since we now have a View that encompasses the entire document body, &lt;br /&gt;
if we want we can put some template code in the App view which has some of the &lt;br /&gt;
initial HTML.  &lt;br /&gt;
￼&lt;br /&gt;
    var App = new (Backbone.View.extend({&lt;br /&gt;
      …&lt;br /&gt;
      template: _.template(‘&amp;lt;h1&amp;gt;ToDo List!&amp;lt;/h1&amp;gt;’ + ‘&amp;lt;div id=&quot;app&quot;&amp;gt;&amp;lt;/div&amp;gt;’),&lt;br /&gt;
      render: function(){&lt;br /&gt;
        this.$el.html(this.template());&lt;br /&gt;
      }&lt;br /&gt;
    }))({el: document.body});&lt;/p&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$(function(){
  App.render();
  App.start();
})
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This results in…&lt;/p&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;ToDo List!&amp;lt;/h1&amp;gt;
  &amp;lt;div id=&quot;app&quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;object-initialization&quot;&gt;Object Initialization&lt;/h3&gt;

&lt;p&gt;Inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;start&lt;/code&gt; method is also a good place to instantiate our collections, our views,&lt;br /&gt;
rendering out the views, and fetching the todo items.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var App = new (Backbone.View.extend({
  ...
  start: function(){
    var todos = new App.Collections.TodoItems();
    var todosView = new App.Views.TodoItems({collection: todos}); 
    this.$el.append(todosView.render().el);
    todos.fetch();
  } 
}))({el: document.body});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$(function(){ App.start(); })
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;…However, we can save an AJAX call that is used on &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; in the initial load by&lt;br /&gt;
boostrapping the HTML data which will be called on &lt;code class=&quot;highlighter-rouge&quot;&gt;append&lt;/code&gt; anyways…&lt;/p&gt;

&lt;h3 id=&quot;bootstrap-model-data&quot;&gt;Bootstrap Model Data&lt;/h3&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var App = new (Backbone.View.extend({ 
  start: function(bootstrap){
    var todos = new App.Collections.TodoItems(bootstrap.todos); 
    var todosView = new App.Views.TodoItems({collection: todos});
    this.$el.append(todosView.render().el);
  }
}))({el: document.body});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Bootstrap data comes from rendered HTML page&lt;/p&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var bootstrap = {
  todos: [
    {id: 1, description: &quot;Pickup Milk.&quot;, status: &quot;complete&quot;},
    {id: 2, description: &quot;Pickup Kids.&quot;, status: &quot;incomplete&quot;},
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Pass in data to start&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$(function(){ App.start(bootstrap); });
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;customizing-backbone&quot;&gt;7. Customizing Backbone&lt;/h2&gt;

&lt;h3 id=&quot;using-other-templates&quot;&gt;Using Other Templates&lt;/h3&gt;

&lt;p&gt;￼Underscore template:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;_.template(&quot;&amp;lt;span&amp;gt;&amp;lt;%= description %&amp;gt;&amp;lt;/span&quot; +
  &quot;&amp;lt;em&amp;gt;&amp;lt;%= assigned_to %&amp;gt;&amp;lt;/em&amp;gt;&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Mustache.compile(&quot;&amp;lt;span&amp;gt;&amp;lt;/span&quot; +
  &quot;&amp;lt;em&amp;gt;&amp;lt;/em&amp;gt;&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;NOTE: Mustache doesn’t allow arbitrary js, but Underscore does.  Underscore could be strange&lt;br /&gt;
and verbose, and Mustache is cleaner.&lt;/p&gt;

&lt;h3 id=&quot;default-restful-persistence-strategy&quot;&gt;Default RESTful Persistence Strategy&lt;/h3&gt;

&lt;p&gt;var todoItem = new TodoItem({id: 1})&lt;/p&gt;

&lt;p&gt;C.R.U.D.: &lt;br /&gt;
    ￼￼￼&lt;br /&gt;
    // Read￼&lt;br /&gt;
    todoItem.fetch(); // ==&amp;gt; GET /todos/1&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Update
todoItem.save(): // ==&amp;gt; PUT /todos/1

// Delete
todoItem.delete(); // ==&amp;gt; DELETE /todos/1

// Create
(new TodoItem({description: &quot;Pickup Kids&quot;})).save(); // ==&amp;gt; POST /todos
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;make-read-only-model&quot;&gt;Make Read-only Model&lt;/h3&gt;

&lt;p&gt;Override the sync function.  &lt;code class=&quot;highlighter-rouge&quot;&gt;method&lt;/code&gt; below is either ‘create’, ‘read’, ‘update’,&lt;br /&gt;
or ‘delete’.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var TodoItem = Backbone.Model.extend({
  sync: function(method, model, options){
    if (method === &quot;read&quot;){
      Backbone.sync(method, model, options);
    }else{
      console.error(&quot;You can not &quot; + method + &quot; the TodoItem model&quot;);
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;todoItem.fetch(); // This works
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;todoItem.save();  // ==&amp;gt; &quot;You can not update the TodoItem model&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;completely-replace-persistence-strategy&quot;&gt;Completely Replace Persistence Strategy&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;￼
var TodoItem = Backbone.Model.extend({
  sync: function(method, model, options){
    options || (options = {});

    switch(method){
      case &#39;create&#39;:
        var key = &quot;TodoItem-&quot; + model.id;
        localStorage.setItem(key, JSON.stringify(model));
      break;

      case &#39;read&#39;:
        var key = &quot;TodoItem-&quot; + model.id;
        var result = localStorage.getItem(key);
        if (result){
          result = JSON.parse(result);
          options.success &amp;amp;&amp;amp; options.success(result);
        }else if (options.error){
          options.error(&quot;Couldn&#39;t find TodoItem id=&quot; + model.id);
        } 
      break;


      case &#39;update&#39;:
      break;

      case &#39;delete&#39;:
      break;
} }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;
</description>
        <pubDate>Thu, 06 Nov 2014 06:00:00 -0800</pubDate>
        <link>www.anton23.com/craft/2014/11/06/backbone-anatomy-b1/</link>
        <guid isPermaLink="true">www.anton23.com/craft/2014/11/06/backbone-anatomy-b1/</guid>
        
        
        <category>craft</category>
        
      </item>
    
      <item>
        <title>Anatomy of Backbone A2</title>
        <description>&lt;h2 id=&quot;collections&quot;&gt;5. Collections&lt;/h2&gt;

&lt;p&gt;Set of Models&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var TodoList = Backbone.Collection.extend({
  model: TodoItem
});
var todoList = new TodoList();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Add/remove/get&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;todoList.length; //# of models
todoList.add(todoItem1); // add model instance
todoList.at(0); //get model instance at index 0
todoList.get(1); // get by id
todoList.remove(todoItem1); //remove model instance
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Bulk Population&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var todos = [
  {description: &#39;Pick up milk.&#39;, status: &#39;incomplete&#39;},
  {description: &#39;Get a car wash&#39;, status: &#39;incomplete&#39;},
  {description: &#39;Learn Backbone&#39;, status: &#39;incomplete&#39;}
];
todoList.reset(todos);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;fetching-data-from-the-server&quot;&gt;Fetching Data from the Server&lt;/h3&gt;

&lt;p&gt;URL to get JSON data from&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var TodoList = Backbone.Collection.extend({
  url: &#39;/todos&#39;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Populate collection from server&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;todoList.fetch();  // =&amp;gt; GET /todos
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;collections-can-have-events&quot;&gt;Collections can have Events&lt;/h3&gt;

&lt;p&gt;To listen for an event on a collection, and run an event: (works just like models)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;todoListon(&#39;event-name&#39;, function(){
  alert(&#39;event-name happened!&#39;);
});
todoList.trigger(&#39;event-name&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;special-events&quot;&gt;Special Events&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//Listen for events
todoList.on(&#39;reset&#39;, doThing);  

// Event Triggered on reset and fetch
todoList.fetch();
todoList.reset();

// Event triggered without notification
todoList.fetch({silent: true});
todoList.reset({silent: true});

// Remove event listener
todoList.off(&#39;reset&#39;, doThing);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Syntax&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;todoList.on(&amp;lt;event&amp;gt;, &amp;lt;function&amp;gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Built-in Events.&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;&lt;td&gt;add&lt;/td&gt;&lt;td&gt;When a model is added&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;removed&lt;/td&gt;&lt;td&gt;When a model is removed&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;reset&lt;/td&gt;&lt;td&gt;When reset or fetched&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Models in collection.  Events triggered on a model in a collection will also be triggered on the collection.&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;&lt;td&gt;change&lt;/td&gt;&lt;td&gt;When an attribute is modified&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;change:&amp;lt;attr&amp;gt;&lt;/td&gt;&lt;td&gt;When &amp;lt;attr&amp;gt; is modified&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;destroy&lt;/td&gt;&lt;td&gt;When a model is destroyed&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;sync&lt;/td&gt;&lt;td&gt;Whenever successfully synced&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;error&lt;/td&gt;&lt;td&gt;When model save or validation fails&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;all&lt;/td&gt;&lt;td&gt;Any triggered event&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;h3 id=&quot;iteration&quot;&gt;Iteration&lt;/h3&gt;

&lt;p&gt;Example collection&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;todoList.reset([
  {description: &#39;Pick up milk.&#39;, status: &#39;incomplete&#39;, id: 1},
  {description: &#39;Get a car wash.&#39;, status: &#39;complete&#39;, id: 2}
]);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Alert each model’s description&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;todoList.forEach(function(todoItem){
  alert(todoItem.get(&#39;description&#39;));
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Build an array of description&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;todoList.map(function(todoItem){
  return todoItem.get(&#39;description&#39;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Filter models of some criteria&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;todoList.filter(function(todoItem){
  return todoItem.get(&#39;status&#39;) === &quot;incomplete&quot;;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Other Iteration Functions&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;&lt;td&gt;forEach&lt;/td&gt;&lt;td&gt;reduce&lt;/td&gt;&lt;td&gt;reduceRight&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;find&lt;/td&gt;&lt;td&gt;filter&lt;/td&gt;&lt;td&gt;reject&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;every&lt;/td&gt;&lt;td&gt;all&lt;/td&gt;&lt;td&gt;some&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;include&lt;/td&gt;&lt;td&gt;invoke&lt;/td&gt;&lt;td&gt;max&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;min&lt;/td&gt;&lt;td&gt;sortBy&lt;/td&gt;&lt;td&gt;groupBy&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;sortedIndex&lt;/td&gt;&lt;td&gt;shuffle&lt;/td&gt;&lt;td&gt;toArray&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;size&lt;/td&gt;&lt;td&gt;first&lt;/td&gt;&lt;td&gt;initial&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;rest&lt;/td&gt;&lt;td&gt;last&lt;/td&gt;&lt;td&gt;without&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;indexOf&lt;/td&gt;&lt;td&gt;lastIndexOf&lt;/td&gt;&lt;td&gt;isEmpty&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;chain&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;http://documentcloud.github.io/backbone/#Collection-Underscore-Methods&quot;&gt;Link to Functions&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;collections--views&quot;&gt;6. Collections &amp;amp; Views&lt;/h2&gt;

&lt;p&gt;Collection + View == Collection View!&lt;/p&gt;

&lt;p&gt;Review our Model View&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var TodoView = Backbone.View.extend({
  render: function(){
    this.$el.html(this.template(this.model.toJSON()));
    return this;
  }
... });
var todoItem = new TodoItem();
var todoView = new TodoView({model: todoItem});
console.log(todoView.render().el);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;define-and-render&quot;&gt;Define and Render&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var TodoListView = Backbone.View.extend({});
var todoListView = new TodoListView({collection: todoList});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;First Crack at Render&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;render: function(){
  this.collection.forEach(function(todoItem){
    var todoView = new TodoView({model: todoItem});
    this.$el.append(todoView.render().el);  // !!! `this` changes context in forEach
}); }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Use addOne (2nd Crack at Render)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;render: function(){ this.collection.forEach(this.addOne, this);  // !!! 2nd param saves context
}
addOne: function(todoItem){
  var todoView = new TodoView({model: todoItem});
  this.$el.append(todoView.render().el);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To finish off…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var todoListView = new TodoListView({collection: todoList});
todoListView.render();
console.log(todoListView.el);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;adding-new-models&quot;&gt;Adding new Models&lt;/h3&gt;

&lt;p&gt;Since this is a collection, you must listen to the &lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt; event in the initalize function&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var TodoListView = Backbone.View.extend({
  initialize: function(){
    this.collection.on(&#39;add&#39;, this.addOne, this);
},
  addOne: function(todoItem){
    var todoView = new TodoView({model: todoItem});
    this.$el.append(todoView.render().el);
  },
  render: function(){
    this.collection.forEach(this.addOne, this);
  }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var newTodoItem = new TodoItem({
  description: &#39;Take out trash.&#39;,
  status: &#39;incomplete&#39;
});
todoList.add(newTodoItem);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;reset-event&quot;&gt;Reset Event&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var TodoListView = Backbone.View.extend({
  initialize: function(){
    this.collection.on(&#39;add&#39;, this.addOne, this);
    this.collection.on(&#39;reset&#39;, this.addAll, this);
  },
  addOne: function(todoItem){
    var todoView = new TodoView({model: todoItem});
    this.$el.append(todoView.render().el);
  },
  addAll: function(){
    this.collection.forEach(this.addOne, this);
￼  },
  render: function(){
    this.addAll();
  }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var todoList = new TodoList();
var todoListView = new TodoListView({
  collection: todoList
});
todoList.fetch();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;fixing-remove-with-custom-events&quot;&gt;Fixing remove with custom events&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;todoList.remove(todoItem);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;TodoList Collection&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;initialize: function(){
  this.on(&#39;remove&#39;, this.hideModel);
},
hideModel: function(model){
  model.trigger(&#39;hide&#39;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;TodoItem View&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;initialize: function(){
  this.model.on(&#39;hide&#39;, this.remove, this);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;router--history&quot;&gt;7. Router &amp;amp; History&lt;/h2&gt;

&lt;h3 id=&quot;the-router&quot;&gt;The Router&lt;/h3&gt;

&lt;p&gt;Routers map URLs to actions&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Index Action
var router = new Backbone.Router({
  routes: { &quot;todos&quot;: &#39;index&#39; },
  index: function(){
    ...
} });

// OR Show Action
var router = new Backbone.Router({
  routes: { &quot;todos/:id&quot;: &#39;show&#39; }
  show: function(id){ ... }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;triggering-routes&quot;&gt;Triggering Routes&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;router.navigate(&quot;todos/1&quot;, {
  trigger: true
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Backbone History&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Backbone.history.start({pushState: true});  // !!! pushState on!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;router.navigate(&quot;todos/1&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;show-action&quot;&gt;Show Action&lt;/h3&gt;

&lt;p&gt;Define Router Class&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var TodoRouter = Backbone.Router.extend({
  routes: { &quot;todos/:id&quot;: &quot;show&quot; },
  show: function(id){
    this.todoList.focusOnTodoItem(id);
  },
  initialize: function(options){
    this.todoList = options.todoList;
  } 
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Instantiate router instance&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var todoList = new TodoList();
var TodoApp = new TodoRouter({todoList: todoList});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;index-action&quot;&gt;Index Action&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var TodoRouter = Backbone.Router.extend({ routes: { &quot;&quot;: &quot;index&quot;,
            &quot;todos/:id&quot;: &quot;show&quot; },
  index: function(){
    this.todoList.fetch();
},
  show: function(id){
    this.todoList.focusOnTodoItem(id);
},
  initialize: function(options){
    this.todoList = options.todoList;
} });
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;app-organization&quot;&gt;App Organization&lt;/h3&gt;

&lt;p&gt;Since there’s only one router&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var TodoApp = new (Backbone.Router.extend({
  routes: { &quot;&quot;: &quot;index&quot;, &quot;todos/:id&quot;: &quot;show&quot; },
  initialize: function(){
    this.todoList = new TodoList();
    this.todosView = new TodoListView({collection: this.todoList});
    $(&#39;#app&#39;).append(this.todosView.el);
  },
  start: function(){
    Backbone.history.start({pushState: true});
  },
  index: function(){
    this.todoList.fetch();
  },
  show: function(id){
    this.todoList.focusOnTodoItem(id);
  }
}));
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!-- tsk --&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$(function(){ TodoApp.start() });
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;
</description>
        <pubDate>Wed, 05 Nov 2014 06:00:01 -0800</pubDate>
        <link>www.anton23.com/craft/2014/11/05/backbone-anatomy-a2/</link>
        <guid isPermaLink="true">www.anton23.com/craft/2014/11/05/backbone-anatomy-a2/</guid>
        
        
        <category>craft</category>
        
      </item>
    
  </channel>
</rss>
